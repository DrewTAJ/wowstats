{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///ui-router-ng2.min.js","webpack:///webpack/bootstrap 79b8ce3378a301ac535b?a453","webpack:///./ng2.ts?8f8f","webpack:///./core.ts?b26d","webpack:///./common/module.ts?216c","webpack:///./common/common.ts?a996","webpack:///./common/predicates.ts?3346","webpack:///./common/hof.ts?2590","webpack:///./common/coreservices.ts?cb79","webpack:///./common/glob.ts?9f85","webpack:///./common/queue.ts?8dfe","webpack:///./common/strings.ts?4a12","webpack:///./transition/rejectFactory.ts?39fa","webpack:///./transition/transition.ts?e0c6","webpack:///./common/trace.ts?3953","webpack:///./transition/transitionHook.ts?c175","webpack:///./state/targetState.ts?636d","webpack:///./transition/hookRegistry.ts?78c1","webpack:///./transition/hookBuilder.ts?5cba","webpack:///./resolve/resolveContext.ts?db0c","webpack:///./resolve/interface.ts?9672","webpack:///./resolve/resolvable.ts?7476","webpack:///./path/pathFactory.ts?5cf3","webpack:///./path/node.ts?f81c","webpack:///./params/param.ts?aa0b","webpack:///./url/urlMatcherConfig.ts?a46d","webpack:///./params/type.ts?5680","webpack:///./router.ts?40b8","webpack:///./url/urlMatcherFactory.ts?0f3e","webpack:///./url/urlMatcher.ts?0536","webpack:///./params/paramTypes.ts?33e0","webpack:///./url/urlRouter.ts?9e8a","webpack:///./transition/transitionService.ts?5ce0","webpack:///./hooks/resolve.ts?8bdd","webpack:///./hooks/views.ts?6163","webpack:///./hooks/url.ts?3bd9","webpack:///./hooks/redirectTo.ts?7129","webpack:///./hooks/onEnterExitRetain.ts?06b0","webpack:///./hooks/lazyLoadStates.ts?f120","webpack:///./view/view.ts?e0c9","webpack:///./state/stateRegistry.ts?fafa","webpack:///./state/stateMatcher.ts?e974","webpack:///./state/stateBuilder.ts?59db","webpack:///./state/stateQueueManager.ts?3dba","webpack:///./state/stateObject.ts?1897","webpack:///./state/stateService.ts?6000","webpack:///./globals.ts?3d7d","webpack:///./params/stateParams.ts?1d6b","webpack:///./params/module.ts?b035","webpack:///./path/module.ts?805c","webpack:///./resolve/module.ts?ed8e","webpack:///./state/module.ts?4f0c","webpack:///./transition/module.ts?dde7","webpack:///./url/module.ts?b91a","webpack:///./view/module.ts?7429","webpack:///./justjs.ts?27aa","webpack:///./ng2/interface.ts?1f02","webpack:///external {\"root\":\"@angular/core\",\"amd\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"commonjs\":\"@angular/core\"}?3485","webpack:///./ng2/lazyLoadNgModule.ts?3b51","webpack:///./ng2/uiRouterNgModule.ts?5d0e","webpack:///./ng2/directives/directives.ts?61be","webpack:///./ng2/directives/uiSref.ts?3283","webpack:///./ng2/directives/uiView.ts?b0de","webpack:///./ng2/private_import_core.ts?73a0","webpack:///./ng2/statebuilders/views.ts?167b","webpack:///./ng2/mergeInjector.ts?642b","webpack:///external {\"root\":\"rxjs/Rx\",\"amd\":\"rxjs/Rx\",\"commonjs2\":\"rxjs/Rx\",\"commonjs\":\"rxjs/Rx\"}?b4b2","webpack:///./ng2/directives/uiSrefActive.ts?b4b9","webpack:///./ng2/directives/uiSrefStatus.ts?79ed","webpack:///external {\"root\":\"@angular/common\",\"amd\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"commonjs\":\"@angular/common\"}?3483","webpack:///./ng2/providers.ts?7643","webpack:///./ng2/uiRouterConfig.ts?bcb9","webpack:///./ng2/location.ts?677f","webpack:///./ng2/rx.ts?0ed1"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_55__","__WEBPACK_EXTERNAL_MODULE_64__","__WEBPACK_EXTERNAL_MODULE_67__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","router_1","UIRouter","bindFunctions","from","to","bindTo","fnNames","Object","keys","filter","name","forEach","bind","defaults","opts","defaultsList","_i","arguments","length","merge","apply","concat","extend","pick","dst","objs","obj","value","key","ancestors","first","second","path","n","push","equalForKeys","a","b","i","k","pickOmitImpl","predicate","objCopy","inArray","restArgs","omit","notInArray","array","item","pluck","collection","propName","map","hof_1","prop","callback","arr","predicates_1","isArray","result","accept","x","find","pushR","assertPredicate","errMsg","Error","isFunction","arrayTuples","arrayArgs","reduce","min","Math","Array","ignored","idx","applyPairs","memo","keyValTuple","isString","tail","undefined","_copy","src","dest","_forEach","cb","_this","_copyProps","_extend","toObj","identity","_equals","o1","o2","t1","t2","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","predicates","any","fn","a1","a2","t","coreservices_1","w","window","angular","fromJson","JSON","parse","toJson","stringify","copy","equals","noop","inherit","parent","extra","prototype","args","slice","indexOf","removeFrom","curry","splice","mergeR","mapObj","values","allTrueR","elem","anyTrueR","unnestR","flattenR","uniqR","acc","token","unnest","flatten","pairs","silenceUncaughtInPromise","promise","e","silentRejection","error","services","$q","reject","isInjectable","val","head","not","toStr","tis","isUndefined","isDefined","isNull","o","isNumber","isObject","isPromise","and","pipe","curried","func_args_length","initial_args","compose","start","funcs","reverse","fn1","fn2","or","invoke","fnName","pattern","struct","propEq","split","is","ctor","constructor","eq","other","v","notImplemented","fnname","$injector","location","locationConfig","template","Glob","text","glob","regexpString","seg","join","regexp","RegExp","matches","test","fromString","Queue","_items","_limit","enqueue","items","shift","dequeue","size","clear","current","remove","peekTail","peekHead","maxLength","max","str","substr","padString","kebobString","camelCase","replace","$1","toLowerCase","functionToString","fnStr","fnToString","namedFunctionMatch","match","_fn","format","seen","stringifyPattern","rejectFactory_1","common_1","transition_1","resolvable_1","stringifyPatternFn","isTransitionRejectionPromise","Rejection","_transitionRejection","Transition","Resolvable","beforeAfterSubstr","char","strings_1","RejectType","type","message","detail","detailString","d","toPromise","then","superseded","options","rejection","SUPERSEDED","redirected","invalid","INVALID","IGNORED","aborted","ABORTED","errored","ERROR","trace_1","transitionHook_1","hookRegistry_1","hookBuilder_1","node_1","pathFactory_1","targetState_1","param_1","resolveContext_1","transitionCount","stateSelf","fromPath","targetState","router","_deferred","defer","treeChanges","_treeChanges","isActive","_options","_targetState","valid","HookRegistry","mixin","$id","toPath","PathFactory","buildToPath","reloadState","enteringStates","entering","node","state","applyViewConfigs","transitionService","$view","rootResolvables","params","rootNode","context","ResolveContext","addResolvables","onBefore","matchCriteria","onStart","onExit","onRetain","onEnter","onFinish","onSuccess","onError","$from","$to","self","compare","matchState","pathname","injector","subPath","getResolveTokens","getTokens","getResolveValue","resolveContext","getData","resolvable","getResolvable","data","addResolvable","stateName","topath","targetNode","redirectedFrom","exiting","retained","views","redirect","newOptions","source","TargetState","identifier","$state","newTransition","create","originalEnteringNodes","redirectEnteringNodes","nodeIsReloading","includes","matchingEnteringNodes","PathNode","matching","resolvables","_changedParams","_a","reload","nodeSchemas","paramSchema","_b","paramValues","toValues","fromValues","tuples","schema","toVals","fromVals","Param","changed","dynamic","changes","hookBuilder","HookBuilder","transition","run","runSynchronousHooks","TransitionHook","globals","transitionHistory","syncResult","getOnBeforeHooks","rejectReason","trace","traceTransitionIgnored","transitionSuccess","traceSuccess","success","resolve","getOnSuccessHooks","transitionError","reason","traceError","_error","getOnErrorHooks","traceTransitionStart","appendHookToChain","prev","nextHook","invokeHook","asyncHooks","redirects","trans","validates","parameters","fromStateOrName","toStateOrName","avoidEmptyHash","fromParams","toValid","toParams","diToken","uiViewString","viewData","creationContext","fqn","normalizedCat","input","Category","viewConfigString","viewConfig","viewDecl","$context","$uiViewName","$uiViewContextAnchor","Trace","_enabled","approximateDigests","_set","enabled","categories","parseInt","isNaN","category","enable","disable","TRANSITION","tid","digest","transitionStr","console","log","traceHookInvocation","step","HOOK","event","eventHook","traceHookResult","hookResult","transitionOptions","hookResultStr","traceResolvePath","when","RESOLVE","pathStr","traceResolvableResolved","resolvableStr","finalState","traceUIViewEvent","UIVIEW","traceUIViewConfigUpdated","traceUIViewFill","html","traceViewServiceEvent","VIEWCONFIG","traceViewServiceUIViewEvent","defaultOptions","async","rejectIfSuperseded","traceData","stateContext","isSuperseded","synchronousHookResult","_deregistered","handleHookResult","isTargetState","hooks","swallowExceptions","results","hook","exception","errorHandler","stateService","defaultErrorHandler","rejections","chain","_identifier","_definition","_params","exists","base","relative","criterion","matchGlobs","_state","globStrings","toMatch","glob_1","matchFn","makeHookRegistrationFn","matchObject","EventHook","priority","_matchingNodes","nodes","mc","allMatched","_transitionEvents","getHooks","target","tupleSort","reverseDepthSort","l","r","factor","depthDelta","$transitions","baseHookOptions","_buildNodeHooks","getOnStartHooks","getOnExitHooks","stateHook","getOnRetainHooks","getOnEnterHooks","getOnFinishHooks","toState","fromState","onStartHooks","onExitHooks","onRetainHooks","onEnterHooks","onFinishHooks","hookType","matchingNodesProp","sortHooksFn","matchingHooks","_matchingHooks","makeTransitionHooks","matchingNodes","resolvePath","transitionHook","sort","tuple","hookName","reg","interface_1","resolvePolicies","ALL_WHENS","EAGER","LAZY","EAGER_WHENS","NATIVE_INJECTOR_TOKEN","_path","subContext","newResolvables","whenOption","matchedWhens","promises","matchesRequestedPolicy","getPolicy","nodeResolvables","getResult","get","_injector","UIInjectorImpl","findNode","getDependencies","availableResolvables","res","getDependency","fromInjector","getNative","deps","resolved","getAsync","WAIT","NOWAIT","RXWAIT","defaultResolvePolicy","arg1","resolveFn","policy","literal","thisPolicy","statePolicy","resolvePolicy","getResolvableDependencies","invokeResolveFn","resolvedDeps","waitForRx","observable$","cached","cache","take","maybeWaitForRx","applyResolvedValue","resolvedValue","clone","fromData","makeTargetState","buildPath","applyRawParams","inheritParams","states","viewDecls","viewConfigs","view","createViewConfig","toKeys","nodeParamVals","makeInheritedParamsNode","toNode","toParamVals","incomingParamVals","fromParamVals","ownParamVals","applyToParams","retainedNode","cloned","keep","staticParams","nodesMatch","node1","node2","retainedWithToParams","elementIdx","stateOrPath","getParamVal","paramDef","pDef","parameter","paramValsEq","pathA","pathB","ignoreDynamicParams","changedParams","param","unwrapShorthand","cfg","isShorthand","$$fn","getType","urlType","paramTypes","type_1","ParamType","DefType","CONFIG","getSquashPolicy","config","isOptional","squash","urlMatcherConfig_1","matcherConfig","defaultSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","hasOwn","getArrayMode","arrayDefaults","SEARCH","arrayParamNomenclature","$asArray","isDefaultValue","$$getDefaultValue","defaultValue","$replace","replacement","$normalize","isSearch","normalized","encoded","encode","exec","fromConfig","PATH","fromSearch","values1","values2","MatcherConfig","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","caseInsensitive","strictMode","ArrayType","mode","arrayWrap","arrayUnwrap","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","left","right","paramTypeFn","wrapperFn","$arrayMode","def","decode","$subPattern","sub","urlMatcherFactory_1","urlRouter_1","urlRouter_2","transitionService_1","view_1","stateRegistry_1","stateService_1","globals_1","viewService","ViewService","TransitionService","Globals","urlMatcherFactory","UrlMatcherFactory","urlRouterProvider","UrlRouterProvider","urlRouter","UrlRouter","stateRegistry","StateRegistry","StateService","rootContext","$current","getDefaultConfig","strict","urlMatcher_1","paramTypes_1","ParamTypes","UrlMatcher","compile","isMatcher","object","definition","definitionFn","$get","_flushTypeQueue","quoteRegExp","string","surroundPattern","predicates_2","param_2","common_2","common_3","memoizeTo","_cache","_children","_segments","_compiled","paramMap","segment","placeholder","searchPlaceholder","last","patterns","checkParamErrors","nameValidator","matchDetails","substring","index","lastIndex","search","prefix","freeze","append","url","isRoot","hash","decodePathArray","reverseString","unquoteDashes","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","j","validParamVal","getDetails","urlMatchers","pathSegmentsAndParams","queryParams","pathString","encodeDashes","raw","encodeURIComponent","queryString","charCodeAt","toUpperCase","matcher","staticSegments","valToString","~","/","valFromString","~~","~2F","typeQueue","defaultTypes","String","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","json","makeType","types","regExpPrefix","re","interpolate","what","Number","handleIfMatch","$stateParams","handler","$match","appendBasePath","isHtml5","absolute","baseHref","update","rules","otherwiseFn","evt","check","rule","handled","$location","setUrl","defaultPrevented","$urlMatcherFactory","interceptDeferred","removeRule","otherwise","ruleCallback","handlerIsString","strategies","_what","_handler","regex","global","sticky","deferIntercept","sync","listen","listener","onChange","read","urlMatcher","href","html5Mode","hashPrefix","slash","port","protocol","host","resolve_1","views_1","url_1","redirectTo_1","onEnterExitRetain_1","lazyLoadStates_1","defaultTransOpts","notify","custom","_router","_deregisterHookFns","registerTransitionHooks","fns","redirectTo","registerRedirectToHook","registerOnExitHook","registerOnRetainHook","registerOnEnterHook","eagerResolve","registerEagerResolvePath","lazyResolve","registerLazyResolveState","loadViews","registerLoadEnteringViews","activateViews","registerActivateViews","updateUrl","registerUpdateUrl","lazyLoad","registerLazyLoadHook","eagerResolvePath","lazyResolveState","loadEnteringViews","enteringViews","load","exitingViews","vc","deactivateViewConfig","activateViewConfig","$urlRouter","navigable","urlOptions","redirectToHook","handleResult","makeEnterExitRetainHook","hookFn","onExitHook","onRetainHook","onEnterHook","lazyLoadHook","retryOriginalTransition","loc","path_1","search_1","hash_1","registry","s","$$state","orig","updateStateRegistry","deregister","register","cleanup","uiViews","_viewConfigFactories","uiViewDepth","uiView","viewConfigDepth","count","uiViewsByFqn","uiv","$type","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","configureUIView","configUpdated","_rootContext","viewConfigFactory","viewType","decl","cfgFactory","cfgs","registerUIView","fqnMatches","available","active","normalizeUIViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","charAt","relativeMatch","anchor","stateMatcher_1","stateBuilder_1","stateQueueManager_1","listeners","StateMatcher","builder","StateBuilder","stateQueue","StateQueueManager","rootStateDef","#","abstract","_root","onStatesChanged","stateDefinition","_deregisterTree","getChildren","children","deregistered","_urlRule","stateOrName","deregisteredStates","found","decorator","func","_states","isRelative","isStr","baseState","splitName","pathLength","relName","nameBuilder","selfBuilder","dataBuilder","pathBuilder","includesBuilder","resolvablesBuilder","objects2Tuples","resolveObj","annotate","strictDi","isResolveLiteral","isLikeNg2Provider","provide","useValue","useFactory","useExisting","useClass","isTupleFromObj","literal2Resolvable","dependencies","tuple2Resolvable","item2Resolvable","parseUrl","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","parsed","paramConfig","reloadOnSearch","getNavigableBuilder","getParamsBuilder","makeConfigParam","urlParams","nonUrlParams","parentBuilder","parentName","builders","build","parentFn","segments","lastSegment","pop","stateObject_1","$urlRouterProvider","queue","State","flush","registered","orphans","previousQueueLength","orphanIdx","attachRoute","autoFlush","transitionTo","ref","inherited","queue_1","invalidCallbacks","_defaultErrorHandler","$error$","stack","getters","boundFns","defineProperty","enumerable","configurable","_handleInvalidTargetState","invokeNextCallback","nextCallback","callbackQueue","callbackResult","checkForRedirect","latestThing","latest","onInvalid","go","defautGoOpts","transOpts","transHistory","latestSuccess","successfulTransitions","rootPath","currentPath","rejectedTransitionHandler","transitionToPromise","include","defaultHrefOpts","lossy","$inherit","nav","stateParams_1","StateParams","beforeNewTransition","$transition$","updateGlobalState","clearCurrentTransition","newParams","parentParams","parents","inheritList","executor","Promise","deferred","objectToTuples","tuplesToObject","has","locals","ensureExist","STRIP_COMMENTS","ARGUMENT_NAMES","addEventListener","locCfg","core_1","NG2_INJECTOR_TOKEN","OpaqueToken","loadNgModule","loadUIRouterModules","ng2Module","parentInjector","uiRouter","originalName","originalState","rootModules","uiRouterNgModule_1","UIROUTER_ROOT_MODULE","parentRootModules","newRootModules","UIROUTER_MODULE_TOKEN","uiRouterConfig_1","applyModuleConfig","replacementState","getNg2Injector","createNg2Module","ng2Injector","NgModuleFactoryLoader","moduleRef","makeProviders","forRoot","providers","configClass","multi","ANALYZE_FOR_ENTRY_COMPONENTS","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadata","directives_1","uiView_1","providers_1","UIRouterModule","locationStrategy","useHash","HashLocationStrategy","PathLocationStrategy","ngModule","_UIROUTER_INSTANCE_PROVIDERS","_UIROUTER_SERVICE_PROVIDERS","LocationStrategy","forChild","NgModule","declarations","_UIROUTER_DIRECTIVES","entryComponents","UIView","uiSref_1","uiSrefActive_1","uiSrefStatus_1","UISref","AnchorUISref","UISrefActive","UISrefStatus","UIROUTER_DIRECTIVES","__param","paramIndex","core_2","core_3","core_4","Rx_1","_el","_renderer","setElementProperty","nativeElement","Directive","selector","ElementRef","Renderer","_anchorUISref","_globals","targetState$","ReplaySubject","_emit","_statesSub","states$","subscribe","set","ngOnInit","ngOnDestroy","unsubscribe","newTarget","getOptions","next","defaultOpts","Input","(click)","Inject","PARENT_INJECT","Optional","private_import_core_1","mergeInjector_1","ng2ComponentInputs","ng2CompClass","props","reflector","propMetadata","_props","annoArr","anno","bindingPropertyName","inputs","annotations","Component","viewContainerRef","uiViewData","parentFqn","viewConfigUpdated","disposeLast","componentRef","destroy","Ng2ViewConfig","applyUpdatedConfig","componentInjector","getComponentInjector","componentClass","component","compFactoryResolver","ComponentFactoryResolver","compFactory","resolveComponentFactory","componentTarget","createComponent","applyInputBindings","newProviders","parentInject","parentComponentInjector","moduleInjector","mergedParentInjector","MergeInjector","ReflectiveInjector","resolveAndCreate","bindings","inputTuples","instance","changeDetectorRef","detectChanges","ViewChild","ViewContainerRef","__core_private__","ng2ViewsBuilder","viewsObject","$default","$name","injectors","notFoundValue","NOT_FOUND","uiSrefStatus","rnd","_classes","_classesEq","_subscription","cls","setElementClass","exact","Host","spreadToSubPaths","basePath","appendPath","getSrefStatus","srefTarget","pathMatchesTarget","pathMatches","tc","isStartEvent","isSuccessEvent","activePath","isExact","isEntering","isExiting","inactiveStatus","targetParamVals","targetPath","tailNode","EventEmitter","status","assign","ngAfterContentInit","transEvents$","start$","switchMap","transStart$","Observable","of","transResult","transFinish$","fromPromise","srefs$","srefs","toArray","targetStates$","combineLatest","sref","mergeMap","targets","statuses","_setStatus","emit","Output","ContentChildren","descendants","QueryList","location_1","rx_1","uiRouterFactory","init","UIRouterRx","ng2InjectorResolvable","setTimeout","moduleConfig","applyRootModuleConfig","UIRouterLocation","Injector","UIROUTER_PROVIDERS","splitOnHash","splitOnEquals","splitOnQuestionMark","platformLocation","isHashBang","locSt","basepath","getBaseHref","basepathRegExp_1","replace_1","kv","replaceState","pushState","onPopState","newprefix","Injectable","PlatformLocation","onStatesChangedEvent","changeEvent","currentStates","deregisterFns","success$","params$","dispose","deregisterFn"],"mappings":"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","file":"ui-router-ng2.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"rxjs/Rx\"), require(\"@angular/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-router-ng2\", [\"@angular/core\", \"rxjs/Rx\", \"@angular/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-router-ng2\"] = factory(require(\"@angular/core\"), require(\"rxjs/Rx\"), require(\"@angular/common\"));\n\telse\n\t\troot[\"ui-router-ng2\"] = factory(root[\"@angular/core\"], root[\"rxjs/Rx\"], root[\"@angular/common\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_67__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"rxjs/Rx\"), require(\"@angular/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-router-ng2\", [\"@angular/core\", \"rxjs/Rx\", \"@angular/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-router-ng2\"] = factory(require(\"@angular/core\"), require(\"rxjs/Rx\"), require(\"@angular/common\"));\n\telse\n\t\troot[\"ui-router-ng2\"] = factory(root[\"@angular/core\"], root[\"rxjs/Rx\"], root[\"@angular/common\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_55__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_67__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * Main entry point for angular 2.x build\r\n\t * @module ng2\r\n\t */\r\n\t/** for typedoc */\r\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\t__webpack_require__(53);\r\n\t__export(__webpack_require__(54));\r\n\t__export(__webpack_require__(56));\r\n\t__export(__webpack_require__(71));\r\n\t__export(__webpack_require__(68));\r\n\t__export(__webpack_require__(70));\r\n\t__export(__webpack_require__(58));\r\n\t__export(__webpack_require__(62));\r\n\t__export(__webpack_require__(57));\r\n\t__export(__webpack_require__(69));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common */ /** */\r\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(46));\r\n\t__export(__webpack_require__(47));\r\n\t__export(__webpack_require__(48));\r\n\t__export(__webpack_require__(49));\r\n\t__export(__webpack_require__(50));\r\n\t__export(__webpack_require__(51));\r\n\t__export(__webpack_require__(52));\r\n\t__export(__webpack_require__(44));\r\n\tvar router_1 = __webpack_require__(25);\r\n\texports.UIRouter = router_1.UIRouter;\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module common */ /** for typedoc */\r\n\t__export(__webpack_require__(3));\r\n\t__export(__webpack_require__(6));\r\n\t__export(__webpack_require__(7));\r\n\t__export(__webpack_require__(5));\r\n\t__export(__webpack_require__(4));\r\n\t__export(__webpack_require__(8));\r\n\t__export(__webpack_require__(9));\r\n\t__export(__webpack_require__(12));\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * Random utility functions used in the UI-Router code\r\n\t *\r\n\t * @preferred @module common\r\n\t */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar w = typeof window === 'undefined' ? {} : window;\r\n\tvar angular = w.angular || {};\r\n\texports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\r\n\texports.toJson = angular.toJson || JSON.stringify.bind(JSON);\r\n\texports.copy = angular.copy || _copy;\r\n\texports.forEach = angular.forEach || _forEach;\r\n\texports.extend = angular.extend || _extend;\r\n\texports.equals = angular.equals || _equals;\r\n\texports.identity = function (x) { return x; };\r\n\texports.noop = function () { return undefined; };\r\n\t/**\r\n\t * Binds and copies functions onto an object\r\n\t *\r\n\t * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\r\n\t * on the 'to' object.\r\n\t *\r\n\t * This example creates an new class instance whose functions are prebound to the new'd object.\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * class Foo {\r\n\t *   constructor(data) {\r\n\t *     // Binds all functions from Foo.prototype to 'this',\r\n\t *     // then copies them to 'this'\r\n\t *     bindFunctions(Foo.prototype, this, this);\r\n\t *     this.data = data;\r\n\t *   }\r\n\t *\r\n\t *   log() {\r\n\t *     console.log(this.data);\r\n\t *   }\r\n\t * }\r\n\t *\r\n\t * let myFoo = new Foo([1,2,3]);\r\n\t * var logit = myFoo.log;\r\n\t * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\r\n\t * ```\r\n\t *\r\n\t * This example creates a bound version of a service function, and copies it to another object\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * var SomeService = {\r\n\t *   this.data = [3, 4, 5];\r\n\t *   this.log = function() {\r\n\t *     console.log(this.data);\r\n\t *   }\r\n\t * }\r\n\t *\r\n\t * // Constructor fn\r\n\t * function OtherThing() {\r\n\t *   // Binds all functions from SomeService to SomeService,\r\n\t *   // then copies them to 'this'\r\n\t *   bindFunctions(SomeService, this, SomeService);\r\n\t * }\r\n\t *\r\n\t * let myOtherThing = new OtherThing();\r\n\t * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\r\n\t * ```\r\n\t *\r\n\t * @param from The object which contains the functions to be bound\r\n\t * @param to The object which will receive the bound functions\r\n\t * @param bindTo The object which the functions will be bound to\r\n\t * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\r\n\t */\r\n\tfunction bindFunctions(from, to, bindTo, fnNames) {\r\n\t    if (fnNames === void 0) { fnNames = Object.keys(from); }\r\n\t    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\r\n\t        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\r\n\t}\r\n\texports.bindFunctions = bindFunctions;\r\n\t/**\r\n\t * prototypal inheritance helper.\r\n\t * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\r\n\t */\r\n\texports.inherit = function (parent, extra) {\r\n\t    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\r\n\t};\r\n\t/**\r\n\t * Given an arguments object, converts the arguments at index idx and above to an array.\r\n\t * This is similar to es6 rest parameters.\r\n\t *\r\n\t * Optionally, the argument at index idx may itself already be an array.\r\n\t *\r\n\t * For example,\r\n\t * given either:\r\n\t *        arguments = [ obj, \"foo\", \"bar\" ]\r\n\t * or:\r\n\t *        arguments = [ obj, [\"foo\", \"bar\"] ]\r\n\t * then:\r\n\t *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\r\n\t *\r\n\t * This allows functions like pick() to be implemented such that it allows either a bunch\r\n\t * of string arguments (like es6 rest parameters), or a single array of strings:\r\n\t *\r\n\t * given:\r\n\t *        var obj = { foo: 1, bar: 2, baz: 3 };\r\n\t * then:\r\n\t *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\r\n\t *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\r\n\t */\r\n\tvar restArgs = function (args, idx) {\r\n\t    if (idx === void 0) { idx = 0; }\r\n\t    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\r\n\t};\r\n\t/** Given an array, returns true if the object is found in the array, (using indexOf) */\r\n\texports.inArray = function (array, obj) {\r\n\t    return array.indexOf(obj) !== -1;\r\n\t};\r\n\t/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\r\n\texports.removeFrom = hof_1.curry(function (array, obj) {\r\n\t    var idx = array.indexOf(obj);\r\n\t    if (idx >= 0)\r\n\t        array.splice(idx, 1);\r\n\t    return array;\r\n\t});\r\n\t/**\r\n\t * Applies a set of defaults to an options object.  The options object is filtered\r\n\t * to only those properties of the objects in the defaultsList.\r\n\t * Earlier objects in the defaultsList take precedence when applying defaults.\r\n\t */\r\n\tfunction defaults(opts) {\r\n\t    if (opts === void 0) { opts = {}; }\r\n\t    var defaultsList = [];\r\n\t    for (var _i = 1; _i < arguments.length; _i++) {\r\n\t        defaultsList[_i - 1] = arguments[_i];\r\n\t    }\r\n\t    var defaults = merge.apply(null, [{}].concat(defaultsList));\r\n\t    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\r\n\t}\r\n\texports.defaults = defaults;\r\n\t/**\r\n\t * Merges properties from the list of objects to the destination object.\r\n\t * If a property already exists in the destination object, then it is not overwritten.\r\n\t */\r\n\tfunction merge(dst) {\r\n\t    var objs = [];\r\n\t    for (var _i = 1; _i < arguments.length; _i++) {\r\n\t        objs[_i - 1] = arguments[_i];\r\n\t    }\r\n\t    exports.forEach(objs, function (obj) {\r\n\t        exports.forEach(obj, function (value, key) {\r\n\t            if (!dst.hasOwnProperty(key))\r\n\t                dst[key] = value;\r\n\t        });\r\n\t    });\r\n\t    return dst;\r\n\t}\r\n\texports.merge = merge;\r\n\t/** Reduce function that merges each element of the list into a single object, using extend */\r\n\texports.mergeR = function (memo, item) { return exports.extend(memo, item); };\r\n\t/**\r\n\t * Finds the common ancestor path between two states.\r\n\t *\r\n\t * @param {Object} first The first state.\r\n\t * @param {Object} second The second state.\r\n\t * @return {Array} Returns an array of state names in descending order, not including the root.\r\n\t */\r\n\tfunction ancestors(first, second) {\r\n\t    var path = [];\r\n\t    for (var n in first.path) {\r\n\t        if (first.path[n] !== second.path[n])\r\n\t            break;\r\n\t        path.push(first.path[n]);\r\n\t    }\r\n\t    return path;\r\n\t}\r\n\texports.ancestors = ancestors;\r\n\t/**\r\n\t * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\r\n\t *\r\n\t * @param {Object} a The first object.\r\n\t * @param {Object} b The second object.\r\n\t * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\r\n\t *                     it defaults to the list of keys in `a`.\r\n\t * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\r\n\t */\r\n\tfunction equalForKeys(a, b, keys) {\r\n\t    if (keys === void 0) { keys = Object.keys(a); }\r\n\t    for (var i = 0; i < keys.length; i++) {\r\n\t        var k = keys[i];\r\n\t        if (a[k] != b[k])\r\n\t            return false; // Not '===', values aren't necessarily normalized\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\texports.equalForKeys = equalForKeys;\r\n\tfunction pickOmitImpl(predicate, obj) {\r\n\t    var keys = [];\r\n\t    for (var _i = 2; _i < arguments.length; _i++) {\r\n\t        keys[_i - 2] = arguments[_i];\r\n\t    }\r\n\t    var objCopy = {};\r\n\t    for (var key in obj) {\r\n\t        if (predicate(keys, key))\r\n\t            objCopy[key] = obj[key];\r\n\t    }\r\n\t    return objCopy;\r\n\t}\r\n\t/** Return a copy of the object only containing the whitelisted properties. */\r\n\tfunction pick(obj) {\r\n\t    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));\r\n\t}\r\n\texports.pick = pick;\r\n\t/** Return a copy of the object omitting the blacklisted properties. */\r\n\tfunction omit(obj) {\r\n\t    var notInArray = function (array, item) { return !exports.inArray(array, item); };\r\n\t    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));\r\n\t}\r\n\texports.omit = omit;\r\n\t/**\r\n\t * Maps an array, or object to a property (by name)\r\n\t */\r\n\tfunction pluck(collection, propName) {\r\n\t    return map(collection, hof_1.prop(propName));\r\n\t}\r\n\texports.pluck = pluck;\r\n\t/** Filters an Array or an Object's properties based on a predicate */\r\n\tfunction filter(collection, callback) {\r\n\t    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\r\n\t    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\r\n\t    exports.forEach(collection, function (item, i) {\r\n\t        if (callback(item, i))\r\n\t            accept(item, i);\r\n\t    });\r\n\t    return result;\r\n\t}\r\n\texports.filter = filter;\r\n\t/** Finds an object from an array, or a property of an object, that matches a predicate */\r\n\tfunction find(collection, callback) {\r\n\t    var result;\r\n\t    exports.forEach(collection, function (item, i) {\r\n\t        if (result)\r\n\t            return;\r\n\t        if (callback(item, i))\r\n\t            result = item;\r\n\t    });\r\n\t    return result;\r\n\t}\r\n\texports.find = find;\r\n\t/** Given an object, returns a new object, where each property is transformed by the callback function */\r\n\texports.mapObj = map;\r\n\t/** Maps an array or object properties using a callback function */\r\n\tfunction map(collection, callback) {\r\n\t    var result = predicates_1.isArray(collection) ? [] : {};\r\n\t    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\r\n\t    return result;\r\n\t}\r\n\texports.map = map;\r\n\t/**\r\n\t * Given an object, return its enumerable property values\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let foo = { a: 1, b: 2, c: 3 }\r\n\t * let vals = values(foo); // [ 1, 2, 3 ]\r\n\t * ```\r\n\t */\r\n\texports.values = function (obj) {\r\n\t    return Object.keys(obj).map(function (key) { return obj[key]; });\r\n\t};\r\n\t/**\r\n\t * Reduce function that returns true if all of the values are truthy.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let vals = [ 1, true, {}, \"hello world\"];\r\n\t * vals.reduce(allTrueR, true); // true\r\n\t *\r\n\t * vals.push(0);\r\n\t * vals.reduce(allTrueR, true); // false\r\n\t * ```\r\n\t */\r\n\texports.allTrueR = function (memo, elem) { return memo && elem; };\r\n\t/**\r\n\t * Reduce function that returns true if any of the values are truthy.\r\n\t *\r\n\t *  * @example\r\n\t * ```\r\n\t *\r\n\t * let vals = [ 0, null, undefined ];\r\n\t * vals.reduce(anyTrueR, true); // false\r\n\t *\r\n\t * vals.push(\"hello world\");\r\n\t * vals.reduce(anyTrueR, true); // true\r\n\t * ```\r\n\t */\r\n\texports.anyTrueR = function (memo, elem) { return memo || elem; };\r\n\t/**\r\n\t * Reduce function which un-nests a single level of arrays\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\r\n\t * ```\r\n\t */\r\n\texports.unnestR = function (memo, elem) { return memo.concat(elem); };\r\n\t/**\r\n\t * Reduce function which recursively un-nests all arrays\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\r\n\t * ```\r\n\t */\r\n\texports.flattenR = function (memo, elem) {\r\n\t    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);\r\n\t};\r\n\t/**\r\n\t * Reduce function that pushes an object to an array, then returns the array.\r\n\t * Mostly just for [[flattenR]] and [[uniqR]]\r\n\t */\r\n\tfunction pushR(arr, obj) {\r\n\t    arr.push(obj);\r\n\t    return arr;\r\n\t}\r\n\texports.pushR = pushR;\r\n\t/** Reduce function that filters out duplicates */\r\n\texports.uniqR = function (acc, token) {\r\n\t    return exports.inArray(acc, token) ? acc : pushR(acc, token);\r\n\t};\r\n\t/**\r\n\t * Return a new array with a single level of arrays unnested.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\r\n\t * ```\r\n\t */\r\n\texports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\r\n\t/**\r\n\t * Return a completely flattened version of an array.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\r\n\t * ```\r\n\t */\r\n\texports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\r\n\t/**\r\n\t * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let isNumber = (obj) => typeof(obj) === 'number';\r\n\t * let allNumbers = [ 1, 2, 3, 4, 5 ];\r\n\t * allNumbers.filter(assertPredicate(isNumber)); //OK\r\n\t *\r\n\t * let oneString = [ 1, 2, 3, 4, \"5\" ];\r\n\t * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\r\n\t * ```\r\n\t */\r\n\tfunction assertPredicate(predicate, errMsg) {\r\n\t    if (errMsg === void 0) { errMsg = \"assert failure\"; }\r\n\t    return function (obj) {\r\n\t        if (!predicate(obj)) {\r\n\t            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\t}\r\n\texports.assertPredicate = assertPredicate;\r\n\t/**\r\n\t * Like _.pairs: Given an object, returns an array of key/value pairs\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\r\n\t * ```\r\n\t */\r\n\texports.pairs = function (obj) {\r\n\t    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });\r\n\t};\r\n\t/**\r\n\t * Given two or more parallel arrays, returns an array of tuples where\r\n\t * each tuple is composed of [ a[i], b[i], ... z[i] ]\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let foo = [ 0, 2, 4, 6 ];\r\n\t * let bar = [ 1, 3, 5, 7 ];\r\n\t * let baz = [ 10, 30, 50, 70 ];\r\n\t * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\r\n\t * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\r\n\t * ```\r\n\t */\r\n\tfunction arrayTuples() {\r\n\t    var arrayArgs = [];\r\n\t    for (var _i = 0; _i < arguments.length; _i++) {\r\n\t        arrayArgs[_i - 0] = arguments[_i];\r\n\t    }\r\n\t    if (arrayArgs.length === 0)\r\n\t        return [];\r\n\t    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\r\n\t    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\r\n\t}\r\n\texports.arrayTuples = arrayTuples;\r\n\t/**\r\n\t * Reduce function which builds an object from an array of [key, value] pairs.\r\n\t *\r\n\t * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\r\n\t *\r\n\t * Each keyValueTuple should be an array with values [ key: string, value: any ]\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\r\n\t *\r\n\t * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\r\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\r\n\t *\r\n\t * // Or, more simply:\r\n\t * var pairsToObj = pairs.reduce(applyPairs, {})\r\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\r\n\t * ```\r\n\t */\r\n\tfunction applyPairs(memo, keyValTuple) {\r\n\t    var key, value;\r\n\t    if (predicates_1.isArray(keyValTuple))\r\n\t        key = keyValTuple[0], value = keyValTuple[1];\r\n\t    if (!predicates_1.isString(key))\r\n\t        throw new Error(\"invalid parameters to applyPairs\");\r\n\t    memo[key] = value;\r\n\t    return memo;\r\n\t}\r\n\texports.applyPairs = applyPairs;\r\n\t/** Get the last element of an array */\r\n\tfunction tail(arr) {\r\n\t    return arr.length && arr[arr.length - 1] || undefined;\r\n\t}\r\n\texports.tail = tail;\r\n\t/**\r\n\t * shallow copy from src to dest\r\n\t *\r\n\t * note: This is a shallow copy, while angular.copy is a deep copy.\r\n\t * ui-router uses `copy` only to make copies of state parameters.\r\n\t */\r\n\tfunction _copy(src, dest) {\r\n\t    if (dest)\r\n\t        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\r\n\t    if (!dest)\r\n\t        dest = {};\r\n\t    return exports.extend(dest, src);\r\n\t}\r\n\t/** Naive forEach implementation works with Objects or Arrays */\r\n\tfunction _forEach(obj, cb, _this) {\r\n\t    if (predicates_1.isArray(obj))\r\n\t        return obj.forEach(cb, _this);\r\n\t    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\r\n\t}\r\n\tfunction _copyProps(to, from) {\r\n\t    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });\r\n\t    return to;\r\n\t}\r\n\tfunction _extend(toObj) {\r\n\t    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\r\n\t}\r\n\tfunction _equals(o1, o2) {\r\n\t    if (o1 === o2)\r\n\t        return true;\r\n\t    if (o1 === null || o2 === null)\r\n\t        return false;\r\n\t    if (o1 !== o1 && o2 !== o2)\r\n\t        return true; // NaN === NaN\r\n\t    var t1 = typeof o1, t2 = typeof o2;\r\n\t    if (t1 !== t2 || t1 !== 'object')\r\n\t        return false;\r\n\t    var tup = [o1, o2];\r\n\t    if (hof_1.all(predicates_1.isArray)(tup))\r\n\t        return _arraysEq(o1, o2);\r\n\t    if (hof_1.all(predicates_1.isDate)(tup))\r\n\t        return o1.getTime() === o2.getTime();\r\n\t    if (hof_1.all(predicates_1.isRegExp)(tup))\r\n\t        return o1.toString() === o2.toString();\r\n\t    if (hof_1.all(predicates_1.isFunction)(tup))\r\n\t        return true; // meh\r\n\t    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\r\n\t    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\r\n\t        return false;\r\n\t    var key, keys = {};\r\n\t    for (key in o1) {\r\n\t        if (!_equals(o1[key], o2[key]))\r\n\t            return false;\r\n\t        keys[key] = true;\r\n\t    }\r\n\t    for (key in o2) {\r\n\t        if (!keys[key])\r\n\t            return false;\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\tfunction _arraysEq(a1, a2) {\r\n\t    if (a1.length !== a2.length)\r\n\t        return false;\r\n\t    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\r\n\t}\r\n\t// issue #2676\r\n\texports.silenceUncaughtInPromise = function (promise) {\r\n\t    return promise.catch(function (e) { return 0; }) && promise;\r\n\t};\r\n\texports.silentRejection = function (error) {\r\n\t    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\r\n\t};\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** Predicates @module common_predicates */ /** */\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar toStr = Object.prototype.toString;\r\n\tvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\r\n\texports.isUndefined = tis('undefined');\r\n\texports.isDefined = hof_1.not(exports.isUndefined);\r\n\texports.isNull = function (o) { return o === null; };\r\n\texports.isFunction = tis('function');\r\n\texports.isNumber = tis('number');\r\n\texports.isString = tis('string');\r\n\texports.isObject = function (x) { return x !== null && typeof x === 'object'; };\r\n\texports.isArray = Array.isArray;\r\n\texports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\r\n\texports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\r\n\t/**\r\n\t * Predicate which checks if a value is injectable\r\n\t *\r\n\t * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\r\n\t * where all the elements in the array are Strings, except the last one, which is a Function\r\n\t */\r\n\tfunction isInjectable(val) {\r\n\t    if (exports.isArray(val) && val.length) {\r\n\t        var head = val.slice(0, -1), tail = val.slice(-1);\r\n\t        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\r\n\t    }\r\n\t    return exports.isFunction(val);\r\n\t}\r\n\texports.isInjectable = isInjectable;\r\n\t/**\r\n\t * Predicate which checks if a value looks like a Promise\r\n\t *\r\n\t * It is probably a Promise if it's an object, and it has a `then` property which is a Function\r\n\t */\r\n\texports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t * Higher order functions\r\n\t *\r\n\t * @module common_hof\r\n\t */ /** */\r\n\t\"use strict\";\r\n\t/**\r\n\t * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\r\n\t *\r\n\t * Given a function with N parameters, returns a new function that supports partial application.\r\n\t * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\r\n\t * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\r\n\t * accept more parameters until all N parameters have been supplied.\r\n\t *\r\n\t *\r\n\t * This contrived example uses a partially applied function as an predicate, which returns true\r\n\t * if an object is found in both arrays.\r\n\t * @example\r\n\t * ```\r\n\t * // returns true if an object is in both of the two arrays\r\n\t * function inBoth(array1, array2, object) {\r\n\t *   return array1.indexOf(object) !== -1 &&\r\n\t *          array2.indexOf(object) !== 1;\r\n\t * }\r\n\t * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\r\n\t * let foos = [obj1, obj3]\r\n\t * let bars = [obj3, obj4, obj5]\r\n\t *\r\n\t * // A curried \"copy\" of inBoth\r\n\t * let curriedInBoth = curry(inBoth);\r\n\t * // Partially apply both the array1 and array2\r\n\t * let inFoosAndBars = curriedInBoth(foos, bars);\r\n\t *\r\n\t * // Supply the final argument; since all arguments are\r\n\t * // supplied, the original inBoth function is then called.\r\n\t * let obj1InBoth = inFoosAndBars(obj1); // false\r\n\t *\r\n\t * // Use the inFoosAndBars as a predicate.\r\n\t * // Filter, on each iteration, supplies the final argument\r\n\t * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\r\n\t * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\r\n\t *\r\n\t * ```\r\n\t *\r\n\t * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\r\n\t *\r\n\t * @param fn\r\n\t * @returns {*|function(): (*|any)}\r\n\t */\r\n\tfunction curry(fn) {\r\n\t    var initial_args = [].slice.apply(arguments, [1]);\r\n\t    var func_args_length = fn.length;\r\n\t    function curried(args) {\r\n\t        if (args.length >= func_args_length)\r\n\t            return fn.apply(null, args);\r\n\t        return function () {\r\n\t            return curried(args.concat([].slice.apply(arguments)));\r\n\t        };\r\n\t    }\r\n\t    return curried(initial_args);\r\n\t}\r\n\texports.curry = curry;\r\n\t/**\r\n\t * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\r\n\t * given: f(x), g(x), h(x)\r\n\t * let composed = compose(f,g,h)\r\n\t * then, composed is: f(g(h(x)))\r\n\t */\r\n\tfunction compose() {\r\n\t    var args = arguments;\r\n\t    var start = args.length - 1;\r\n\t    return function () {\r\n\t        var i = start, result = args[start].apply(this, arguments);\r\n\t        while (i--)\r\n\t            result = args[i].call(this, result);\r\n\t        return result;\r\n\t    };\r\n\t}\r\n\texports.compose = compose;\r\n\t/**\r\n\t * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\r\n\t * given: f(x), g(x), h(x)\r\n\t * let piped = pipe(f,g,h);\r\n\t * then, piped is: h(g(f(x)))\r\n\t */\r\n\tfunction pipe() {\r\n\t    var funcs = [];\r\n\t    for (var _i = 0; _i < arguments.length; _i++) {\r\n\t        funcs[_i - 0] = arguments[_i];\r\n\t    }\r\n\t    return compose.apply(null, [].slice.call(arguments).reverse());\r\n\t}\r\n\texports.pipe = pipe;\r\n\t/**\r\n\t * Given a property name, returns a function that returns that property from an object\r\n\t * let obj = { foo: 1, name: \"blarg\" };\r\n\t * let getName = prop(\"name\");\r\n\t * getName(obj) === \"blarg\"\r\n\t */\r\n\texports.prop = function (name) {\r\n\t    return function (obj) { return obj && obj[name]; };\r\n\t};\r\n\t/**\r\n\t * Given a property name and a value, returns a function that returns a boolean based on whether\r\n\t * the passed object has a property that matches the value\r\n\t * let obj = { foo: 1, name: \"blarg\" };\r\n\t * let getName = propEq(\"name\", \"blarg\");\r\n\t * getName(obj) === true\r\n\t */\r\n\texports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\r\n\t/**\r\n\t * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\r\n\t * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\r\n\t * let getName = prop(\"nestedObj.name\");\r\n\t * getName(obj) === \"blarg\"\r\n\t * let propNotFound = prop(\"this.property.doesnt.exist\");\r\n\t * propNotFound(obj) === undefined\r\n\t */\r\n\texports.parse = function (name) {\r\n\t    return pipe.apply(null, name.split(\".\").map(exports.prop));\r\n\t};\r\n\t/**\r\n\t * Given a function that returns a truthy or falsey value, returns a\r\n\t * function that returns the opposite (falsey or truthy) value given the same inputs\r\n\t */\r\n\texports.not = function (fn) {\r\n\t    return function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        return !fn.apply(null, args);\r\n\t    };\r\n\t};\r\n\t/**\r\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\r\n\t * if both functions return truthy for the given arguments\r\n\t */\r\n\tfunction and(fn1, fn2) {\r\n\t    return function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        return fn1.apply(null, args) && fn2.apply(null, args);\r\n\t    };\r\n\t}\r\n\texports.and = and;\r\n\t/**\r\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\r\n\t * if at least one of the functions returns truthy for the given arguments\r\n\t */\r\n\tfunction or(fn1, fn2) {\r\n\t    return function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        return fn1.apply(null, args) || fn2.apply(null, args);\r\n\t    };\r\n\t}\r\n\texports.or = or;\r\n\t/**\r\n\t * Check if all the elements of an array match a predicate function\r\n\t *\r\n\t * @param fn1 a predicate function `fn1`\r\n\t * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\r\n\t */\r\n\texports.all = function (fn1) {\r\n\t    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };\r\n\t};\r\n\texports.any = function (fn1) {\r\n\t    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };\r\n\t};\r\n\t/** Given a class, returns a Predicate function that returns true if the object is of that class */\r\n\texports.is = function (ctor) { return function (obj) {\r\n\t    return (obj != null && obj.constructor === ctor || obj instanceof ctor);\r\n\t}; };\r\n\t/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\r\n\texports.eq = function (val) { return function (other) {\r\n\t    return val === other;\r\n\t}; };\r\n\t/** Given a value, returns a function which returns the value */\r\n\texports.val = function (v) { return function () { return v; }; };\r\n\tfunction invoke(fnName, args) {\r\n\t    return function (obj) {\r\n\t        return obj[fnName].apply(obj, args);\r\n\t    };\r\n\t}\r\n\texports.invoke = invoke;\r\n\t/**\r\n\t * Sorta like Pattern Matching (a functional programming conditional construct)\r\n\t *\r\n\t * See http://c2.com/cgi/wiki?PatternMatching\r\n\t *\r\n\t * This is a conditional construct which allows a series of predicates and output functions\r\n\t * to be checked and then applied.  Each predicate receives the input.  If the predicate\r\n\t * returns truthy, then its matching output function (mapping function) is provided with\r\n\t * the input and, then the result is returned.\r\n\t *\r\n\t * Each combination (2-tuple) of predicate + output function should be placed in an array\r\n\t * of size 2: [ predicate, mapFn ]\r\n\t *\r\n\t * These 2-tuples should be put in an outer array.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * // Here's a 2-tuple where the first element is the isString predicate\r\n\t * // and the second element is a function that returns a description of the input\r\n\t * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\r\n\t *\r\n\t * // Second tuple: predicate \"isNumber\", mapfn returns a description\r\n\t * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\r\n\t *\r\n\t * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\r\n\t *\r\n\t * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\r\n\t *\r\n\t * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\r\n\t *\r\n\t * console.log(descriptionOf(undefined)); // 'notdefined'\r\n\t * console.log(descriptionOf(55)); // '(55) That's a number!'\r\n\t * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\r\n\t * ```\r\n\t *\r\n\t * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\r\n\t * with a Predicate and a mapping/output function\r\n\t * @returns {function(any): *}\r\n\t */\r\n\tfunction pattern(struct) {\r\n\t    return function (x) {\r\n\t        for (var i = 0; i < struct.length; i++) {\r\n\t            if (struct[i][0](x))\r\n\t                return struct[i][1](x);\r\n\t        }\r\n\t    };\r\n\t}\r\n\texports.pattern = pattern;\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar notImplemented = function (fnname) { return function () {\r\n\t    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\r\n\t}; };\r\n\tvar services = {\r\n\t    $q: undefined,\r\n\t    $injector: undefined,\r\n\t    location: {},\r\n\t    locationConfig: {},\r\n\t    template: {}\r\n\t};\r\n\texports.services = services;\r\n\t[\"setUrl\", \"path\", \"search\", \"hash\", \"onChange\"]\r\n\t    .forEach(function (key) { return services.location[key] = notImplemented(key); });\r\n\t[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\r\n\t    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/** @module common */\r\n\t/**\r\n\t * Matches state names using glob-like pattern strings.\r\n\t *\r\n\t * Globs can be used in specific APIs including:\r\n\t *\r\n\t * - [[StateService.is]]\r\n\t * - [[StateService.includes]]\r\n\t * - [[HookMatchCriteria.to]]\r\n\t * - [[HookMatchCriteria.from]]\r\n\t * - [[HookMatchCriteria.exiting]]\r\n\t * - [[HookMatchCriteria.retained]]\r\n\t * - [[HookMatchCriteria.entering]]\r\n\t *\r\n\t * A `Glob` string is a pattern which matches state names.\r\n\t * Nested state names are split into segments (separated by a dot) when processing.\r\n\t * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\r\n\t *\r\n\t * Globs work according to the following rules:\r\n\t *\r\n\t * ### Exact match:\r\n\t *\r\n\t * The glob `'A.B'` matches the state named exactly `'A.B'`.\r\n\t *\r\n\t * | Glob        |Matches states named|Does not match state named|\r\n\t * |:------------|:--------------------|:---------------------|\r\n\t * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\r\n\t * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\r\n\t * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\r\n\t *\r\n\t * ### Single star (`*`)\r\n\t *\r\n\t * A single star (`*`) is a wildcard that matches exactly one segment.\r\n\t *\r\n\t * | Glob        |Matches states named  |Does not match state named |\r\n\t * |:------------|:---------------------|:--------------------------|\r\n\t * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\r\n\t * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\r\n\t * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\r\n\t *\r\n\t * ### Double star (`**`)\r\n\t *\r\n\t * A double star (`'**'`) is a wildcard that matches *zero or more segments*\r\n\t *\r\n\t * | Glob        |Matches states named                           |Does not match state named         |\r\n\t * |:------------|:----------------------------------------------|:----------------------------------|\r\n\t * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\r\n\t * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\r\n\t * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\r\n\t * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\r\n\t *\r\n\t */\r\n\tvar Glob = (function () {\r\n\t    function Glob(text) {\r\n\t        this.text = text;\r\n\t        this.glob = text.split('.');\r\n\t        var regexpString = this.text.split('.')\r\n\t            .map(function (seg) {\r\n\t            if (seg === '**')\r\n\t                return '(?:|(?:\\\\.[^.]*)*)';\r\n\t            if (seg === '*')\r\n\t                return '\\\\.[^.]*';\r\n\t            return '\\\\.' + seg;\r\n\t        }).join('');\r\n\t        this.regexp = new RegExp(\"^\" + regexpString + \"$\");\r\n\t    }\r\n\t    Glob.prototype.matches = function (name) {\r\n\t        return this.regexp.test('.' + name);\r\n\t    };\r\n\t    /** @deprecated whats the point? */\r\n\t    Glob.is = function (text) {\r\n\t        return text.indexOf('*') > -1;\r\n\t    };\r\n\t    /** @deprecated whats the point? */\r\n\t    Glob.fromString = function (text) {\r\n\t        if (!this.is(text))\r\n\t            return null;\r\n\t        return new Glob(text);\r\n\t    };\r\n\t    return Glob;\r\n\t}());\r\n\texports.Glob = Glob;\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/** @module common */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar Queue = (function () {\r\n\t    function Queue(_items, _limit) {\r\n\t        if (_items === void 0) { _items = []; }\r\n\t        if (_limit === void 0) { _limit = null; }\r\n\t        this._items = _items;\r\n\t        this._limit = _limit;\r\n\t    }\r\n\t    Queue.prototype.enqueue = function (item) {\r\n\t        var items = this._items;\r\n\t        items.push(item);\r\n\t        if (this._limit && items.length > this._limit)\r\n\t            items.shift();\r\n\t        return item;\r\n\t    };\r\n\t    Queue.prototype.dequeue = function () {\r\n\t        if (this.size())\r\n\t            return this._items.splice(0, 1)[0];\r\n\t    };\r\n\t    Queue.prototype.clear = function () {\r\n\t        var current = this._items;\r\n\t        this._items = [];\r\n\t        return current;\r\n\t    };\r\n\t    Queue.prototype.size = function () {\r\n\t        return this._items.length;\r\n\t    };\r\n\t    Queue.prototype.remove = function (item) {\r\n\t        var idx = this._items.indexOf(item);\r\n\t        return idx > -1 && this._items.splice(idx, 1)[0];\r\n\t    };\r\n\t    Queue.prototype.peekTail = function () {\r\n\t        return this._items[this._items.length - 1];\r\n\t    };\r\n\t    Queue.prototype.peekHead = function () {\r\n\t        if (this.size())\r\n\t            return this._items[0];\r\n\t    };\r\n\t    return Queue;\r\n\t}());\r\n\texports.Queue = Queue;\r\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common_strings */ /** */\r\n\t\"use strict\";\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar transition_1 = __webpack_require__(11);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\t/**\r\n\t * Returns a string shortened to a maximum length\r\n\t *\r\n\t * If the string is already less than the `max` length, return the string.\r\n\t * Else return the string, shortened to `max - 3` and append three dots (\"...\").\r\n\t *\r\n\t * @param max the maximum length of the string to return\r\n\t * @param str the input string\r\n\t */\r\n\tfunction maxLength(max, str) {\r\n\t    if (str.length <= max)\r\n\t        return str;\r\n\t    return str.substr(0, max - 3) + \"...\";\r\n\t}\r\n\texports.maxLength = maxLength;\r\n\t/**\r\n\t * Returns a string, with spaces added to the end, up to a desired str length\r\n\t *\r\n\t * If the string is already longer than the desired length, return the string.\r\n\t * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\r\n\t *\r\n\t * @param length the desired length of the string to return\r\n\t * @param str the input string\r\n\t */\r\n\tfunction padString(length, str) {\r\n\t    while (str.length < length)\r\n\t        str += \" \";\r\n\t    return str;\r\n\t}\r\n\texports.padString = padString;\r\n\tfunction kebobString(camelCase) {\r\n\t    return camelCase\r\n\t        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\r\n\t        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\r\n\t}\r\n\texports.kebobString = kebobString;\r\n\tfunction _toJson(obj) {\r\n\t    return JSON.stringify(obj);\r\n\t}\r\n\tfunction _fromJson(json) {\r\n\t    return predicates_1.isString(json) ? JSON.parse(json) : json;\r\n\t}\r\n\tfunction promiseToString(p) {\r\n\t    return \"Promise(\" + JSON.stringify(p) + \")\";\r\n\t}\r\n\tfunction functionToString(fn) {\r\n\t    var fnStr = fnToString(fn);\r\n\t    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\r\n\t    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\r\n\t    var fnName = fn['name'] || \"\";\r\n\t    if (fnName && toStr.match(/function \\(/)) {\r\n\t        return 'function ' + fnName + toStr.substr(9);\r\n\t    }\r\n\t    return toStr;\r\n\t}\r\n\texports.functionToString = functionToString;\r\n\tfunction fnToString(fn) {\r\n\t    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\r\n\t    return _fn && _fn.toString() || \"undefined\";\r\n\t}\r\n\texports.fnToString = fnToString;\r\n\tvar stringifyPatternFn = null;\r\n\tvar stringifyPattern = function (value) {\r\n\t    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;\r\n\t    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\r\n\t        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\r\n\t        [predicates_1.isNull, hof_1.val(\"null\")],\r\n\t        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\r\n\t        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],\r\n\t        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\r\n\t        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\r\n\t        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\r\n\t        [predicates_1.isInjectable, functionToString],\r\n\t        [hof_1.val(true), common_1.identity]\r\n\t    ]);\r\n\t    return stringifyPatternFn(value);\r\n\t};\r\n\tfunction stringify(o) {\r\n\t    var seen = [];\r\n\t    function format(val) {\r\n\t        if (predicates_1.isObject(val)) {\r\n\t            if (seen.indexOf(val) !== -1)\r\n\t                return '[circular ref]';\r\n\t            seen.push(val);\r\n\t        }\r\n\t        return stringifyPattern(val);\r\n\t    }\r\n\t    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\r\n\t}\r\n\texports.stringify = stringify;\r\n\t/** Returns a function that splits a string on a character or substring */\r\n\texports.beforeAfterSubstr = function (char) { return function (str) {\r\n\t    if (!str)\r\n\t        return [\"\", \"\"];\r\n\t    var idx = str.indexOf(char);\r\n\t    if (idx === -1)\r\n\t        return [str, \"\"];\r\n\t    return [str.substr(0, idx), str.substr(idx + 1)];\r\n\t}; };\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\t(function (RejectType) {\r\n\t    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\r\n\t    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\r\n\t    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\r\n\t    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\r\n\t    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\r\n\t})(exports.RejectType || (exports.RejectType = {}));\r\n\tvar RejectType = exports.RejectType;\r\n\tvar Rejection = (function () {\r\n\t    function Rejection(type, message, detail) {\r\n\t        this.type = type;\r\n\t        this.message = message;\r\n\t        this.detail = detail;\r\n\t    }\r\n\t    Rejection.prototype.toString = function () {\r\n\t        var detailString = function (d) {\r\n\t            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);\r\n\t        };\r\n\t        var type = this.type, message = this.message, detail = detailString(this.detail);\r\n\t        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\r\n\t    };\r\n\t    Rejection.prototype.toPromise = function () {\r\n\t        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\r\n\t    };\r\n\t    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\r\n\t    Rejection.isTransitionRejectionPromise = function (obj) {\r\n\t        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to transition superseded */\r\n\t    Rejection.superseded = function (detail, options) {\r\n\t        var message = \"The transition has been superseded by a different transition\";\r\n\t        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\r\n\t        if (options && options.redirected) {\r\n\t            rejection.redirected = true;\r\n\t        }\r\n\t        return rejection;\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to redirected transition */\r\n\t    Rejection.redirected = function (detail) {\r\n\t        return Rejection.superseded(detail, { redirected: true });\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to invalid transition */\r\n\t    Rejection.invalid = function (detail) {\r\n\t        var message = \"This transition is invalid\";\r\n\t        return new Rejection(RejectType.INVALID, message, detail);\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to ignored transition */\r\n\t    Rejection.ignored = function (detail) {\r\n\t        var message = \"The transition was ignored\";\r\n\t        return new Rejection(RejectType.IGNORED, message, detail);\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to aborted transition */\r\n\t    Rejection.aborted = function (detail) {\r\n\t        // TODO think about how to encapsulate an Error() object\r\n\t        var message = \"The transition has been aborted\";\r\n\t        return new Rejection(RejectType.ABORTED, message, detail);\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to aborted transition */\r\n\t    Rejection.errored = function (detail) {\r\n\t        // TODO think about how to encapsulate an Error() object\r\n\t        var message = \"The transition errored\";\r\n\t        return new Rejection(RejectType.ERROR, message, detail);\r\n\t    };\r\n\t    return Rejection;\r\n\t}());\r\n\texports.Rejection = Rejection;\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module transition */ /** for typedoc */\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar transitionHook_1 = __webpack_require__(13);\r\n\tvar hookRegistry_1 = __webpack_require__(15);\r\n\tvar hookBuilder_1 = __webpack_require__(16);\r\n\tvar node_1 = __webpack_require__(21);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar transitionCount = 0;\r\n\tvar stateSelf = hof_1.prop(\"self\");\r\n\t/**\r\n\t * Represents a transition between two states.\r\n\t *\r\n\t * When navigating to a state, we are transitioning **from** the current state **to** the new state.\r\n\t *\r\n\t * This object contains all contextual information about the to/from states, parameters, resolves.\r\n\t * It has information about all states being entered and exited as a result of the transition.\r\n\t */\r\n\tvar Transition = (function () {\r\n\t    /**\r\n\t     * Creates a new Transition object.\r\n\t     *\r\n\t     * If the target state is not valid, an error is thrown.\r\n\t     *\r\n\t     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\r\n\t     *        encapsulates the \"from state\".\r\n\t     * @param targetState The target state and parameters being transitioned to (also, the transition options)\r\n\t     * @param router The [[UIRouter]] instance\r\n\t     */\r\n\t    function Transition(fromPath, targetState, router) {\r\n\t        var _this = this;\r\n\t        /** @hidden */\r\n\t        this._deferred = coreservices_1.services.$q.defer();\r\n\t        /**\r\n\t         * This promise is resolved or rejected based on the outcome of the Transition.\r\n\t         *\r\n\t         * When the transition is successful, the promise is resolved\r\n\t         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\r\n\t         */\r\n\t        this.promise = this._deferred.promise;\r\n\t        this.treeChanges = function () { return _this._treeChanges; };\r\n\t        this.isActive = function () { return _this === _this._options.current(); };\r\n\t        this.router = router;\r\n\t        this._targetState = targetState;\r\n\t        if (!targetState.valid()) {\r\n\t            throw new Error(targetState.error());\r\n\t        }\r\n\t        // Makes the Transition instance a hook registry (onStart, etc)\r\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\r\n\t        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\r\n\t        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\r\n\t        this.$id = transitionCount++;\r\n\t        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\r\n\t        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\r\n\t        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\r\n\t        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\r\n\t        var rootResolvables = [\r\n\t            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),\r\n\t            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),\r\n\t            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),\r\n\t            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())\r\n\t        ];\r\n\t        var rootNode = this._treeChanges.to[0];\r\n\t        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);\r\n\t        context.addResolvables(rootResolvables, rootNode.state);\r\n\t    }\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    Transition.prototype.$from = function () {\r\n\t        return common_1.tail(this._treeChanges.from).state;\r\n\t    };\r\n\t    Transition.prototype.$to = function () {\r\n\t        return common_1.tail(this._treeChanges.to).state;\r\n\t    };\r\n\t    /**\r\n\t     * Returns the \"from state\"\r\n\t     *\r\n\t     * @returns The state object for the Transition's \"from state\".\r\n\t     */\r\n\t    Transition.prototype.from = function () {\r\n\t        return this.$from().self;\r\n\t    };\r\n\t    /**\r\n\t     * Returns the \"to state\"\r\n\t     *\r\n\t     * @returns The state object for the Transition's target state (\"to state\").\r\n\t     */\r\n\t    Transition.prototype.to = function () {\r\n\t        return this.$to().self;\r\n\t    };\r\n\t    /**\r\n\t     * Gets the Target State\r\n\t     *\r\n\t     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].\r\n\t     *\r\n\t     * @returns the [[TargetState]] of this Transition\r\n\t     */\r\n\t    Transition.prototype.targetState = function () {\r\n\t        return this._targetState;\r\n\t    };\r\n\t    /**\r\n\t     * Determines whether two transitions are equivalent.\r\n\t     */\r\n\t    Transition.prototype.is = function (compare) {\r\n\t        if (compare instanceof Transition) {\r\n\t            // TODO: Also compare parameters\r\n\t            return this.is({ to: compare.$to().name, from: compare.$from().name });\r\n\t        }\r\n\t        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\r\n\t            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\r\n\t    };\r\n\t    /**\r\n\t     * Gets transition parameter values\r\n\t     *\r\n\t     * @param pathname Pick which treeChanges path to get parameters for:\r\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\r\n\t     * @returns transition parameter values for the desired path.\r\n\t     */\r\n\t    Transition.prototype.params = function (pathname) {\r\n\t        if (pathname === void 0) { pathname = \"to\"; }\r\n\t        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\r\n\t    };\r\n\t    /**\r\n\t     * Creates a [[UIInjector]] Dependency Injector\r\n\t     *\r\n\t     * Returns a Dependency Injector for the Transition's target state (to state).\r\n\t     * The injector provides resolve values which the target state has access to.\r\n\t     *\r\n\t     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\r\n\t     *\r\n\t     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\r\n\t     *\r\n\t     * @param state Limits the resolves provided to only the resolves the provided state has access to.\r\n\t     * @returns a [[UIInjector]]\r\n\t     */\r\n\t    Transition.prototype.injector = function (state) {\r\n\t        var path = this.treeChanges().to;\r\n\t        if (state)\r\n\t            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });\r\n\t        return new resolveContext_1.ResolveContext(path).injector();\r\n\t    };\r\n\t    /**\r\n\t     * Gets all available resolve tokens (keys)\r\n\t     *\r\n\t     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\r\n\t     * available to the Transition.\r\n\t     *\r\n\t     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\r\n\t     * in the Transition's [[TreeChanges.to]] path.\r\n\t     *\r\n\t     * @returns an array of resolve tokens (keys)\r\n\t     */\r\n\t    Transition.prototype.getResolveTokens = function () {\r\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();\r\n\t    };\r\n\t    /**\r\n\t     * Gets resolved values\r\n\t     *\r\n\t     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\r\n\t     * are available to the Transition.\r\n\t     *\r\n\t     * Given a token, returns the resolved data for that token.\r\n\t     * Given an array of tokens, returns an array of resolved data for those tokens.\r\n\t     *\r\n\t     * If a resolvable hasn't yet been fetched, returns `undefined` for that token\r\n\t     * If a resolvable doesn't exist for the token, throws an error.\r\n\t     *\r\n\t     * @param token the token (or array of tokens)\r\n\t     *\r\n\t     * @returns an array of resolve tokens (keys)\r\n\t     */\r\n\t    Transition.prototype.getResolveValue = function (token) {\r\n\t        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);\r\n\t        var getData = function (token) {\r\n\t            var resolvable = resolveContext.getResolvable(token);\r\n\t            if (resolvable === undefined) {\r\n\t                throw new Error(\"Dependency Injection token not found: \" + strings_1.stringify(token));\r\n\t            }\r\n\t            return resolvable.data;\r\n\t        };\r\n\t        if (predicates_1.isArray(token)) {\r\n\t            return token.map(getData);\r\n\t        }\r\n\t        return getData(token);\r\n\t    };\r\n\t    /**\r\n\t     * Gets a [[Resolvable]] primitive\r\n\t     *\r\n\t     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.\r\n\t     *\r\n\t     * @param token the DI token\r\n\t     *\r\n\t     * @returns the [[Resolvable]] in the transition's to path, or undefined\r\n\t     */\r\n\t    Transition.prototype.getResolvable = function (token) {\r\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);\r\n\t    };\r\n\t    /**\r\n\t     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\r\n\t     *\r\n\t     * @param resolvable an [[Resolvable]] object\r\n\t     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\r\n\t     */\r\n\t    Transition.prototype.addResolvable = function (resolvable, state) {\r\n\t        if (state === void 0) { state = \"\"; }\r\n\t        var stateName = (typeof state === \"string\") ? state : state.name;\r\n\t        var topath = this._treeChanges.to;\r\n\t        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\r\n\t        var resolveContext = new resolveContext_1.ResolveContext(topath);\r\n\t        resolveContext.addResolvables([resolvable], targetNode.state);\r\n\t    };\r\n\t    /**\r\n\t     * If the current transition is a redirect, returns the transition that was redirected.\r\n\t     *\r\n\t     * Gets the transition from which this transition was redirected.\r\n\t     *\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * let transitionA = $state.go('A').transitionA\r\n\t     * transitionA.onStart({}, () => $state.target('B'));\r\n\t     * $transitions.onSuccess({ to: 'B' }, (trans) => {\r\n\t     *   trans.to().name === 'B'; // true\r\n\t     *   trans.redirectedFrom() === transitionA; // true\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns The previous Transition, or null if this Transition is not the result of a redirection\r\n\t     */\r\n\t    Transition.prototype.redirectedFrom = function () {\r\n\t        return this._options.redirectedFrom || null;\r\n\t    };\r\n\t    /**\r\n\t     * Get the transition options\r\n\t     *\r\n\t     * @returns the options for this Transition.\r\n\t     */\r\n\t    Transition.prototype.options = function () {\r\n\t        return this._options;\r\n\t    };\r\n\t    /**\r\n\t     * Gets the states being entered.\r\n\t     *\r\n\t     * @returns an array of states that will be entered during this transition.\r\n\t     */\r\n\t    Transition.prototype.entering = function () {\r\n\t        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the states being exited.\r\n\t     *\r\n\t     * @returns an array of states that will be exited during this transition.\r\n\t     */\r\n\t    Transition.prototype.exiting = function () {\r\n\t        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\r\n\t    };\r\n\t    /**\r\n\t     * Gets the states being retained.\r\n\t     *\r\n\t     * @returns an array of states that are already entered from a previous Transition, that will not be\r\n\t     *    exited during this Transition\r\n\t     */\r\n\t    Transition.prototype.retained = function () {\r\n\t        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\r\n\t    };\r\n\t    /**\r\n\t     * Get the [[ViewConfig]]s associated with this Transition\r\n\t     *\r\n\t     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\r\n\t     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\r\n\t     *\r\n\t     * @param pathname the name of the path to fetch views for:\r\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\r\n\t     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\r\n\t     *\r\n\t     * @returns a list of ViewConfig objects for the given path.\r\n\t     */\r\n\t    Transition.prototype.views = function (pathname, state) {\r\n\t        if (pathname === void 0) { pathname = \"entering\"; }\r\n\t        var path = this._treeChanges[pathname];\r\n\t        path = !state ? path : path.filter(hof_1.propEq('state', state));\r\n\t        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\r\n\t    };\r\n\t    /**\r\n\t     * Creates a new transition that is a redirection of the current one.\r\n\t     *\r\n\t     * This transition can be returned from a [[TransitionService]] hook to\r\n\t     * redirect a transition to a new state and/or set of parameters.\r\n\t     *\r\n\t     * @returns Returns a new [[Transition]] instance.\r\n\t     */\r\n\t    Transition.prototype.redirect = function (targetState) {\r\n\t        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: \"redirect\" });\r\n\t        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\r\n\t        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\r\n\t        var originalEnteringNodes = this.treeChanges().entering;\r\n\t        var redirectEnteringNodes = newTransition.treeChanges().entering;\r\n\t        // --- Re-use resolve data from original transition ---\r\n\t        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\r\n\t        // (because of the redirect), the resolves fetched by the original transition are still valid in the\r\n\t        // redirected transition.\r\n\t        //\r\n\t        // This allows you to define a redirect on a parent state which depends on an async resolve value.\r\n\t        // You can wait for the resolve, then redirect to a child state based on the result.\r\n\t        // The redirected transition does not have to re-fetch the resolve.\r\n\t        // ---------------------------------------------------------\r\n\t        var nodeIsReloading = function (reloadState) { return function (node) {\r\n\t            return reloadState && node.state.includes[reloadState.name];\r\n\t        }; };\r\n\t        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\r\n\t        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\r\n\t            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\r\n\t        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\r\n\t        matchingEnteringNodes.forEach(function (node, idx) {\r\n\t            node.resolvables = originalEnteringNodes[idx].resolvables;\r\n\t        });\r\n\t        return newTransition;\r\n\t    };\r\n\t    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\r\n\t    Transition.prototype._changedParams = function () {\r\n\t        var _a = this._treeChanges, to = _a.to, from = _a.from;\r\n\t        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\r\n\t            return undefined;\r\n\t        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\r\n\t        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\r\n\t        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\r\n\t        return tuples.map(function (_a) {\r\n\t            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\r\n\t            return param_1.Param.changed(schema, toVals, fromVals);\r\n\t        }).reduce(common_1.unnestR, []);\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the transition is dynamic.\r\n\t     *\r\n\t     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\r\n\t     *\r\n\t     * @returns true if the Transition is dynamic\r\n\t     */\r\n\t    Transition.prototype.dynamic = function () {\r\n\t        var changes = this._changedParams();\r\n\t        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the transition is ignored.\r\n\t     *\r\n\t     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\r\n\t     *\r\n\t     * @returns true if the Transition is ignored.\r\n\t     */\r\n\t    Transition.prototype.ignored = function () {\r\n\t        var changes = this._changedParams();\r\n\t        return !changes ? false : changes.length === 0;\r\n\t    };\r\n\t    /**\r\n\t     * @hidden\r\n\t     */\r\n\t    Transition.prototype.hookBuilder = function () {\r\n\t        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {\r\n\t            transition: this,\r\n\t            current: this._options.current\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Runs the transition\r\n\t     *\r\n\t     * This method is generally called from the [[StateService.transitionTo]]\r\n\t     *\r\n\t     * @returns a promise for a successful transition.\r\n\t     */\r\n\t    Transition.prototype.run = function () {\r\n\t        var _this = this;\r\n\t        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;\r\n\t        var hookBuilder = this.hookBuilder();\r\n\t        var globals = this.router.globals;\r\n\t        globals.transitionHistory.enqueue(this);\r\n\t        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\r\n\t        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {\r\n\t            syncResult.catch(function () { return 0; }); // issue #2676\r\n\t            var rejectReason = syncResult._transitionRejection;\r\n\t            this._deferred.reject(rejectReason);\r\n\t            return this.promise;\r\n\t        }\r\n\t        if (!this.valid()) {\r\n\t            var error = new Error(this.error());\r\n\t            this._deferred.reject(error);\r\n\t            return this.promise;\r\n\t        }\r\n\t        if (this.ignored()) {\r\n\t            trace_1.trace.traceTransitionIgnored(this);\r\n\t            this._deferred.reject(rejectFactory_1.Rejection.ignored());\r\n\t            return this.promise;\r\n\t        }\r\n\t        // When the chain is complete, then resolve or reject the deferred\r\n\t        var transitionSuccess = function () {\r\n\t            trace_1.trace.traceSuccess(_this.$to(), _this);\r\n\t            _this.success = true;\r\n\t            _this._deferred.resolve(_this.to());\r\n\t            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\r\n\t        };\r\n\t        var transitionError = function (reason) {\r\n\t            trace_1.trace.traceError(reason, _this);\r\n\t            _this.success = false;\r\n\t            _this._deferred.reject(reason);\r\n\t            _this._error = reason;\r\n\t            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\r\n\t        };\r\n\t        trace_1.trace.traceTransitionStart(this);\r\n\t        // Chain the next hook off the previous\r\n\t        var appendHookToChain = function (prev, nextHook) {\r\n\t            return prev.then(function () { return nextHook.invokeHook(); });\r\n\t        };\r\n\t        // Run the hooks, then resolve or reject the overall deferred in the .then() handler\r\n\t        hookBuilder.asyncHooks()\r\n\t            .reduce(appendHookToChain, syncResult)\r\n\t            .then(transitionSuccess, transitionError);\r\n\t        return this.promise;\r\n\t    };\r\n\t    /**\r\n\t     * Checks if the Transition is valid\r\n\t     *\r\n\t     * @returns true if the Transition is valid\r\n\t     */\r\n\t    Transition.prototype.valid = function () {\r\n\t        return !this.error() || this.success !== undefined;\r\n\t    };\r\n\t    /**\r\n\t     * The Transition error reason.\r\n\t     *\r\n\t     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\r\n\t     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\r\n\t     *\r\n\t     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\r\n\t     */\r\n\t    Transition.prototype.error = function () {\r\n\t        var state = this.$to();\r\n\t        var redirects = 0, trans = this;\r\n\t        while ((trans = trans.redirectedFrom()) != null) {\r\n\t            if (++redirects > 20)\r\n\t                return \"Too many Transition redirects (20+)\";\r\n\t        }\r\n\t        if (state.self.abstract)\r\n\t            return \"Cannot transition to abstract state '\" + state.name + \"'\";\r\n\t        if (!param_1.Param.validates(state.parameters(), this.params()))\r\n\t            return \"Param values not valid for state '\" + state.name + \"'\";\r\n\t        if (this.success === false)\r\n\t            return this._error;\r\n\t    };\r\n\t    /**\r\n\t     * A string representation of the Transition\r\n\t     *\r\n\t     * @returns A string representation of the Transition\r\n\t     */\r\n\t    Transition.prototype.toString = function () {\r\n\t        var fromStateOrName = this.from();\r\n\t        var toStateOrName = this.to();\r\n\t        var avoidEmptyHash = function (params) {\r\n\t            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\r\n\t        };\r\n\t        // (X) means the to state is invalid.\r\n\t        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\r\n\t        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\r\n\t    };\r\n\t    Transition.diToken = Transition;\r\n\t    return Transition;\r\n\t}());\r\n\texports.Transition = Transition;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * UI-Router Transition Tracing\r\n\t *\r\n\t * Enable transition tracing to print transition information to the console, in order to help debug your application.\r\n\t * Tracing logs detailed information about each Transition to your console.\r\n\t *\r\n\t * To enable tracing, import the [[trace]] singleton and enable one or more categories.\r\n\t *\r\n\t * ES6\r\n\t * ```\r\n\t *\r\n\t * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\r\n\t * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\r\n\t * ```\r\n\t *\r\n\t * CJS\r\n\t * ```\r\n\t *\r\n\t * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\r\n\t * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\r\n\t * ```\r\n\t *\r\n\t * Globals\r\n\t * ```\r\n\t *\r\n\t * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\r\n\t * trace.enable(); // Trace everything (very verbose)\r\n\t * ```\r\n\t *\r\n\t * @module trace\r\n\t */ /** for typedoc */\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\t/** @hidden */\r\n\tfunction uiViewString(viewData) {\r\n\t    if (!viewData)\r\n\t        return 'ui-view (defunct)';\r\n\t    return (\"[ui-view#\" + viewData.id + \" tag \") +\r\n\t        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\r\n\t        (\"fqn: '\" + viewData.fqn + \"', \") +\r\n\t        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\r\n\t}\r\n\t/** @hidden */\r\n\tvar viewConfigString = function (viewConfig) {\r\n\t    return (\"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\");\r\n\t};\r\n\t/** @hidden */\r\n\tfunction normalizedCat(input) {\r\n\t    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\r\n\t}\r\n\t/**\r\n\t * Trace categories\r\n\t *\r\n\t * [[Trace.enable]] or [[Trace.disable]] a category\r\n\t *\r\n\t * `trace.enable(Category.TRANSITION)`\r\n\t *\r\n\t * These can also be provided using a matching string, or position ordinal\r\n\t *\r\n\t * `trace.enable(\"TRANSITION\")`\r\n\t *\r\n\t * `trace.enable(1)`\r\n\t */\r\n\t(function (Category) {\r\n\t    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\r\n\t    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\r\n\t    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\r\n\t    Category[Category[\"UIVIEW\"] = 3] = \"UIVIEW\";\r\n\t    Category[Category[\"VIEWCONFIG\"] = 4] = \"VIEWCONFIG\";\r\n\t})(exports.Category || (exports.Category = {}));\r\n\tvar Category = exports.Category;\r\n\t/**\r\n\t * Prints UI-Router Transition trace information to the console.\r\n\t */\r\n\tvar Trace = (function () {\r\n\t    function Trace() {\r\n\t        /** @hidden */\r\n\t        this._enabled = {};\r\n\t        this.approximateDigests = 0;\r\n\t    }\r\n\t    /** @hidden */\r\n\t    Trace.prototype._set = function (enabled, categories) {\r\n\t        var _this = this;\r\n\t        if (!categories.length) {\r\n\t            categories = Object.keys(Category)\r\n\t                .map(function (k) { return parseInt(k, 10); })\r\n\t                .filter(function (k) { return !isNaN(k); })\r\n\t                .map(function (key) { return Category[key]; });\r\n\t        }\r\n\t        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\r\n\t    };\r\n\t    /**\r\n\t     * Enables a trace [[Category]]\r\n\t     *\r\n\t     * ```\r\n\t     * trace.enable(\"TRANSITION\");\r\n\t     * ```\r\n\t     *\r\n\t     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\r\n\t     *        Also takes strings (category name) or ordinal (category position)\r\n\t     */\r\n\t    Trace.prototype.enable = function () {\r\n\t        var categories = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            categories[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        this._set(true, categories);\r\n\t    };\r\n\t    /**\r\n\t     * Disables a trace [[Category]]\r\n\t     *\r\n\t     * ```\r\n\t     * trace.disable(\"VIEWCONFIG\");\r\n\t     * ```\r\n\t     *\r\n\t     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\r\n\t     *        Also takes strings (category name) or ordinal (category position)\r\n\t     */\r\n\t    Trace.prototype.disable = function () {\r\n\t        var categories = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            categories[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        this._set(false, categories);\r\n\t    };\r\n\t    /**\r\n\t     * Retrieves the enabled stateus of a [[Category]]\r\n\t     *\r\n\t     * ```\r\n\t     * trace.enabled(\"VIEWCONFIG\"); // true or false\r\n\t     * ```\r\n\t     *\r\n\t     * @returns boolean true if the category is enabled\r\n\t     */\r\n\t    Trace.prototype.enabled = function (category) {\r\n\t        return !!this._enabled[normalizedCat(category)];\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceTransitionStart = function (transition) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceTransitionIgnored = function (trans) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceHookInvocation = function (step, options) {\r\n\t        if (!this.enabled(Category.HOOK))\r\n\t            return;\r\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.eventHook.callback);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceHookResult = function (hookResult, transitionOptions) {\r\n\t        if (!this.enabled(Category.HOOK))\r\n\t            return;\r\n\t        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceResolvePath = function (path, when, trans) {\r\n\t        if (!this.enabled(Category.RESOLVE))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + when + \")\");\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\r\n\t        if (!this.enabled(Category.RESOLVE))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceError = function (reason, trans) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + reason);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceSuccess = function (finalState, trans) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\r\n\t        if (extra === void 0) { extra = \"\"; }\r\n\t        if (!this.enabled(Category.UIVIEW))\r\n\t            return;\r\n\t        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\r\n\t        if (!this.enabled(Category.UIVIEW))\r\n\t            return;\r\n\t        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceUIViewFill = function (viewData, html) {\r\n\t        if (!this.enabled(Category.UIVIEW))\r\n\t            return;\r\n\t        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\r\n\t        if (!this.enabled(Category.VIEWCONFIG))\r\n\t            return;\r\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\r\n\t        if (!this.enabled(Category.VIEWCONFIG))\r\n\t            return;\r\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\r\n\t    };\r\n\t    return Trace;\r\n\t}());\r\n\texports.Trace = Trace;\r\n\t/**\r\n\t * The [[Trace]] singleton\r\n\t *\r\n\t * @example\r\n\t * ```js\r\n\t *\r\n\t * import {trace} from \"angular-ui-router\";\r\n\t * trace.enable(1, 5);\r\n\t * ```\r\n\t */\r\n\tvar trace = new Trace();\r\n\texports.trace = trace;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar defaultOptions = {\r\n\t    async: true,\r\n\t    rejectIfSuperseded: true,\r\n\t    current: common_1.noop,\r\n\t    transition: null,\r\n\t    traceData: {},\r\n\t    bind: null\r\n\t};\r\n\t/** @hidden */\r\n\tvar TransitionHook = (function () {\r\n\t    function TransitionHook(transition, stateContext, eventHook, options) {\r\n\t        var _this = this;\r\n\t        this.transition = transition;\r\n\t        this.stateContext = stateContext;\r\n\t        this.eventHook = eventHook;\r\n\t        this.options = options;\r\n\t        this.isSuperseded = function () {\r\n\t            return _this.options.current() !== _this.options.transition;\r\n\t        };\r\n\t        this.options = common_1.defaults(options, defaultOptions);\r\n\t    }\r\n\t    TransitionHook.prototype.invokeHook = function () {\r\n\t        var _a = this, options = _a.options, eventHook = _a.eventHook;\r\n\t        trace_1.trace.traceHookInvocation(this, options);\r\n\t        if (options.rejectIfSuperseded && this.isSuperseded()) {\r\n\t            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();\r\n\t        }\r\n\t        var synchronousHookResult = !eventHook._deregistered\r\n\t            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)\r\n\t            : undefined;\r\n\t        return this.handleHookResult(synchronousHookResult);\r\n\t    };\r\n\t    /**\r\n\t     * This method handles the return value of a Transition Hook.\r\n\t     *\r\n\t     * A hook can return false (cancel), a TargetState (redirect),\r\n\t     * or a promise (which may later resolve to false or a redirect)\r\n\t     *\r\n\t     * This also handles \"transition superseded\" -- when a new transition\r\n\t     * was started while the hook was still running\r\n\t     */\r\n\t    TransitionHook.prototype.handleHookResult = function (result) {\r\n\t        // This transition is no longer current.\r\n\t        // Another transition started while this hook was still running.\r\n\t        if (this.isSuperseded()) {\r\n\t            // Abort this transition\r\n\t            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();\r\n\t        }\r\n\t        // Hook returned a promise\r\n\t        if (predicates_1.isPromise(result)) {\r\n\t            // Wait for the promise, then reprocess the resolved value\r\n\t            return result.then(this.handleHookResult.bind(this));\r\n\t        }\r\n\t        trace_1.trace.traceHookResult(result, this.options);\r\n\t        // Hook returned false\r\n\t        if (result === false) {\r\n\t            // Abort this Transition\r\n\t            return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise();\r\n\t        }\r\n\t        var isTargetState = hof_1.is(targetState_1.TargetState);\r\n\t        // hook returned a TargetState\r\n\t        if (isTargetState(result)) {\r\n\t            // Halt the current Transition and start a redirected Transition (to the TargetState).\r\n\t            return rejectFactory_1.Rejection.redirected(result).toPromise();\r\n\t        }\r\n\t    };\r\n\t    TransitionHook.prototype.toString = function () {\r\n\t        var _a = this, options = _a.options, eventHook = _a.eventHook;\r\n\t        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(eventHook.callback);\r\n\t        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\r\n\t    };\r\n\t    /**\r\n\t     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\r\n\t     *\r\n\t     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\r\n\t     */\r\n\t    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {\r\n\t        if (swallowExceptions === void 0) { swallowExceptions = false; }\r\n\t        var results = [];\r\n\t        for (var i = 0; i < hooks.length; i++) {\r\n\t            var hook = hooks[i];\r\n\t            try {\r\n\t                results.push(hook.invokeHook());\r\n\t            }\r\n\t            catch (exception) {\r\n\t                if (!swallowExceptions) {\r\n\t                    return rejectFactory_1.Rejection.errored(exception).toPromise();\r\n\t                }\r\n\t                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();\r\n\t                errorHandler(exception);\r\n\t            }\r\n\t        }\r\n\t        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);\r\n\t        if (rejections.length)\r\n\t            return rejections[0];\r\n\t        return results\r\n\t            .filter(predicates_1.isPromise)\r\n\t            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\r\n\t    };\r\n\t    return TransitionHook;\r\n\t}());\r\n\texports.TransitionHook = TransitionHook;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/**\r\n\t * @ngdoc object\r\n\t * @name ui.router.state.type:TargetState\r\n\t *\r\n\t * @description\r\n\t * Encapsulate the desired target of a transition.\r\n\t * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\r\n\t *\r\n\t * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\r\n\t *            used to define the state.\r\n\t * @param {IState} _definition The `State` object definition.\r\n\t * @param {ParamsOrArray} _params Parameters for the target state\r\n\t * @param {TransitionOptions} _options Transition options.\r\n\t */\r\n\tvar TargetState = (function () {\r\n\t    function TargetState(_identifier, _definition, _params, _options) {\r\n\t        if (_params === void 0) { _params = {}; }\r\n\t        if (_options === void 0) { _options = {}; }\r\n\t        this._identifier = _identifier;\r\n\t        this._definition = _definition;\r\n\t        this._options = _options;\r\n\t        this._params = _params || {};\r\n\t    }\r\n\t    TargetState.prototype.name = function () {\r\n\t        return this._definition && this._definition.name || this._identifier;\r\n\t    };\r\n\t    TargetState.prototype.identifier = function () {\r\n\t        return this._identifier;\r\n\t    };\r\n\t    TargetState.prototype.params = function () {\r\n\t        return this._params;\r\n\t    };\r\n\t    TargetState.prototype.$state = function () {\r\n\t        return this._definition;\r\n\t    };\r\n\t    TargetState.prototype.state = function () {\r\n\t        return this._definition && this._definition.self;\r\n\t    };\r\n\t    TargetState.prototype.options = function () {\r\n\t        return this._options;\r\n\t    };\r\n\t    TargetState.prototype.exists = function () {\r\n\t        return !!(this._definition && this._definition.self);\r\n\t    };\r\n\t    TargetState.prototype.valid = function () {\r\n\t        return !this.error();\r\n\t    };\r\n\t    TargetState.prototype.error = function () {\r\n\t        var base = this.options().relative;\r\n\t        if (!this._definition && !!base) {\r\n\t            var stateName = base.name ? base.name : base;\r\n\t            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\r\n\t        }\r\n\t        if (!this._definition)\r\n\t            return \"No such state '\" + this.name() + \"'\";\r\n\t        if (!this._definition.self)\r\n\t            return \"State '\" + this.name() + \"' has an invalid definition\";\r\n\t    };\r\n\t    TargetState.prototype.toString = function () {\r\n\t        return \"'\" + this.name() + \"'\" + common_1.toJson(this.params());\r\n\t    };\r\n\t    return TargetState;\r\n\t}());\r\n\texports.TargetState = TargetState;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module transition */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar glob_1 = __webpack_require__(7);\r\n\t/**\r\n\t * Determines if the given state matches the matchCriteria\r\n\t *\r\n\t * @hidden\r\n\t *\r\n\t * @param state a State Object to test against\r\n\t * @param criterion\r\n\t * - If a string, matchState uses the string as a glob-matcher against the state name\r\n\t * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\r\n\t *   and returns a positive match if any of the globs match.\r\n\t * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction matchState(state, criterion) {\r\n\t    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\r\n\t    function matchGlobs(_state) {\r\n\t        var globStrings = toMatch;\r\n\t        for (var i = 0; i < globStrings.length; i++) {\r\n\t            var glob = glob_1.Glob.fromString(globStrings[i]);\r\n\t            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return false;\r\n\t    }\r\n\t    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\r\n\t    return !!matchFn(state);\r\n\t}\r\n\texports.matchState = matchState;\r\n\t/** @hidden */\r\n\tvar EventHook = (function () {\r\n\t    function EventHook(matchCriteria, callback, options) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        this.callback = callback;\r\n\t        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\r\n\t        this.priority = options.priority || 0;\r\n\t        this.bind = options.bind || null;\r\n\t        this._deregistered = false;\r\n\t    }\r\n\t    EventHook._matchingNodes = function (nodes, criterion) {\r\n\t        if (criterion === true)\r\n\t            return nodes;\r\n\t        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\r\n\t        return matching.length ? matching : null;\r\n\t    };\r\n\t    /**\r\n\t     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\r\n\t     *\r\n\t     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\r\n\t     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\r\n\t     */\r\n\t    EventHook.prototype.matches = function (treeChanges) {\r\n\t        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\r\n\t        var matches = {\r\n\t            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\r\n\t            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\r\n\t            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\r\n\t            retained: _matchingNodes(treeChanges.retained, mc.retained),\r\n\t            entering: _matchingNodes(treeChanges.entering, mc.entering),\r\n\t        };\r\n\t        // Check if all the criteria matched the TreeChanges object\r\n\t        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\r\n\t            .map(function (prop) { return matches[prop]; })\r\n\t            .reduce(common_1.allTrueR, true);\r\n\t        return allMatched ? matches : null;\r\n\t    };\r\n\t    return EventHook;\r\n\t}());\r\n\texports.EventHook = EventHook;\r\n\t/** @hidden Return a registration function of the requested type. */\r\n\tfunction makeHookRegistrationFn(hooks, name) {\r\n\t    return function (matchObject, callback, options) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        var eventHook = new EventHook(matchObject, callback, options);\r\n\t        hooks[name].push(eventHook);\r\n\t        return function deregisterEventHook() {\r\n\t            eventHook._deregistered = true;\r\n\t            common_1.removeFrom(hooks[name])(eventHook);\r\n\t        };\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * Mixin class acts as a Transition Hook registry.\r\n\t *\r\n\t * Holds the registered [[HookFn]] objects.\r\n\t * Exposes functions to register new hooks.\r\n\t *\r\n\t * This is a Mixin class which can be applied to other objects.\r\n\t *\r\n\t * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\r\n\t *\r\n\t * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\r\n\t * Global hooks are added to the [[TransitionService]].\r\n\t * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\r\n\t * (note: the hook criteria still must match the Transition).\r\n\t */\r\n\tvar HookRegistry = (function () {\r\n\t    function HookRegistry() {\r\n\t        var _this = this;\r\n\t        this._transitionEvents = {\r\n\t            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\r\n\t        };\r\n\t        this.getHooks = function (name) { return _this._transitionEvents[name]; };\r\n\t        /** @inheritdoc */\r\n\t        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\r\n\t        /** @inheritdoc */\r\n\t        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\r\n\t        /** @inheritdoc */\r\n\t        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\r\n\t        /** @inheritdoc */\r\n\t        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\r\n\t        /** @inheritdoc */\r\n\t        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\r\n\t        /** @inheritdoc */\r\n\t        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\r\n\t        /** @inheritdoc */\r\n\t        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\r\n\t        /** @inheritdoc */\r\n\t        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\r\n\t    }\r\n\t    HookRegistry.mixin = function (source, target) {\r\n\t        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\r\n\t    };\r\n\t    return HookRegistry;\r\n\t}());\r\n\texports.HookRegistry = HookRegistry;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar transitionHook_1 = __webpack_require__(13);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\t/**\r\n\t * This class returns applicable TransitionHooks for a specific Transition instance.\r\n\t *\r\n\t * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\r\n\t * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\r\n\t * determined by the type of hook)\r\n\t *\r\n\t * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\r\n\t *\r\n\t * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\r\n\t * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\r\n\t * in the Transition class, so we must also provide the Transition's _treeChanges)\r\n\t *\r\n\t */\r\n\tvar HookBuilder = (function () {\r\n\t    function HookBuilder($transitions, transition, baseHookOptions) {\r\n\t        var _this = this;\r\n\t        this.$transitions = $transitions;\r\n\t        this.transition = transition;\r\n\t        this.baseHookOptions = baseHookOptions;\r\n\t        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), { async: false }); };\r\n\t        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\r\n\t        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), { stateHook: true }); };\r\n\t        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(false), { stateHook: true }); };\r\n\t        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(false), { stateHook: true }); };\r\n\t        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort()); };\r\n\t        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\r\n\t        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\r\n\t        this.treeChanges = transition.treeChanges();\r\n\t        this.toState = common_1.tail(this.treeChanges.to).state;\r\n\t        this.fromState = common_1.tail(this.treeChanges.from).state;\r\n\t        this.transitionOptions = transition.options();\r\n\t    }\r\n\t    HookBuilder.prototype.asyncHooks = function () {\r\n\t        var onStartHooks = this.getOnStartHooks();\r\n\t        var onExitHooks = this.getOnExitHooks();\r\n\t        var onRetainHooks = this.getOnRetainHooks();\r\n\t        var onEnterHooks = this.getOnEnterHooks();\r\n\t        var onFinishHooks = this.getOnFinishHooks();\r\n\t        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\r\n\t        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\r\n\t    };\r\n\t    /**\r\n\t     * Returns an array of newly built TransitionHook objects.\r\n\t     *\r\n\t     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\r\n\t     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\r\n\t     * - For each of the [[PathNode]]s, creates a TransitionHook\r\n\t     *\r\n\t     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\r\n\t     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\r\n\t     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\r\n\t     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\r\n\t     * @param options any specific Transition Hook Options\r\n\t     */\r\n\t    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {\r\n\t        var _this = this;\r\n\t        // Find all the matching registered hooks for a given hook type\r\n\t        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\r\n\t        if (!matchingHooks)\r\n\t            return [];\r\n\t        var makeTransitionHooks = function (hook) {\r\n\t            // Fetch the Nodes that caused this hook to match.\r\n\t            var matches = hook.matches(_this.treeChanges);\r\n\t            // Select the PathNode[] that will be used as TransitionHook context objects\r\n\t            var matchingNodes = matches[matchingNodesProp];\r\n\t            // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\r\n\t            // Everything else gets the \"to path\"\r\n\t            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;\r\n\t            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);\r\n\t            // Return an array of HookTuples\r\n\t            return matchingNodes.map(function (node) {\r\n\t                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\r\n\t                var state = _options.stateHook ? node.state : null;\r\n\t                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);\r\n\t                return { hook: hook, node: node, transitionHook: transitionHook };\r\n\t            });\r\n\t        };\r\n\t        return matchingHooks.map(makeTransitionHooks)\r\n\t            .reduce(common_1.unnestR, [])\r\n\t            .sort(sortHooksFn)\r\n\t            .map(function (tuple) { return tuple.transitionHook; });\r\n\t    };\r\n\t    /**\r\n\t     * Finds all IEventHooks from:\r\n\t     * - The Transition object instance hook registry\r\n\t     * - The TransitionService ($transitions) global hook registry\r\n\t     *\r\n\t     * which matched:\r\n\t     * - the eventType\r\n\t     * - the matchCriteria (to, from, exiting, retained, entering)\r\n\t     *\r\n\t     * @returns an array of matched [[IEventHook]]s\r\n\t     */\r\n\t    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\r\n\t        return [this.transition, this.$transitions] // Instance and Global hook registries\r\n\t            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\r\n\t            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\r\n\t            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\r\n\t            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\r\n\t    };\r\n\t    return HookBuilder;\r\n\t}());\r\n\texports.HookBuilder = HookBuilder;\r\n\t/**\r\n\t * A factory for a sort function for HookTuples.\r\n\t *\r\n\t * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\r\n\t * the EventHook priority.\r\n\t *\r\n\t * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\r\n\t * @returns a tuple sort function\r\n\t */\r\n\tfunction tupleSort(reverseDepthSort) {\r\n\t    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\r\n\t    return function nodeDepthThenPriority(l, r) {\r\n\t        var factor = reverseDepthSort ? -1 : 1;\r\n\t        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\r\n\t        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\r\n\t    };\r\n\t}\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module resolve */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar interface_1 = __webpack_require__(18);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar when = interface_1.resolvePolicies.when;\r\n\tvar ALL_WHENS = [when.EAGER, when.LAZY];\r\n\tvar EAGER_WHENS = [when.EAGER];\r\n\texports.NATIVE_INJECTOR_TOKEN = \"Native Injector\";\r\n\t/**\r\n\t * Encapsulates Depenency Injection for a path of nodes\r\n\t *\r\n\t * UI-Router states are organized as a tree.\r\n\t * A nested state has a path of ancestors to the root of the tree.\r\n\t * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\r\n\t * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\r\n\t *\r\n\t * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\r\n\t */\r\n\tvar ResolveContext = (function () {\r\n\t    function ResolveContext(_path) {\r\n\t        this._path = _path;\r\n\t    }\r\n\t    /** Gets all the tokens found in the resolve context, de-duplicated */\r\n\t    ResolveContext.prototype.getTokens = function () {\r\n\t        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the Resolvable that matches the token\r\n\t     *\r\n\t     * Gets the last Resolvable that matches the token in this context, or undefined.\r\n\t     * Throws an error if it doesn't exist in the ResolveContext\r\n\t     */\r\n\t    ResolveContext.prototype.getResolvable = function (token) {\r\n\t        var matching = this._path.map(function (node) { return node.resolvables; })\r\n\t            .reduce(common_1.unnestR, [])\r\n\t            .filter(function (r) { return r.token === token; });\r\n\t        return common_1.tail(matching);\r\n\t    };\r\n\t    /**\r\n\t     * Returns a ResolveContext that includes a portion of this one\r\n\t     *\r\n\t     * Given a state, this method creates a new ResolveContext from this one.\r\n\t     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\r\n\t     *\r\n\t     * #### Why\r\n\t     *\r\n\t     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\r\n\t     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\r\n\t     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\r\n\t     * This method is used to create a narrower context when injecting ancestor nodes.\r\n\t     *\r\n\t     * @example\r\n\t     * `let ABCD = new ResolveContext([A, B, C, D]);`\r\n\t     *\r\n\t     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\r\n\t     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\r\n\t     * However, `B` should only be able to access resolvables from `A`, `B`.\r\n\t     *\r\n\t     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\r\n\t     * `let AB = ABCD.subcontext(a)`\r\n\t     */\r\n\t    ResolveContext.prototype.subContext = function (state) {\r\n\t        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));\r\n\t    };\r\n\t    /**\r\n\t     * Adds Resolvables to the node that matches the state\r\n\t     *\r\n\t     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\r\n\t     * The resolvable is added to the node matching the `state` parameter.\r\n\t     *\r\n\t     * These new resolvables are not automatically fetched.\r\n\t     * The calling code should either fetch them, fetch something that depends on them,\r\n\t     * or rely on [[resolvePath]] being called when some state is being entered.\r\n\t     *\r\n\t     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\r\n\t     *\r\n\t     * @param newResolvables the new Resolvables\r\n\t     * @param state Used to find the node to put the resolvable on\r\n\t     */\r\n\t    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\r\n\t        var node = common_1.find(this._path, hof_1.propEq('state', state));\r\n\t        var keys = newResolvables.map(function (r) { return r.token; });\r\n\t        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\r\n\t    };\r\n\t    /**\r\n\t     * Returns a promise for an array of resolved path Element promises\r\n\t     *\r\n\t     * @param when\r\n\t     * @param trans\r\n\t     * @returns {Promise<any>|any}\r\n\t     */\r\n\t    ResolveContext.prototype.resolvePath = function (when, trans) {\r\n\t        var _this = this;\r\n\t        if (when === void 0) { when = \"LAZY\"; }\r\n\t        // This option determines which 'when' policy Resolvables we are about to fetch.\r\n\t        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\r\n\t        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\r\n\t        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\r\n\t        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\r\n\t        // get the subpath to the state argument, if provided\r\n\t        trace_1.trace.traceResolvePath(this._path, when, trans);\r\n\t        var promises = this._path.reduce(function (acc, node) {\r\n\t            var matchesRequestedPolicy = function (resolvable) {\r\n\t                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);\r\n\t            };\r\n\t            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\r\n\t            var subContext = _this.subContext(node.state);\r\n\t            // For the matching Resolvables, start their async fetch process.\r\n\t            var getResult = function (r) { return r.get(subContext, trans)\r\n\t                .then(function (value) { return ({ token: r.token, value: value }); }); };\r\n\t            return acc.concat(nodeResolvables.map(getResult));\r\n\t        }, []);\r\n\t        return coreservices_1.services.$q.all(promises);\r\n\t    };\r\n\t    ResolveContext.prototype.injector = function () {\r\n\t        return this._injector || (this._injector = new UIInjectorImpl(this));\r\n\t    };\r\n\t    ResolveContext.prototype.findNode = function (resolvable) {\r\n\t        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\r\n\t    };\r\n\t    /**\r\n\t     * Gets the async dependencies of a Resolvable\r\n\t     *\r\n\t     * Given a Resolvable, returns its dependencies as a Resolvable[]\r\n\t     */\r\n\t    ResolveContext.prototype.getDependencies = function (resolvable) {\r\n\t        var _this = this;\r\n\t        var node = this.findNode(resolvable);\r\n\t        // Find which other resolvables are \"visible\" to the `resolvable` argument\r\n\t        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\r\n\t        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;\r\n\t        var availableResolvables = subPath\r\n\t            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\r\n\t            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\r\n\t        var getDependency = function (token) {\r\n\t            var matching = availableResolvables.filter(function (r) { return r.token === token; });\r\n\t            if (matching.length)\r\n\t                return common_1.tail(matching);\r\n\t            var fromInjector = _this.injector().getNative(token);\r\n\t            if (!fromInjector) {\r\n\t                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\r\n\t            }\r\n\t            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\r\n\t        };\r\n\t        return resolvable.deps.map(getDependency);\r\n\t    };\r\n\t    return ResolveContext;\r\n\t}());\r\n\texports.ResolveContext = ResolveContext;\r\n\tvar UIInjectorImpl = (function () {\r\n\t    function UIInjectorImpl(context) {\r\n\t        this.context = context;\r\n\t        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;\r\n\t    }\r\n\t    UIInjectorImpl.prototype.get = function (token) {\r\n\t        var resolvable = this.context.getResolvable(token);\r\n\t        if (resolvable) {\r\n\t            if (!resolvable.resolved) {\r\n\t                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\r\n\t            }\r\n\t            return resolvable.data;\r\n\t        }\r\n\t        return this.native && this.native.get(token);\r\n\t    };\r\n\t    UIInjectorImpl.prototype.getAsync = function (token) {\r\n\t        var resolvable = this.context.getResolvable(token);\r\n\t        if (resolvable)\r\n\t            return resolvable.get(this.context);\r\n\t        return coreservices_1.services.$q.when(this.native.get(token));\r\n\t    };\r\n\t    UIInjectorImpl.prototype.getNative = function (token) {\r\n\t        return this.native.get(token);\r\n\t    };\r\n\t    return UIInjectorImpl;\r\n\t}());\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\texports.resolvePolicies = {\r\n\t    when: {\r\n\t        LAZY: \"LAZY\",\r\n\t        EAGER: \"EAGER\"\r\n\t    },\r\n\t    async: {\r\n\t        WAIT: \"WAIT\",\r\n\t        NOWAIT: \"NOWAIT\",\r\n\t        RXWAIT: \"RXWAIT\"\r\n\t    }\r\n\t};\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module resolve */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\t// TODO: explicitly make this user configurable\r\n\texports.defaultResolvePolicy = {\r\n\t    when: \"LAZY\",\r\n\t    async: \"WAIT\"\r\n\t};\r\n\t/**\r\n\t * The basic building block for the resolve system.\r\n\t *\r\n\t * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\r\n\t * and the unwrapped-when-complete (.data) result of the resolveFn.\r\n\t *\r\n\t * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\r\n\t * resolveFn) and returns the resulting promise.\r\n\t *\r\n\t * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\r\n\t * parameter to those fns.\r\n\t */\r\n\tvar Resolvable = (function () {\r\n\t    function Resolvable(arg1, resolveFn, deps, policy, data) {\r\n\t        this.resolved = false;\r\n\t        this.promise = undefined;\r\n\t        if (arg1 instanceof Resolvable) {\r\n\t            common_1.extend(this, arg1);\r\n\t        }\r\n\t        else if (predicates_1.isFunction(resolveFn)) {\r\n\t            if (arg1 == null || arg1 == undefined)\r\n\t                throw new Error(\"new Resolvable(): token argument is required\");\r\n\t            if (!predicates_1.isFunction(resolveFn))\r\n\t                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\r\n\t            this.token = arg1;\r\n\t            this.policy = policy;\r\n\t            this.resolveFn = resolveFn;\r\n\t            this.deps = deps || [];\r\n\t            this.data = data;\r\n\t            this.resolved = data !== undefined;\r\n\t            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\r\n\t        }\r\n\t        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\r\n\t            var literal = arg1;\r\n\t            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\r\n\t        }\r\n\t    }\r\n\t    Resolvable.prototype.getPolicy = function (state) {\r\n\t        var thisPolicy = this.policy || {};\r\n\t        var statePolicy = state && state.resolvePolicy || {};\r\n\t        return {\r\n\t            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\r\n\t            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * Asynchronously resolve this Resolvable's data\r\n\t     *\r\n\t     * Given a ResolveContext that this Resolvable is found in:\r\n\t     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\r\n\t     * and update the Resolvable's state\r\n\t     */\r\n\t    Resolvable.prototype.resolve = function (resolveContext, trans) {\r\n\t        var _this = this;\r\n\t        var $q = coreservices_1.services.$q;\r\n\t        // Gets all dependencies from ResolveContext and wait for them to be resolved\r\n\t        var getResolvableDependencies = function () {\r\n\t            return $q.all(resolveContext.getDependencies(_this).map(function (r) {\r\n\t                return r.get(resolveContext, trans);\r\n\t            }));\r\n\t        };\r\n\t        // Invokes the resolve function passing the resolved dependencies as arguments\r\n\t        var invokeResolveFn = function (resolvedDeps) {\r\n\t            return _this.resolveFn.apply(null, resolvedDeps);\r\n\t        };\r\n\t        /**\r\n\t         * For RXWAIT policy:\r\n\t         *\r\n\t         * Given an observable returned from a resolve function:\r\n\t         * - enables .cache() mode (this allows multicast subscribers)\r\n\t         * - then calls toPromise() (this triggers subscribe() and thus fetches)\r\n\t         * - Waits for the promise, then return the cached observable (not the first emitted value).\r\n\t         */\r\n\t        var waitForRx = function (observable$) {\r\n\t            var cached = observable$.cache(1);\r\n\t            return cached.take(1).toPromise().then(function () { return cached; });\r\n\t        };\r\n\t        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\r\n\t        var node = resolveContext.findNode(this);\r\n\t        var state = node && node.state;\r\n\t        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : common_1.identity;\r\n\t        // After the final value has been resolved, update the state of the Resolvable\r\n\t        var applyResolvedValue = function (resolvedValue) {\r\n\t            _this.data = resolvedValue;\r\n\t            _this.resolved = true;\r\n\t            trace_1.trace.traceResolvableResolved(_this, trans);\r\n\t            return _this.data;\r\n\t        };\r\n\t        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\r\n\t        return this.promise = $q.when()\r\n\t            .then(getResolvableDependencies)\r\n\t            .then(invokeResolveFn)\r\n\t            .then(maybeWaitForRx)\r\n\t            .then(applyResolvedValue);\r\n\t    };\r\n\t    /**\r\n\t     * Gets a promise for this Resolvable's data.\r\n\t     *\r\n\t     * Fetches the data and returns a promise.\r\n\t     * Returns the existing promise if it has already been fetched once.\r\n\t     */\r\n\t    Resolvable.prototype.get = function (resolveContext, trans) {\r\n\t        return this.promise || this.resolve(resolveContext, trans);\r\n\t    };\r\n\t    Resolvable.prototype.toString = function () {\r\n\t        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\r\n\t    };\r\n\t    Resolvable.prototype.clone = function () {\r\n\t        return new Resolvable(this);\r\n\t    };\r\n\t    Resolvable.fromData = function (token, data) {\r\n\t        return new Resolvable(token, function () { return data; }, null, null, data);\r\n\t    };\r\n\t    return Resolvable;\r\n\t}());\r\n\texports.Resolvable = Resolvable;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module path */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar node_1 = __webpack_require__(21);\r\n\t/**\r\n\t * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\r\n\t */\r\n\tvar PathFactory = (function () {\r\n\t    function PathFactory() {\r\n\t    }\r\n\t    /** Given a PathNode[], create an TargetState */\r\n\t    PathFactory.makeTargetState = function (path) {\r\n\t        var state = common_1.tail(path).state;\r\n\t        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\r\n\t    };\r\n\t    PathFactory.buildPath = function (targetState) {\r\n\t        var toParams = targetState.params();\r\n\t        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });\r\n\t    };\r\n\t    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\r\n\t    PathFactory.buildToPath = function (fromPath, targetState) {\r\n\t        var toPath = PathFactory.buildPath(targetState);\r\n\t        if (targetState.options().inherit) {\r\n\t            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\r\n\t        }\r\n\t        return toPath;\r\n\t    };\r\n\t    /**\r\n\t     * Creates ViewConfig objects and adds to nodes.\r\n\t     *\r\n\t     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\r\n\t     */\r\n\t    PathFactory.applyViewConfigs = function ($view, path, states) {\r\n\t        // Only apply the viewConfigs to the nodes for the given states\r\n\t        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\r\n\t            var viewDecls = common_1.values(node.state.views || {});\r\n\t            var subPath = PathFactory.subPath(path, function (n) { return n === node; });\r\n\t            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\r\n\t            node.views = viewConfigs.reduce(common_1.unnestR, []);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\r\n\t     *\r\n\t     * For a parameter in a node to be inherited from the from path:\r\n\t     * - The toPath's node must have a matching node in the fromPath (by state).\r\n\t     * - The parameter name must not be found in the toKeys parameter array.\r\n\t     *\r\n\t     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\r\n\t     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\r\n\t     * it is not inherited from the fromPath.\r\n\t     */\r\n\t    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\r\n\t        if (toKeys === void 0) { toKeys = []; }\r\n\t        function nodeParamVals(path, state) {\r\n\t            var node = common_1.find(path, hof_1.propEq('state', state));\r\n\t            return common_1.extend({}, node && node.paramValues);\r\n\t        }\r\n\t        /**\r\n\t         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\r\n\t         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\r\n\t         */\r\n\t        function makeInheritedParamsNode(toNode) {\r\n\t            // All param values for the node (may include default key/vals, when key was not found in toParams)\r\n\t            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\r\n\t            // limited to only those keys found in toParams\r\n\t            var incomingParamVals = common_1.pick(toParamVals, toKeys);\r\n\t            toParamVals = common_1.omit(toParamVals, toKeys);\r\n\t            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\r\n\t            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\r\n\t            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\r\n\t            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);\r\n\t        }\r\n\t        // The param keys specified by the incoming toParams\r\n\t        return toPath.map(makeInheritedParamsNode);\r\n\t    };\r\n\t    /**\r\n\t     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\r\n\t     */\r\n\t    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\r\n\t        var keep = 0, max = Math.min(fromPath.length, toPath.length);\r\n\t        var staticParams = function (state) {\r\n\t            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));\r\n\t        };\r\n\t        var nodesMatch = function (node1, node2) {\r\n\t            return node1.equals(node2, staticParams(node1.state));\r\n\t        };\r\n\t        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\r\n\t            keep++;\r\n\t        }\r\n\t        /** Given a retained node, return a new node which uses the to node's param values */\r\n\t        function applyToParams(retainedNode, idx) {\r\n\t            var cloned = node_1.PathNode.clone(retainedNode);\r\n\t            cloned.paramValues = toPath[idx].paramValues;\r\n\t            return cloned;\r\n\t        }\r\n\t        var from, retained, exiting, entering, to;\r\n\t        from = fromPath;\r\n\t        retained = from.slice(0, keep);\r\n\t        exiting = from.slice(keep);\r\n\t        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\r\n\t        var retainedWithToParams = retained.map(applyToParams);\r\n\t        entering = toPath.slice(keep);\r\n\t        to = (retainedWithToParams).concat(entering);\r\n\t        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\r\n\t    };\r\n\t    /**\r\n\t     * Return a subpath of a path, which stops at the first matching node\r\n\t     *\r\n\t     * Given an array of nodes, returns a subset of the array starting from the first node,\r\n\t     * stopping when the first node matches the predicate.\r\n\t     *\r\n\t     * @param path a path of [[PathNode]]s\r\n\t     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\r\n\t     * @returns a subpath up to the matching node, or undefined if no match is found\r\n\t     */\r\n\t    PathFactory.subPath = function (path, predicate) {\r\n\t        var node = common_1.find(path, predicate);\r\n\t        var elementIdx = path.indexOf(node);\r\n\t        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\r\n\t    };\r\n\t    /** Gets the raw parameter values from a path */\r\n\t    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\r\n\t    return PathFactory;\r\n\t}());\r\n\texports.PathFactory = PathFactory;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module path */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar param_1 = __webpack_require__(22);\r\n\t/**\r\n\t * A node in a [[TreeChanges]] path\r\n\t *\r\n\t * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\r\n\t * Each PathNode corresponds to a state being entered, exited, or retained.\r\n\t * The stateful information includes parameter values and resolve data.\r\n\t */\r\n\tvar PathNode = (function () {\r\n\t    function PathNode(stateOrPath) {\r\n\t        if (stateOrPath instanceof PathNode) {\r\n\t            var node = stateOrPath;\r\n\t            this.state = node.state;\r\n\t            this.paramSchema = node.paramSchema.slice();\r\n\t            this.paramValues = common_1.extend({}, node.paramValues);\r\n\t            this.resolvables = node.resolvables.slice();\r\n\t            this.views = node.views && node.views.slice();\r\n\t        }\r\n\t        else {\r\n\t            var state = stateOrPath;\r\n\t            this.state = state;\r\n\t            this.paramSchema = state.parameters({ inherit: false });\r\n\t            this.paramValues = {};\r\n\t            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\r\n\t        }\r\n\t    }\r\n\t    /** Sets [[paramValues]] for the node, from the values of an object hash */\r\n\t    PathNode.prototype.applyRawParams = function (params) {\r\n\t        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\r\n\t        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\r\n\t        return this;\r\n\t    };\r\n\t    /** Gets a specific [[Param]] metadata that belongs to the node */\r\n\t    PathNode.prototype.parameter = function (name) {\r\n\t        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\r\n\t    };\r\n\t    /**\r\n\t     * @returns true if the state and parameter values for another PathNode are\r\n\t     * equal to the state and param values for this PathNode\r\n\t     */\r\n\t    PathNode.prototype.equals = function (node, keys) {\r\n\t        var _this = this;\r\n\t        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }\r\n\t        var paramValsEq = function (key) {\r\n\t            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);\r\n\t        };\r\n\t        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\r\n\t    };\r\n\t    /** Returns a clone of the PathNode */\r\n\t    PathNode.clone = function (node) {\r\n\t        return new PathNode(node);\r\n\t    };\r\n\t    /**\r\n\t     * Returns a new path which is a subpath of the first path which matched the second path.\r\n\t     *\r\n\t     * The new path starts from root and contains any nodes that match the nodes in the second path.\r\n\t     * Nodes are compared using their state property and parameter values.\r\n\t     *\r\n\t     * @param pathA the first path\r\n\t     * @param pathB the second path\r\n\t     * @param ignoreDynamicParams don't compare dynamic parameter values\r\n\t     */\r\n\t    PathNode.matching = function (pathA, pathB, ignoreDynamicParams) {\r\n\t        if (ignoreDynamicParams === void 0) { ignoreDynamicParams = true; }\r\n\t        var matching = [];\r\n\t        for (var i = 0; i < pathA.length && i < pathB.length; i++) {\r\n\t            var a = pathA[i], b = pathB[i];\r\n\t            if (a.state !== b.state)\r\n\t                break;\r\n\t            var changedParams = param_1.Param.changed(a.paramSchema, a.paramValues, b.paramValues)\r\n\t                .filter(function (param) { return !(ignoreDynamicParams && param.dynamic); });\r\n\t            if (changedParams.length)\r\n\t                break;\r\n\t            matching.push(a);\r\n\t        }\r\n\t        return matching;\r\n\t    };\r\n\t    return PathNode;\r\n\t}());\r\n\texports.PathNode = PathNode;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\r\n\tvar type_1 = __webpack_require__(24);\r\n\tvar hasOwn = Object.prototype.hasOwnProperty;\r\n\tvar isShorthand = function (cfg) {\r\n\t    return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\r\n\t};\r\n\t(function (DefType) {\r\n\t    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\r\n\t    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\r\n\t    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\r\n\t})(exports.DefType || (exports.DefType = {}));\r\n\tvar DefType = exports.DefType;\r\n\tfunction unwrapShorthand(cfg) {\r\n\t    cfg = isShorthand(cfg) && { value: cfg } || cfg;\r\n\t    return common_1.extend(cfg, {\r\n\t        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\r\n\t    });\r\n\t}\r\n\tfunction getType(cfg, urlType, location, id, paramTypes) {\r\n\t    if (cfg.type && urlType && urlType.name !== 'string')\r\n\t        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\r\n\t    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))\r\n\t        return paramTypes.type(cfg.type);\r\n\t    if (urlType)\r\n\t        return urlType;\r\n\t    if (!cfg.type)\r\n\t        return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\r\n\t    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);\r\n\t}\r\n\t/**\r\n\t * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\r\n\t */\r\n\tfunction getSquashPolicy(config, isOptional) {\r\n\t    var squash = config.squash;\r\n\t    if (!isOptional || squash === false)\r\n\t        return false;\r\n\t    if (!predicates_1.isDefined(squash) || squash == null)\r\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\r\n\t    if (squash === true || predicates_1.isString(squash))\r\n\t        return squash;\r\n\t    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\r\n\t}\r\n\tfunction getReplace(config, arrayMode, isOptional, squash) {\r\n\t    var replace, configuredKeys, defaultPolicy = [\r\n\t        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\r\n\t        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\r\n\t    ];\r\n\t    replace = predicates_1.isArray(config.replace) ? config.replace : [];\r\n\t    if (predicates_1.isString(squash))\r\n\t        replace.push({ from: squash, to: undefined });\r\n\t    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\r\n\t    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\r\n\t}\r\n\tvar Param = (function () {\r\n\t    function Param(id, type, config, location, paramTypes) {\r\n\t        config = unwrapShorthand(config);\r\n\t        type = getType(config, type, location, id, paramTypes);\r\n\t        var arrayMode = getArrayMode();\r\n\t        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\r\n\t        var isOptional = config.value !== undefined;\r\n\t        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\r\n\t        var squash = getSquashPolicy(config, isOptional);\r\n\t        var replace = getReplace(config, arrayMode, isOptional, squash);\r\n\t        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\r\n\t        function getArrayMode() {\r\n\t            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\r\n\t            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\r\n\t            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\r\n\t        }\r\n\t        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\r\n\t    }\r\n\t    Param.prototype.isDefaultValue = function (value) {\r\n\t        return this.isOptional && this.type.equals(this.value(), value);\r\n\t    };\r\n\t    /**\r\n\t     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\r\n\t     * default value, which may be the result of an injectable function.\r\n\t     */\r\n\t    Param.prototype.value = function (value) {\r\n\t        var _this = this;\r\n\t        /**\r\n\t         * [Internal] Get the default value of a parameter, which may be an injectable function.\r\n\t         */\r\n\t        var $$getDefaultValue = function () {\r\n\t            if (!coreservices_1.services.$injector)\r\n\t                throw new Error(\"Injectable functions cannot be called at configuration time\");\r\n\t            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\r\n\t            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\r\n\t                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\r\n\t            return defaultValue;\r\n\t        };\r\n\t        var $replace = function (val) {\r\n\t            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\r\n\t            return replacement.length ? replacement[0] : val;\r\n\t        };\r\n\t        value = $replace(value);\r\n\t        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\r\n\t    };\r\n\t    Param.prototype.isSearch = function () {\r\n\t        return this.location === DefType.SEARCH;\r\n\t    };\r\n\t    Param.prototype.validates = function (value) {\r\n\t        // There was no parameter value, but the param is optional\r\n\t        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\r\n\t            return true;\r\n\t        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\r\n\t        var normalized = this.type.$normalize(value);\r\n\t        if (!this.type.is(normalized))\r\n\t            return false;\r\n\t        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\r\n\t        var encoded = this.type.encode(normalized);\r\n\t        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\r\n\t    };\r\n\t    Param.prototype.toString = function () {\r\n\t        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\r\n\t    };\r\n\t    /** Creates a new [[Param]] from a CONFIG block */\r\n\t    Param.fromConfig = function (id, type, config, paramTypes) {\r\n\t        return new Param(id, type, config, DefType.CONFIG, paramTypes);\r\n\t    };\r\n\t    /** Creates a new [[Param]] from a url PATH */\r\n\t    Param.fromPath = function (id, type, config, paramTypes) {\r\n\t        return new Param(id, type, config, DefType.PATH, paramTypes);\r\n\t    };\r\n\t    /** Creates a new [[Param]] from a url SEARCH */\r\n\t    Param.fromSearch = function (id, type, config, paramTypes) {\r\n\t        return new Param(id, type, config, DefType.SEARCH, paramTypes);\r\n\t    };\r\n\t    Param.values = function (params, values) {\r\n\t        if (values === void 0) { values = {}; }\r\n\t        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\r\n\t    };\r\n\t    /**\r\n\t     * Finds [[Param]] objects which have different param values\r\n\t     *\r\n\t     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\r\n\t     *\r\n\t     * @param params: The list of Param objects to filter\r\n\t     * @param values1: The first set of parameter values\r\n\t     * @param values2: the second set of parameter values\r\n\t     *\r\n\t     * @returns any Param objects whose values were different between values1 and values2\r\n\t     */\r\n\t    Param.changed = function (params, values1, values2) {\r\n\t        if (values1 === void 0) { values1 = {}; }\r\n\t        if (values2 === void 0) { values2 = {}; }\r\n\t        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\r\n\t    };\r\n\t    /**\r\n\t     * Checks if two param value objects are equal (for a set of [[Param]] objects)\r\n\t     *\r\n\t     * @param params The list of [[Param]] objects to check\r\n\t     * @param values1 The first set of param values\r\n\t     * @param values2 The second set of param values\r\n\t     *\r\n\t     * @returns true if the param values in values1 and values2 are equal\r\n\t     */\r\n\t    Param.equals = function (params, values1, values2) {\r\n\t        if (values1 === void 0) { values1 = {}; }\r\n\t        if (values2 === void 0) { values2 = {}; }\r\n\t        return Param.changed(params, values1, values2).length === 0;\r\n\t    };\r\n\t    /** Returns true if a the parameter values are valid, according to the Param definitions */\r\n\t    Param.validates = function (params, values) {\r\n\t        if (values === void 0) { values = {}; }\r\n\t        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\r\n\t    };\r\n\t    return Param;\r\n\t}());\r\n\texports.Param = Param;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar MatcherConfig = (function () {\r\n\t    function MatcherConfig() {\r\n\t        this._isCaseInsensitive = false;\r\n\t        this._isStrictMode = true;\r\n\t        this._defaultSquashPolicy = false;\r\n\t    }\r\n\t    MatcherConfig.prototype.caseInsensitive = function (value) {\r\n\t        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\r\n\t    };\r\n\t    MatcherConfig.prototype.strictMode = function (value) {\r\n\t        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\r\n\t    };\r\n\t    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\r\n\t        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\r\n\t            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\r\n\t        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\r\n\t    };\r\n\t    return MatcherConfig;\r\n\t}());\r\n\texports.MatcherConfig = MatcherConfig;\r\n\t// TODO: Do not export global instance; create one in UIRouter() constructor\r\n\texports.matcherConfig = new MatcherConfig();\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\t/**\r\n\t * Wraps up a `ParamType` object to handle array values.\r\n\t */\r\n\tfunction ArrayType(type, mode) {\r\n\t    var _this = this;\r\n\t    // Wrap non-array value as array\r\n\t    function arrayWrap(val) {\r\n\t        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);\r\n\t    }\r\n\t    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\r\n\t    function arrayUnwrap(val) {\r\n\t        switch (val.length) {\r\n\t            case 0: return undefined;\r\n\t            case 1: return mode === \"auto\" ? val[0] : val;\r\n\t            default: return val;\r\n\t        }\r\n\t    }\r\n\t    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\r\n\t    function arrayHandler(callback, allTruthyMode) {\r\n\t        return function handleArray(val) {\r\n\t            if (predicates_1.isArray(val) && val.length === 0)\r\n\t                return val;\r\n\t            var arr = arrayWrap(val);\r\n\t            var result = common_1.map(arr, callback);\r\n\t            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\r\n\t        };\r\n\t    }\r\n\t    // Wraps type (.equals) functions to operate on each value of an array\r\n\t    function arrayEqualsHandler(callback) {\r\n\t        return function handleArray(val1, val2) {\r\n\t            var left = arrayWrap(val1), right = arrayWrap(val2);\r\n\t            if (left.length !== right.length)\r\n\t                return false;\r\n\t            for (var i = 0; i < left.length; i++) {\r\n\t                if (!callback(left[i], right[i]))\r\n\t                    return false;\r\n\t            }\r\n\t            return true;\r\n\t        };\r\n\t    }\r\n\t    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {\r\n\t        var paramTypeFn = type[name].bind(type);\r\n\t        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;\r\n\t        _this[name] = wrapperFn(paramTypeFn);\r\n\t    });\r\n\t    common_1.extend(this, {\r\n\t        dynamic: type.dynamic,\r\n\t        name: type.name,\r\n\t        pattern: type.pattern,\r\n\t        is: arrayHandler(type.is.bind(type), true),\r\n\t        $arrayMode: mode\r\n\t    });\r\n\t}\r\n\t/**\r\n\t * A class that implements Custom Parameter Type functionality.\r\n\t *\r\n\t * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\r\n\t *\r\n\t * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\r\n\t *\r\n\t * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * {\r\n\t *   decode: function(val) { return parseInt(val, 10); },\r\n\t *   encode: function(val) { return val && val.toString(); },\r\n\t *   equals: function(a, b) { return this.is(a) && a === b; },\r\n\t *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\r\n\t *   pattern: /\\d+/\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tvar ParamType = (function () {\r\n\t    /**\r\n\t     * @param def  A configuration object which contains the custom type definition.  The object's\r\n\t     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\r\n\t     * @returns a new ParamType object\r\n\t     */\r\n\t    function ParamType(def) {\r\n\t        this.pattern = /.*/;\r\n\t        common_1.extend(this, def);\r\n\t    }\r\n\t    // consider these four methods to be \"abstract methods\" that should be overridden\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.is = function (val, key) { return true; };\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.encode = function (val, key) { return val; };\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.decode = function (val, key) { return val; };\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.equals = function (a, b) { return a == b; };\r\n\t    ParamType.prototype.$subPattern = function () {\r\n\t        var sub = this.pattern.toString();\r\n\t        return sub.substr(1, sub.length - 2);\r\n\t    };\r\n\t    ParamType.prototype.toString = function () {\r\n\t        return \"{ParamType:\" + this.name + \"}\";\r\n\t    };\r\n\t    /** Given an encoded string, or a decoded object, returns a decoded object */\r\n\t    ParamType.prototype.$normalize = function (val) {\r\n\t        return this.is(val) ? val : this.decode(val);\r\n\t    };\r\n\t    /**\r\n\t     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\r\n\t     * e.g.:\r\n\t     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\r\n\t     * - url: \"/path?queryParam=1&queryParam=2\r\n\t     * - $stateParams.queryParam will be [1, 2]\r\n\t     * if `mode` is \"auto\", then\r\n\t     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\r\n\t     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\r\n\t     */\r\n\t    ParamType.prototype.$asArray = function (mode, isSearch) {\r\n\t        if (!mode)\r\n\t            return this;\r\n\t        if (mode === \"auto\" && !isSearch)\r\n\t            throw new Error(\"'auto' array mode is for query parameters only\");\r\n\t        return new ArrayType(this, mode);\r\n\t    };\r\n\t    return ParamType;\r\n\t}());\r\n\texports.ParamType = ParamType;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module core */ /** */\r\n\tvar urlMatcherFactory_1 = __webpack_require__(26);\r\n\tvar urlRouter_1 = __webpack_require__(29);\r\n\tvar urlRouter_2 = __webpack_require__(29);\r\n\tvar transitionService_1 = __webpack_require__(30);\r\n\tvar view_1 = __webpack_require__(37);\r\n\tvar stateRegistry_1 = __webpack_require__(38);\r\n\tvar stateService_1 = __webpack_require__(43);\r\n\tvar globals_1 = __webpack_require__(44);\r\n\t/**\r\n\t * The master class used to instantiate an instance of UI-Router.\r\n\t *\r\n\t * This class instantiates and wires the global UI-Router services.\r\n\t *\r\n\t * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\r\n\t * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\r\n\t * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\r\n\t */\r\n\tvar UIRouter = (function () {\r\n\t    function UIRouter() {\r\n\t        this.viewService = new view_1.ViewService();\r\n\t        this.transitionService = new transitionService_1.TransitionService(this);\r\n\t        this.globals = new globals_1.Globals(this.transitionService);\r\n\t        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\r\n\t        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\r\n\t        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\r\n\t        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\r\n\t        this.stateService = new stateService_1.StateService(this);\r\n\t        this.viewService.rootContext(this.stateRegistry.root());\r\n\t        this.globals.$current = this.stateRegistry.root();\r\n\t        this.globals.current = this.globals.$current.self;\r\n\t    }\r\n\t    return UIRouter;\r\n\t}());\r\n\texports.UIRouter = UIRouter;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar urlMatcher_1 = __webpack_require__(27);\r\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar paramTypes_1 = __webpack_require__(28);\r\n\t/** @hidden */\r\n\tfunction getDefaultConfig() {\r\n\t    return {\r\n\t        strict: urlMatcherConfig_1.matcherConfig.strictMode(),\r\n\t        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * Factory for [[UrlMatcher]] instances.\r\n\t *\r\n\t * The factory is available to ng1 services as\r\n\t * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\r\n\t */\r\n\tvar UrlMatcherFactory = (function () {\r\n\t    function UrlMatcherFactory() {\r\n\t        this.paramTypes = new paramTypes_1.ParamTypes();\r\n\t        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\r\n\t    }\r\n\t    /**\r\n\t     * Defines whether URL matching should be case sensitive (the default behavior), or not.\r\n\t     *\r\n\t     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\r\n\t     * @returns the current value of caseInsensitive\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\r\n\t        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);\r\n\t    };\r\n\t    /**\r\n\t     * Defines whether URLs should match trailing slashes, or not (the default behavior).\r\n\t     *\r\n\t     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\r\n\t     * @returns the current value of strictMode\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.strictMode = function (value) {\r\n\t        return urlMatcherConfig_1.matcherConfig.strictMode(value);\r\n\t    };\r\n\t    /**\r\n\t     * Sets the default behavior when generating or matching URLs with default parameter values.\r\n\t     *\r\n\t     * @param value A string that defines the default parameter URL squashing behavior.\r\n\t     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\r\n\t     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\r\n\t     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\r\n\t     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\r\n\t     *             the parameter value from the URL and replace it with this string.\r\n\t     * @returns the current value of defaultSquashPolicy\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\r\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);\r\n\t    };\r\n\t    /**\r\n\t     * Creates a [[UrlMatcher]] for the specified pattern.\r\n\t     *\r\n\t     * @param pattern  The URL pattern.\r\n\t     * @param config  The config object hash.\r\n\t     * @returns The UrlMatcher.\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.compile = function (pattern, config) {\r\n\t        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\r\n\t     *\r\n\t     * @param object  The object to perform the type check against.\r\n\t     * @returns `true` if the object matches the `UrlMatcher` interface, by\r\n\t     *          implementing all the same methods.\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.isMatcher = function (object) {\r\n\t        // TODO: typeof?\r\n\t        if (!predicates_1.isObject(object))\r\n\t            return false;\r\n\t        var result = true;\r\n\t        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\r\n\t            if (predicates_1.isFunction(val))\r\n\t                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\r\n\t        });\r\n\t        return result;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Creates and registers a custom [[ParamType]] object\r\n\t     *\r\n\t     * A [[ParamType]] can be used to generate URLs with typed parameters.\r\n\t     *\r\n\t     * @param name  The type name.\r\n\t     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\r\n\t     * @param definitionFn A function that is injected before the app runtime starts.\r\n\t     *        The result of this function should be a [[ParamTypeDefinition]].\r\n\t     *        The result is merged into the existing `definition`.\r\n\t     *        See [[ParamType]] for information on the values accepted.\r\n\t     *\r\n\t     * @returns - if a type was registered: the [[UrlMatcherFactory]]\r\n\t     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\r\n\t     *\r\n\t     * Note: Register custom types *before using them* in a state definition.\r\n\t     *\r\n\t     * See [[ParamTypeDefinition]] for examples\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\r\n\t        var type = this.paramTypes.type(name, definition, definitionFn);\r\n\t        return !predicates_1.isDefined(definition) ? type : this;\r\n\t    };\r\n\t    ;\r\n\t    /** @hidden */\r\n\t    UrlMatcherFactory.prototype.$get = function () {\r\n\t        this.paramTypes.enqueue = false;\r\n\t        this.paramTypes._flushTypeQueue();\r\n\t        return this;\r\n\t    };\r\n\t    ;\r\n\t    return UrlMatcherFactory;\r\n\t}());\r\n\texports.UrlMatcherFactory = UrlMatcherFactory;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar predicates_2 = __webpack_require__(4);\r\n\tvar param_2 = __webpack_require__(22);\r\n\tvar common_2 = __webpack_require__(3);\r\n\tvar common_3 = __webpack_require__(3);\r\n\t/** @hidden */\r\n\tfunction quoteRegExp(string, param) {\r\n\t    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\r\n\t    if (!param)\r\n\t        return result;\r\n\t    switch (param.squash) {\r\n\t        case false:\r\n\t            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\r\n\t            break;\r\n\t        case true:\r\n\t            result = result.replace(/\\/$/, '');\r\n\t            surroundPattern = ['(?:\\/(', ')|\\/)?'];\r\n\t            break;\r\n\t        default:\r\n\t            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\r\n\t            break;\r\n\t    }\r\n\t    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\r\n\t}\r\n\t/** @hidden */\r\n\tvar memoizeTo = function (obj, prop, fn) {\r\n\t    return obj[prop] = obj[prop] || fn();\r\n\t};\r\n\t/**\r\n\t * Matches URLs against patterns.\r\n\t *\r\n\t * Matches URLs against patterns and extracts named parameters from the path or the search\r\n\t * part of the URL.\r\n\t *\r\n\t * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\r\n\t * parameters. Multiple search parameter names are separated by '&'. Search parameters\r\n\t * do not influence whether or not a URL is matched, but their values are passed through into\r\n\t * the matched parameters returned by [[UrlMatcher.exec]].\r\n\t *\r\n\t * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\r\n\t * or colon placeholders (`/somePath/:param`).\r\n\t *\r\n\t * - *A parameter RegExp* may be defined for a param after a colon\r\n\t * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\r\n\t * The regexp must match for the url to be matched.\r\n\t * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\r\n\t *\r\n\t * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\r\n\t * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\r\n\t *\r\n\t * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\r\n\t * parameter value will contain the remainder of the URL.\r\n\t *\r\n\t * ---\r\n\t *\r\n\t * Parameter names may contain only word characters (latin letters, digits, and underscore) and\r\n\t * must be unique within the pattern (across both path and search parameters).\r\n\t * A path parameter matches any number of characters other than '/'. For catch-all\r\n\t * placeholders the path parameter matches any number of characters.\r\n\t *\r\n\t * Examples:\r\n\t *\r\n\t * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\r\n\t *   trailing slashes, and patterns have to match the entire path, not just a prefix.\r\n\t * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\r\n\t *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\r\n\t * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\r\n\t * * `'/user/{id:[^/]*}'` - Same as the previous example.\r\n\t * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\r\n\t *   parameter consists of 1 to 8 hex digits.\r\n\t * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\r\n\t *   path into the parameter 'path'.\r\n\t * * `'/files/*path'` - ditto.\r\n\t * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\r\n\t *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\r\n\t *\r\n\t */\r\n\tvar UrlMatcher = (function () {\r\n\t    /**\r\n\t     * @param pattern The pattern to compile into a matcher.\r\n\t     * @param paramTypes The [[ParamTypes]] registry\r\n\t     * @param config  A configuration object\r\n\t     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\r\n\t     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\r\n\t     */\r\n\t    function UrlMatcher(pattern, paramTypes, config) {\r\n\t        var _this = this;\r\n\t        this.config = config;\r\n\t        /** @hidden */\r\n\t        this._cache = { path: [], pattern: null };\r\n\t        /** @hidden */\r\n\t        this._children = [];\r\n\t        /** @hidden */\r\n\t        this._params = [];\r\n\t        /** @hidden */\r\n\t        this._segments = [];\r\n\t        /** @hidden */\r\n\t        this._compiled = [];\r\n\t        this.pattern = pattern;\r\n\t        this.config = common_1.defaults(this.config, {\r\n\t            params: {},\r\n\t            strict: true,\r\n\t            caseInsensitive: false,\r\n\t            paramMap: common_1.identity\r\n\t        });\r\n\t        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\r\n\t        //   '*' name\r\n\t        //   ':' name\r\n\t        //   '{' name '}'\r\n\t        //   '{' name ':' regexp '}'\r\n\t        // The regular expression is somewhat complicated due to the need to allow curly braces\r\n\t        // inside the regular expression. The placeholder regexp breaks down as follows:\r\n\t        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\r\n\t        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\r\n\t        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\r\n\t        //    [^{}\\\\]+                       - anything other than curly braces or backslash\r\n\t        //    \\\\.                            - a backslash escape\r\n\t        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\r\n\t        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\r\n\t        var checkParamErrors = function (id) {\r\n\t            if (!UrlMatcher.nameValidator.test(id))\r\n\t                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\r\n\t            if (common_1.find(_this._params, hof_1.propEq('id', id)))\r\n\t                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\r\n\t        };\r\n\t        // Split into static segments separated by path parameter placeholders.\r\n\t        // The number of segments is always 1 more than the number of parameters.\r\n\t        var matchDetails = function (m, isSearch) {\r\n\t            // IE[78] returns '' for unmatched groups instead of null\r\n\t            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\r\n\t            return {\r\n\t                id: id,\r\n\t                regexp: regexp,\r\n\t                cfg: _this.config.params[id],\r\n\t                segment: pattern.substring(last, m.index),\r\n\t                type: !regexp ? null : paramTypes.type(regexp || \"string\") || common_1.inherit(paramTypes.type(\"string\"), {\r\n\t                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\r\n\t                })\r\n\t            };\r\n\t        };\r\n\t        var p, segment;\r\n\t        while ((m = placeholder.exec(pattern))) {\r\n\t            p = matchDetails(m, false);\r\n\t            if (p.segment.indexOf('?') >= 0)\r\n\t                break; // we're into the search part\r\n\t            checkParamErrors(p.id);\r\n\t            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));\r\n\t            this._segments.push(p.segment);\r\n\t            patterns.push([p.segment, common_1.tail(this._params)]);\r\n\t            last = placeholder.lastIndex;\r\n\t        }\r\n\t        segment = pattern.substring(last);\r\n\t        // Find any search parameter names and remove them from the last segment\r\n\t        var i = segment.indexOf('?');\r\n\t        if (i >= 0) {\r\n\t            var search = segment.substring(i);\r\n\t            segment = segment.substring(0, i);\r\n\t            if (search.length > 0) {\r\n\t                last = 0;\r\n\t                while ((m = searchPlaceholder.exec(search))) {\r\n\t                    p = matchDetails(m, true);\r\n\t                    checkParamErrors(p.id);\r\n\t                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));\r\n\t                    last = placeholder.lastIndex;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this._segments.push(segment);\r\n\t        common_1.extend(this, {\r\n\t            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\r\n\t            prefix: this._segments[0]\r\n\t        });\r\n\t        Object.freeze(this);\r\n\t    }\r\n\t    /**\r\n\t     * Creates a new concatenated UrlMatcher\r\n\t     *\r\n\t     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\r\n\t     *\r\n\t     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\r\n\t     */\r\n\t    UrlMatcher.prototype.append = function (url) {\r\n\t        this._children.push(url);\r\n\t        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\r\n\t        url._cache.path = this._cache.path.concat(this);\r\n\t        return url;\r\n\t    };\r\n\t    /** @hidden */\r\n\t    UrlMatcher.prototype.isRoot = function () {\r\n\t        return this._cache.path.length === 0;\r\n\t    };\r\n\t    /** Returns the input pattern string */\r\n\t    UrlMatcher.prototype.toString = function () {\r\n\t        return this.pattern;\r\n\t    };\r\n\t    /**\r\n\t     * Tests the specified url/path against this matcher.\r\n\t     *\r\n\t     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\r\n\t     * parameter values.  Returns null if the path does not match.\r\n\t     *\r\n\t     * The returned object contains the values\r\n\t     * of any search parameters that are mentioned in the pattern, but their value may be null if\r\n\t     * they are not present in `search`. This means that search parameters are always treated\r\n\t     * as optional.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\r\n\t     *   x: '1', q: 'hello'\r\n\t     * });\r\n\t     * // returns { id: 'bob', q: 'hello', r: null }\r\n\t     * ```\r\n\t     *\r\n\t     * @param path    The URL path to match, e.g. `$location.path()`.\r\n\t     * @param search  URL search parameters, e.g. `$location.search()`.\r\n\t     * @param hash    URL hash e.g. `$location.hash()`.\r\n\t     * @param options\r\n\t     *\r\n\t     * @returns The captured parameter values.\r\n\t     */\r\n\t    UrlMatcher.prototype.exec = function (path, search, hash, options) {\r\n\t        var _this = this;\r\n\t        if (search === void 0) { search = {}; }\r\n\t        if (options === void 0) { options = {}; }\r\n\t        var match = memoizeTo(this._cache, 'pattern', function () {\r\n\t            return new RegExp([\r\n\t                '^',\r\n\t                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\r\n\t                _this.config.strict === false ? '\\/?' : '',\r\n\t                '$'\r\n\t            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\r\n\t        }).exec(path);\r\n\t        if (!match)\r\n\t            return null;\r\n\t        //options = defaults(options, { isolate: false });\r\n\t        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\r\n\t        if (nPathSegments !== match.length - 1)\r\n\t            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\r\n\t        function decodePathArray(string) {\r\n\t            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\r\n\t            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\r\n\t            var split = reverseString(string).split(/-(?!\\\\)/);\r\n\t            var allReversed = common_1.map(split, reverseString);\r\n\t            return common_1.map(allReversed, unquoteDashes).reverse();\r\n\t        }\r\n\t        for (var i = 0; i < nPathSegments; i++) {\r\n\t            var param = pathParams[i];\r\n\t            var value = match[i + 1];\r\n\t            // if the param value matches a pre-replace pair, replace the value before decoding.\r\n\t            for (var j = 0; j < param.replace.length; j++) {\r\n\t                if (param.replace[j].from === value)\r\n\t                    value = param.replace[j].to;\r\n\t            }\r\n\t            if (value && param.array === true)\r\n\t                value = decodePathArray(value);\r\n\t            if (predicates_2.isDefined(value))\r\n\t                value = param.type.decode(value);\r\n\t            values[param.id] = param.value(value);\r\n\t        }\r\n\t        searchParams.forEach(function (param) {\r\n\t            var value = search[param.id];\r\n\t            for (var j = 0; j < param.replace.length; j++) {\r\n\t                if (param.replace[j].from === value)\r\n\t                    value = param.replace[j].to;\r\n\t            }\r\n\t            if (predicates_2.isDefined(value))\r\n\t                value = param.type.decode(value);\r\n\t            values[param.id] = param.value(value);\r\n\t        });\r\n\t        if (hash)\r\n\t            values[\"#\"] = hash;\r\n\t        return values;\r\n\t    };\r\n\t    /**\r\n\t     * @hidden\r\n\t     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\r\n\t     *\r\n\t     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\r\n\t     *    pattern has no parameters, an empty array is returned.\r\n\t     */\r\n\t    UrlMatcher.prototype.parameters = function (opts) {\r\n\t        if (opts === void 0) { opts = {}; }\r\n\t        if (opts.inherit === false)\r\n\t            return this._params;\r\n\t        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\r\n\t    };\r\n\t    /**\r\n\t     * @hidden\r\n\t     * Returns a single parameter from this UrlMatcher by id\r\n\t     *\r\n\t     * @param id\r\n\t     * @param opts\r\n\t     * @returns {T|Param|any|boolean|UrlMatcher|null}\r\n\t     */\r\n\t    UrlMatcher.prototype.parameter = function (id, opts) {\r\n\t        if (opts === void 0) { opts = {}; }\r\n\t        var parent = common_1.tail(this._cache.path);\r\n\t        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\r\n\t            (opts.inherit !== false && parent && parent.parameter(id)) ||\r\n\t            null);\r\n\t    };\r\n\t    /**\r\n\t     * Validates the input parameter values against this UrlMatcher\r\n\t     *\r\n\t     * Checks an object hash of parameters to validate their correctness according to the parameter\r\n\t     * types of this `UrlMatcher`.\r\n\t     *\r\n\t     * @param params The object hash of parameters to validate.\r\n\t     * @returns Returns `true` if `params` validates, otherwise `false`.\r\n\t     */\r\n\t    UrlMatcher.prototype.validates = function (params) {\r\n\t        var _this = this;\r\n\t        var validParamVal = function (param, val) {\r\n\t            return !param || param.validates(val);\r\n\t        };\r\n\t        return common_1.pairs(params || {}).map(function (_a) {\r\n\t            var key = _a[0], val = _a[1];\r\n\t            return validParamVal(_this.parameter(key), val);\r\n\t        }).reduce(common_1.allTrueR, true);\r\n\t    };\r\n\t    /**\r\n\t     * Given a set of parameter values, creates a URL from this UrlMatcher.\r\n\t     *\r\n\t     * Creates a URL that matches this pattern by substituting the specified values\r\n\t     * for the path and search parameters.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\r\n\t     * // returns '/user/bob?q=yes'\r\n\t     * ```\r\n\t     *\r\n\t     * @param values  the values to substitute for the parameters in this pattern.\r\n\t     * @returns the formatted URL (path and optionally search part).\r\n\t     */\r\n\t    UrlMatcher.prototype.format = function (values) {\r\n\t        if (values === void 0) { values = {}; }\r\n\t        if (!this.validates(values))\r\n\t            return null;\r\n\t        // Build the full path of UrlMatchers (including all parent UrlMatchers)\r\n\t        var urlMatchers = this._cache.path.slice().concat(this);\r\n\t        // Extract all the static segments and Params into an ordered array\r\n\t        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\r\n\t        // Extract the query params into a separate array\r\n\t        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\r\n\t        /**\r\n\t         * Given a Param,\r\n\t         * Applies the parameter value, then returns details about it\r\n\t         */\r\n\t        function getDetails(param) {\r\n\t            // Normalize to typed value\r\n\t            var value = param.value(values[param.id]);\r\n\t            var isDefaultValue = param.isDefaultValue(value);\r\n\t            // Check if we're in squash mode for the parameter\r\n\t            var squash = isDefaultValue ? param.squash : false;\r\n\t            // Allow the Parameter's Type to encode the value\r\n\t            var encoded = param.type.encode(value);\r\n\t            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\r\n\t        }\r\n\t        // Build up the path-portion from the list of static segments and parameters\r\n\t        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\r\n\t            // The element is a static segment (a raw string); just append it\r\n\t            if (predicates_1.isString(x))\r\n\t                return acc + x;\r\n\t            // Otherwise, it's a Param.  Fetch details about the parameter value\r\n\t            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\r\n\t            // If squash is === true, try to remove a slash from the path\r\n\t            if (squash === true)\r\n\t                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\r\n\t            // If squash is a string, use the string for the param value\r\n\t            if (predicates_1.isString(squash))\r\n\t                return acc + squash;\r\n\t            if (squash !== false)\r\n\t                return acc; // ?\r\n\t            if (encoded == null)\r\n\t                return acc;\r\n\t            // If this parameter value is an array, encode the value using encodeDashes\r\n\t            if (predicates_1.isArray(encoded))\r\n\t                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\r\n\t            // If the parameter type is \"raw\", then do not encodeURIComponent\r\n\t            if (param.type.raw)\r\n\t                return acc + encoded;\r\n\t            // Encode the value\r\n\t            return acc + encodeURIComponent(encoded);\r\n\t        }, \"\");\r\n\t        // Build the query string by applying parameter values (array or regular)\r\n\t        // then mapping to key=value, then flattening and joining using \"&\"\r\n\t        var queryString = queryParams.map(function (param) {\r\n\t            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\r\n\t            if (encoded == null || (isDefaultValue && squash !== false))\r\n\t                return;\r\n\t            if (!predicates_1.isArray(encoded))\r\n\t                encoded = [encoded];\r\n\t            if (encoded.length === 0)\r\n\t                return;\r\n\t            if (!param.type.raw)\r\n\t                encoded = common_1.map(encoded, encodeURIComponent);\r\n\t            return encoded.map(function (val) { return (param.id + \"=\" + val); });\r\n\t        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\r\n\t        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\r\n\t        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\r\n\t    };\r\n\t    /** @hidden */\r\n\t    UrlMatcher.encodeDashes = function (str) {\r\n\t        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\r\n\t    };\r\n\t    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\r\n\t    UrlMatcher.pathSegmentsAndParams = function (matcher) {\r\n\t        var staticSegments = matcher._segments;\r\n\t        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });\r\n\t        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\r\n\t    };\r\n\t    /** @hidden Given a matcher, return an array with the matcher's query params */\r\n\t    UrlMatcher.queryParams = function (matcher) {\r\n\t        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });\r\n\t    };\r\n\t    /** @hidden */\r\n\t    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\r\n\t    return UrlMatcher;\r\n\t}());\r\n\texports.UrlMatcher = UrlMatcher;\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar type_1 = __webpack_require__(24);\r\n\t// Use tildes to pre-encode slashes.\r\n\t// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\r\n\t// and bidirectional encoding/decoding fails.\r\n\t// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\r\n\tfunction valToString(val) { return val != null ? val.toString().replace(/(~|\\/)/g, function (m) { return ({ '~': '~~', '/': '~2F' }[m]); }) : val; }\r\n\tfunction valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return ({ '~~': '~', '~2F': '/' }[m]); }) : val; }\r\n\tvar ParamTypes = (function () {\r\n\t    function ParamTypes() {\r\n\t        this.enqueue = true;\r\n\t        this.typeQueue = [];\r\n\t        this.defaultTypes = {\r\n\t            \"hash\": {\r\n\t                encode: valToString,\r\n\t                decode: valFromString,\r\n\t                is: hof_1.is(String),\r\n\t                pattern: /.*/,\r\n\t                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/\"\"\r\n\t            },\r\n\t            \"string\": {\r\n\t                encode: valToString,\r\n\t                decode: valFromString,\r\n\t                is: hof_1.is(String),\r\n\t                pattern: /[^/]*/\r\n\t            },\r\n\t            \"int\": {\r\n\t                encode: valToString,\r\n\t                decode: function (val) { return parseInt(val, 10); },\r\n\t                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\r\n\t                pattern: /-?\\d+/\r\n\t            },\r\n\t            \"bool\": {\r\n\t                encode: function (val) { return val && 1 || 0; },\r\n\t                decode: function (val) { return parseInt(val, 10) !== 0; },\r\n\t                is: hof_1.is(Boolean),\r\n\t                pattern: /0|1/\r\n\t            },\r\n\t            \"date\": {\r\n\t                encode: function (val) {\r\n\t                    return !this.is(val) ? undefined : [\r\n\t                        val.getFullYear(),\r\n\t                        ('0' + (val.getMonth() + 1)).slice(-2),\r\n\t                        ('0' + val.getDate()).slice(-2)\r\n\t                    ].join(\"-\");\r\n\t                },\r\n\t                decode: function (val) {\r\n\t                    if (this.is(val))\r\n\t                        return val;\r\n\t                    var match = this.capture.exec(val);\r\n\t                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\r\n\t                },\r\n\t                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\r\n\t                equals: function (l, r) {\r\n\t                    return ['getFullYear', 'getMonth', 'getDate']\r\n\t                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\r\n\t                },\r\n\t                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\r\n\t                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\r\n\t            },\r\n\t            \"json\": {\r\n\t                encode: common_1.toJson,\r\n\t                decode: common_1.fromJson,\r\n\t                is: hof_1.is(Object),\r\n\t                equals: common_1.equals,\r\n\t                pattern: /[^/]*/\r\n\t            },\r\n\t            \"any\": {\r\n\t                encode: common_1.identity,\r\n\t                decode: common_1.identity,\r\n\t                equals: common_1.equals,\r\n\t                pattern: /.*/\r\n\t            }\r\n\t        };\r\n\t        // Register default types. Store them in the prototype of this.types.\r\n\t        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };\r\n\t        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\r\n\t    }\r\n\t    ParamTypes.prototype.type = function (name, definition, definitionFn) {\r\n\t        if (!predicates_1.isDefined(definition))\r\n\t            return this.types[name];\r\n\t        if (this.types.hasOwnProperty(name))\r\n\t            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\r\n\t        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));\r\n\t        if (definitionFn) {\r\n\t            this.typeQueue.push({ name: name, def: definitionFn });\r\n\t            if (!this.enqueue)\r\n\t                this._flushTypeQueue();\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    ParamTypes.prototype._flushTypeQueue = function () {\r\n\t        while (this.typeQueue.length) {\r\n\t            var type = this.typeQueue.shift();\r\n\t            if (type.pattern)\r\n\t                throw new Error(\"You cannot override a type's .pattern at runtime.\");\r\n\t            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\r\n\t        }\r\n\t    };\r\n\t    return ParamTypes;\r\n\t}());\r\n\texports.ParamTypes = ParamTypes;\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\t/** @hidden */\r\n\tvar $location = coreservices_1.services.location;\r\n\t/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\r\n\tfunction regExpPrefix(re) {\r\n\t    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\r\n\t    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\r\n\t}\r\n\t/** @hidden Interpolates matched values into a String.replace()-style pattern */\r\n\tfunction interpolate(pattern, match) {\r\n\t    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\r\n\t        return match[what === '$' ? 0 : Number(what)];\r\n\t    });\r\n\t}\r\n\t/** @hidden */\r\n\tfunction handleIfMatch($injector, $stateParams, handler, match) {\r\n\t    if (!match)\r\n\t        return false;\r\n\t    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\r\n\t    return predicates_1.isDefined(result) ? result : true;\r\n\t}\r\n\t/** @hidden */\r\n\tfunction appendBasePath(url, isHtml5, absolute) {\r\n\t    var baseHref = coreservices_1.services.locationConfig.baseHref();\r\n\t    if (baseHref === '/')\r\n\t        return url;\r\n\t    if (isHtml5)\r\n\t        return baseHref.slice(0, -1) + url;\r\n\t    if (absolute)\r\n\t        return baseHref.slice(1) + url;\r\n\t    return url;\r\n\t}\r\n\t// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\r\n\t/** @hidden */\r\n\tfunction update(rules, otherwiseFn, evt) {\r\n\t    if (evt && evt.defaultPrevented)\r\n\t        return;\r\n\t    function check(rule) {\r\n\t        var handled = rule(coreservices_1.services.$injector, $location);\r\n\t        if (!handled)\r\n\t            return false;\r\n\t        if (predicates_1.isString(handled)) {\r\n\t            $location.setUrl(handled, true);\r\n\t        }\r\n\t        return true;\r\n\t    }\r\n\t    var n = rules.length;\r\n\t    for (var i = 0; i < n; i++) {\r\n\t        if (check(rules[i]))\r\n\t            return;\r\n\t    }\r\n\t    // always check otherwise last to allow dynamic updates to the set of rules\r\n\t    if (otherwiseFn)\r\n\t        check(otherwiseFn);\r\n\t}\r\n\t/**\r\n\t * Manages rules for client-side URL\r\n\t *\r\n\t * This class manages the router rules for what to do when the URL changes.\r\n\t */\r\n\tvar UrlRouterProvider = (function () {\r\n\t    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\r\n\t        /** @hidden */\r\n\t        this.rules = [];\r\n\t        /** @hidden */\r\n\t        this.interceptDeferred = false;\r\n\t        this.$urlMatcherFactory = $urlMatcherFactory;\r\n\t        this.$stateParams = $stateParams;\r\n\t    }\r\n\t    /**\r\n\t     * Registers a url handler function.\r\n\t     *\r\n\t     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\r\n\t     * a redirect, or performs some action.\r\n\t     *\r\n\t     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   // Here's an example of how you might allow case insensitive urls\r\n\t     *   $urlRouterProvider.rule(function ($injector, $location) {\r\n\t     *     var path = $location.path(),\r\n\t     *         normalized = path.toLowerCase();\r\n\t     *\r\n\t     *     if (path !== normalized) {\r\n\t     *       return normalized;\r\n\t     *     }\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param rule\r\n\t     * Handler function that takes `$injector` and `$location` services as arguments.\r\n\t     * You can use them to detect a url and return a different url as a string.\r\n\t     *\r\n\t     * @return [[$urlRouterProvider]] (`this`)\r\n\t     */\r\n\t    UrlRouterProvider.prototype.rule = function (rule) {\r\n\t        if (!predicates_1.isFunction(rule))\r\n\t            throw new Error(\"'rule' must be a function\");\r\n\t        this.rules.push(rule);\r\n\t        return this;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Remove a rule previously registered\r\n\t     *\r\n\t     * @param rule the matcher rule that was previously registered using [[rule]]\r\n\t     * @return true if the rule was found (and removed)\r\n\t     */\r\n\t    UrlRouterProvider.prototype.removeRule = function (rule) {\r\n\t        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;\r\n\t    };\r\n\t    /**\r\n\t     * Defines the path or behavior to use when no url can be matched.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   // if the path doesn't match any of the urls you configured\r\n\t     *   // otherwise will take care of routing the user to the\r\n\t     *   // specified url\r\n\t     *   $urlRouterProvider.otherwise('/index');\r\n\t     *\r\n\t     *   // Example of using function rule as param\r\n\t     *   $urlRouterProvider.otherwise(function ($injector, $location) {\r\n\t     *     return '/a/valid/url';\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param rule\r\n\t     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\r\n\t     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\r\n\t     *\r\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\r\n\t     */\r\n\t    UrlRouterProvider.prototype.otherwise = function (rule) {\r\n\t        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\r\n\t            throw new Error(\"'rule' must be a string or function\");\r\n\t        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\r\n\t        return this;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Registers a handler for a given url matching.\r\n\t     *\r\n\t     * If the handler is a string, it is\r\n\t     * treated as a redirect, and is interpolated according to the syntax of match\r\n\t     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\r\n\t     *\r\n\t     * If the handler is a function, it is injectable.\r\n\t     * It gets invoked if `$location` matches.\r\n\t     * You have the option of inject the match object as `$match`.\r\n\t     *\r\n\t     * The handler can return\r\n\t     *\r\n\t     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\r\n\t     *   will continue trying to find another one that matches.\r\n\t     * - **string** which is treated as a redirect and passed to `$location.url()`\r\n\t     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\r\n\t     *     if ($state.$current.navigable !== state ||\r\n\t     *         !equalForKeys($match, $stateParams) {\r\n\t     *      $state.transitionTo(state, $match, false);\r\n\t     *     }\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\r\n\t     * @param handler The path (or function that returns a path) that you want to redirect your user to.\r\n\t     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\r\n\t     *\r\n\t     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\r\n\t     */\r\n\t    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {\r\n\t        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }\r\n\t        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\r\n\t        var redirect, handlerIsString = predicates_1.isString(handler);\r\n\t        // @todo Queue this\r\n\t        if (predicates_1.isString(what))\r\n\t            what = $urlMatcherFactory.compile(what);\r\n\t        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\r\n\t            throw new Error(\"invalid 'handler' in when()\");\r\n\t        var strategies = {\r\n\t            matcher: function (_what, _handler) {\r\n\t                if (handlerIsString) {\r\n\t                    redirect = $urlMatcherFactory.compile(_handler);\r\n\t                    _handler = ['$match', redirect.format.bind(redirect)];\r\n\t                }\r\n\t                return common_1.extend(function () {\r\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\r\n\t                }, {\r\n\t                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\r\n\t                });\r\n\t            },\r\n\t            regex: function (_what, _handler) {\r\n\t                if (_what.global || _what.sticky)\r\n\t                    throw new Error(\"when() RegExp must not be global or sticky\");\r\n\t                if (handlerIsString) {\r\n\t                    redirect = _handler;\r\n\t                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\r\n\t                }\r\n\t                return common_1.extend(function () {\r\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\r\n\t                }, {\r\n\t                    prefix: regExpPrefix(_what)\r\n\t                });\r\n\t            }\r\n\t        };\r\n\t        var check = {\r\n\t            matcher: $urlMatcherFactory.isMatcher(what),\r\n\t            regex: what instanceof RegExp\r\n\t        };\r\n\t        for (var n in check) {\r\n\t            if (check[n]) {\r\n\t                var rule = strategies[n](what, handler);\r\n\t                ruleCallback(rule);\r\n\t                return this.rule(rule);\r\n\t            }\r\n\t        }\r\n\t        throw new Error(\"invalid 'what' in when()\");\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Disables monitoring of the URL.\r\n\t     *\r\n\t     * Call this method before UI-Router has bootstrapped.\r\n\t     * It will stop UI-Router from performing the initial url sync.\r\n\t     *\r\n\t     * This can be useful to perform some asynchronous initialization before the router starts.\r\n\t     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   // Prevent $urlRouter from automatically intercepting URL changes;\r\n\t     *   $urlRouterProvider.deferIntercept();\r\n\t     * })\r\n\t     *\r\n\t     * app.run(function (MyService, $urlRouter, $http) {\r\n\t     *   $http.get(\"/stuff\").then(function(resp) {\r\n\t     *     MyService.doStuff(resp.data);\r\n\t     *     $urlRouter.listen();\r\n\t     *     $urlRouter.sync();\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param defer Indicates whether to defer location change interception. Passing\r\n\t     *        no parameter is equivalent to `true`.\r\n\t     */\r\n\t    UrlRouterProvider.prototype.deferIntercept = function (defer) {\r\n\t        if (defer === undefined)\r\n\t            defer = true;\r\n\t        this.interceptDeferred = defer;\r\n\t    };\r\n\t    ;\r\n\t    return UrlRouterProvider;\r\n\t}());\r\n\texports.UrlRouterProvider = UrlRouterProvider;\r\n\tvar UrlRouter = (function () {\r\n\t    /** @hidden */\r\n\t    function UrlRouter(urlRouterProvider) {\r\n\t        this.urlRouterProvider = urlRouterProvider;\r\n\t        common_1.bindFunctions(UrlRouter.prototype, this, this);\r\n\t    }\r\n\t    /**\r\n\t     * Checks the current URL for a matching rule\r\n\t     *\r\n\t     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\r\n\t     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\r\n\t     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\r\n\t     * with the transition by calling `$urlRouter.sync()`.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * angular.module('app', ['ui.router'])\r\n\t     *   .run(function($rootScope, $urlRouter) {\r\n\t     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\r\n\t     *       // Halt state change from even starting\r\n\t     *       evt.preventDefault();\r\n\t     *       // Perform custom logic\r\n\t     *       var meetsRequirement = ...\r\n\t     *       // Continue with the update and state transition if logic allows\r\n\t     *       if (meetsRequirement) $urlRouter.sync();\r\n\t     *     });\r\n\t     * });\r\n\t     * ```\r\n\t     */\r\n\t    UrlRouter.prototype.sync = function () {\r\n\t        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\r\n\t    };\r\n\t    /**\r\n\t     * Starts listening for URL changes\r\n\t     *\r\n\t     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\r\n\t     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\r\n\t     */\r\n\t    UrlRouter.prototype.listen = function () {\r\n\t        var _this = this;\r\n\t        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\r\n\t    };\r\n\t    /**\r\n\t     * Internal API.\r\n\t     */\r\n\t    UrlRouter.prototype.update = function (read) {\r\n\t        if (read) {\r\n\t            this.location = $location.path();\r\n\t            return;\r\n\t        }\r\n\t        if ($location.path() === this.location)\r\n\t            return;\r\n\t        $location.setUrl(this.location, true);\r\n\t    };\r\n\t    /**\r\n\t     * Internal API.\r\n\t     *\r\n\t     * Pushes a new location to the browser history.\r\n\t     *\r\n\t     * @param urlMatcher\r\n\t     * @param params\r\n\t     * @param options\r\n\t     */\r\n\t    UrlRouter.prototype.push = function (urlMatcher, params, options) {\r\n\t        var replace = options && !!options.replace;\r\n\t        $location.setUrl(urlMatcher.format(params || {}), replace);\r\n\t    };\r\n\t    /**\r\n\t     * Builds and returns a URL with interpolated parameters\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\r\n\t     *   person: \"bob\"\r\n\t     * });\r\n\t     * // $bob == \"/about/bob\";\r\n\t     * ```\r\n\t     *\r\n\t     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\r\n\t     * @param params An object of parameter values to fill the matcher's required parameters.\r\n\t     * @param options Options object. The options are:\r\n\t     *\r\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\r\n\t     *\r\n\t     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\r\n\t     */\r\n\t    UrlRouter.prototype.href = function (urlMatcher, params, options) {\r\n\t        if (!urlMatcher.validates(params))\r\n\t            return null;\r\n\t        var url = urlMatcher.format(params);\r\n\t        options = options || { absolute: false };\r\n\t        var cfg = coreservices_1.services.locationConfig;\r\n\t        var isHtml5 = cfg.html5Mode();\r\n\t        if (!isHtml5 && url !== null) {\r\n\t            url = \"#\" + cfg.hashPrefix() + url;\r\n\t        }\r\n\t        url = appendBasePath(url, isHtml5, options.absolute);\r\n\t        if (!options.absolute || !url) {\r\n\t            return url;\r\n\t        }\r\n\t        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\r\n\t        port = (port === 80 || port === 443 ? '' : ':' + port);\r\n\t        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\r\n\t    };\r\n\t    return UrlRouter;\r\n\t}());\r\n\texports.UrlRouter = UrlRouter;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar transition_1 = __webpack_require__(11);\r\n\tvar hookRegistry_1 = __webpack_require__(15);\r\n\tvar resolve_1 = __webpack_require__(31);\r\n\tvar views_1 = __webpack_require__(32);\r\n\tvar url_1 = __webpack_require__(33);\r\n\tvar redirectTo_1 = __webpack_require__(34);\r\n\tvar onEnterExitRetain_1 = __webpack_require__(35);\r\n\tvar lazyLoadStates_1 = __webpack_require__(36);\r\n\t/**\r\n\t * The default [[Transition]] options.\r\n\t *\r\n\t * Include this object when applying custom defaults:\r\n\t * let reloadOpts = { reload: true, notify: true }\r\n\t * let options = defaults(theirOpts, customDefaults, defaultOptions);\r\n\t */\r\n\texports.defaultTransOpts = {\r\n\t    location: true,\r\n\t    relative: null,\r\n\t    inherit: false,\r\n\t    notify: true,\r\n\t    reload: false,\r\n\t    custom: {},\r\n\t    current: function () { return null; },\r\n\t    source: \"unknown\"\r\n\t};\r\n\t/**\r\n\t * This class provides services related to Transitions.\r\n\t *\r\n\t * - Most importantly, it allows global Transition Hooks to be registered.\r\n\t * - It allows the default transition error handler to be set.\r\n\t * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\r\n\t *\r\n\t * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\r\n\t */\r\n\tvar TransitionService = (function () {\r\n\t    function TransitionService(_router) {\r\n\t        this._router = _router;\r\n\t        this.$view = _router.viewService;\r\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\r\n\t        this._deregisterHookFns = {};\r\n\t        this.registerTransitionHooks();\r\n\t    }\r\n\t    /** @hidden */\r\n\t    TransitionService.prototype.registerTransitionHooks = function () {\r\n\t        var fns = this._deregisterHookFns;\r\n\t        // Wire up redirectTo hook\r\n\t        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);\r\n\t        // Wire up onExit/Retain/Enter state hooks\r\n\t        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);\r\n\t        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);\r\n\t        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);\r\n\t        // Wire up Resolve hooks\r\n\t        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);\r\n\t        fns.lazyResolve = resolve_1.registerLazyResolveState(this);\r\n\t        // Wire up the View management hooks\r\n\t        fns.loadViews = views_1.registerLoadEnteringViews(this);\r\n\t        fns.activateViews = views_1.registerActivateViews(this);\r\n\t        // After globals.current is updated at priority: 10000\r\n\t        fns.updateUrl = url_1.registerUpdateUrl(this);\r\n\t        // Lazy load state trees\r\n\t        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);\r\n\t    };\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /**\r\n\t     * Creates a new [[Transition]] object\r\n\t     *\r\n\t     * This is a factory function for creating new Transition objects.\r\n\t     * It is used internally by the [[StateService]] and should generally not be called by application code.\r\n\t     *\r\n\t     * @param fromPath the path to the current state (the from state)\r\n\t     * @param targetState the target state (destination)\r\n\t     * @returns a Transition\r\n\t     */\r\n\t    TransitionService.prototype.create = function (fromPath, targetState) {\r\n\t        return new transition_1.Transition(fromPath, targetState, this._router);\r\n\t    };\r\n\t    return TransitionService;\r\n\t}());\r\n\texports.TransitionService = TransitionService;\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module hooks */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\t/**\r\n\t * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\r\n\t *\r\n\t * Registered using `transitionService.onStart({}, eagerResolvePath);`\r\n\t *\r\n\t * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\r\n\t *\r\n\t * See [[StateDeclaration.resolve]]\r\n\t */\r\n\tvar eagerResolvePath = function (trans) {\r\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\r\n\t        .resolvePath(\"EAGER\", trans)\r\n\t        .then(common_1.noop);\r\n\t};\r\n\texports.registerEagerResolvePath = function (transitionService) {\r\n\t    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });\r\n\t};\r\n\t/**\r\n\t * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\r\n\t *\r\n\t * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\r\n\t *\r\n\t * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\r\n\t *\r\n\t * See [[StateDeclaration.resolve]]\r\n\t */\r\n\tvar lazyResolveState = function (trans, state) {\r\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\r\n\t        .subContext(state)\r\n\t        .resolvePath(\"LAZY\", trans)\r\n\t        .then(common_1.noop);\r\n\t};\r\n\texports.registerLazyResolveState = function (transitionService) {\r\n\t    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });\r\n\t};\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module hooks */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\t/**\r\n\t * A [[TransitionHookFn]] which waits for the views to load\r\n\t *\r\n\t * Registered using `transitionService.onStart({}, loadEnteringViews);`\r\n\t *\r\n\t * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\r\n\t * In angular 1, this includes loading the templates.\r\n\t */\r\n\tvar loadEnteringViews = function (transition) {\r\n\t    var enteringViews = transition.views(\"entering\");\r\n\t    if (!enteringViews.length)\r\n\t        return;\r\n\t    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\r\n\t};\r\n\texports.registerLoadEnteringViews = function (transitionService) {\r\n\t    return transitionService.onStart({}, loadEnteringViews);\r\n\t};\r\n\t/**\r\n\t * A [[TransitionHookFn]] which activates the new views when a transition is successful.\r\n\t *\r\n\t * Registered using `transitionService.onSuccess({}, activateViews);`\r\n\t *\r\n\t * After a transition is complete, this hook deactivates the old views from the previous state,\r\n\t * and activates the new views from the destination state.\r\n\t *\r\n\t * See [[ViewService]]\r\n\t */\r\n\tvar activateViews = function (transition) {\r\n\t    var enteringViews = transition.views(\"entering\");\r\n\t    var exitingViews = transition.views(\"exiting\");\r\n\t    if (!enteringViews.length && !exitingViews.length)\r\n\t        return;\r\n\t    var $view = transition.router.viewService;\r\n\t    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\r\n\t    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\r\n\t    $view.sync();\r\n\t};\r\n\texports.registerActivateViews = function (transitionService) {\r\n\t    return transitionService.onSuccess({}, activateViews);\r\n\t};\r\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * A [[TransitionHookFn]] which updates the URL after a successful transition\r\n\t *\r\n\t * Registered using `transitionService.onSuccess({}, updateUrl);`\r\n\t */\r\n\tvar updateUrl = function (transition) {\r\n\t    var options = transition.options();\r\n\t    var $state = transition.router.stateService;\r\n\t    var $urlRouter = transition.router.urlRouter;\r\n\t    // Dont update the url in these situations:\r\n\t    // The transition was triggered by a URL sync (options.source === 'url')\r\n\t    // The user doesn't want the url to update (options.location === false)\r\n\t    // The destination state, and all parents have no navigable url\r\n\t    if (options.source !== 'url' && options.location && $state.$current.navigable) {\r\n\t        var urlOptions = { replace: options.location === 'replace' };\r\n\t        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\r\n\t    }\r\n\t    $urlRouter.update(true);\r\n\t};\r\n\texports.registerUpdateUrl = function (transitionService) {\r\n\t    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\r\n\t};\r\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module hooks */ /** */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\t/**\r\n\t * A [[TransitionHookFn]] that redirects to a different state or params\r\n\t *\r\n\t * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\r\n\t *\r\n\t * See [[StateDeclaration.redirectTo]]\r\n\t */\r\n\tvar redirectToHook = function (trans) {\r\n\t    var redirect = trans.to().redirectTo;\r\n\t    if (!redirect)\r\n\t        return;\r\n\t    function handleResult(result) {\r\n\t        var $state = trans.router.stateService;\r\n\t        if (result instanceof targetState_1.TargetState)\r\n\t            return result;\r\n\t        if (predicates_1.isString(result))\r\n\t            return $state.target(result, trans.params(), trans.options());\r\n\t        if (result['state'] || result['params'])\r\n\t            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\r\n\t    }\r\n\t    if (predicates_1.isFunction(redirect)) {\r\n\t        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\r\n\t    }\r\n\t    return handleResult(redirect);\r\n\t};\r\n\texports.registerRedirectToHook = function (transitionService) {\r\n\t    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);\r\n\t};\r\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * A factory which creates an onEnter, onExit or onRetain transition hook function\r\n\t *\r\n\t * The returned function invokes the (for instance) state.onEnter hook when the\r\n\t * state is being entered.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\tfunction makeEnterExitRetainHook(hookName) {\r\n\t    return function (transition, state) {\r\n\t        var hookFn = state[hookName];\r\n\t        return hookFn(transition, state);\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * The [[TransitionStateHookFn]] for onExit\r\n\t *\r\n\t * When the state is being exited, the state's .onExit function is invoked.\r\n\t *\r\n\t * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\r\n\t *\r\n\t * See: [[IHookRegistry.onExit]]\r\n\t */\r\n\tvar onExitHook = makeEnterExitRetainHook('onExit');\r\n\texports.registerOnExitHook = function (transitionService) {\r\n\t    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);\r\n\t};\r\n\t/**\r\n\t * The [[TransitionStateHookFn]] for onRetain\r\n\t *\r\n\t * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\r\n\t *\r\n\t * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\r\n\t *\r\n\t * See: [[IHookRegistry.onRetain]]\r\n\t */\r\n\tvar onRetainHook = makeEnterExitRetainHook('onRetain');\r\n\texports.registerOnRetainHook = function (transitionService) {\r\n\t    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);\r\n\t};\r\n\t/**\r\n\t * The [[TransitionStateHookFn]] for onEnter\r\n\t *\r\n\t * When the state is being entered, the state's .onEnter function is invoked.\r\n\t *\r\n\t * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\r\n\t *\r\n\t * See: [[IHookRegistry.onEnter]]\r\n\t */\r\n\tvar onEnterHook = makeEnterExitRetainHook('onEnter');\r\n\texports.registerOnEnterHook = function (transitionService) {\r\n\t    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);\r\n\t};\r\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\t/**\r\n\t * A [[TransitionHookFn]] that lazy loads a state tree.\r\n\t *\r\n\t * When transitioning to a state \"abc\" which has a `lazyLoad` function defined:\r\n\t * - Invoke the `lazyLoad` function\r\n\t *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s\r\n\t * - Wait for the promise to resolve\r\n\t * - Deregister the original state \"abc\"\r\n\t *   - The original state definition is a placeholder for the lazy loaded states\r\n\t * - Register the new states\r\n\t * - Retry the transition\r\n\t *\r\n\t * See [[StateDeclaration.lazyLoad]]\r\n\t */\r\n\tvar lazyLoadHook = function (transition) {\r\n\t    var toState = transition.to();\r\n\t    var registry = transition.router.stateRegistry;\r\n\t    function retryOriginalTransition() {\r\n\t        if (transition.options().source === 'url') {\r\n\t            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();\r\n\t            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };\r\n\t            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {\r\n\t                var state = _a[0], params = _a[1];\r\n\t                return !!params;\r\n\t            });\r\n\t            if (matches.length) {\r\n\t                var _a = matches[0], state = _a[0], params = _a[1];\r\n\t                return transition.router.stateService.target(state, params, transition.options());\r\n\t            }\r\n\t            transition.router.urlRouter.sync();\r\n\t        }\r\n\t        // The original transition was not triggered via url sync\r\n\t        // The lazy state should be loaded now, so re-try the original transition\r\n\t        var orig = transition.targetState();\r\n\t        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());\r\n\t    }\r\n\t    /**\r\n\t     * Replace the placeholder state with the newly loaded states from the NgModule.\r\n\t     */\r\n\t    function updateStateRegistry(result) {\r\n\t        // deregister placeholder state\r\n\t        registry.deregister(transition.$to());\r\n\t        if (result && Array.isArray(result.states)) {\r\n\t            result.states.forEach(function (state) { return registry.register(state); });\r\n\t        }\r\n\t    }\r\n\t    var hook = toState.lazyLoad;\r\n\t    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\r\n\t    var promise = hook['_promise'];\r\n\t    if (!promise) {\r\n\t        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);\r\n\t        var cleanup = function () { return delete hook['_promise']; };\r\n\t        promise.then(cleanup, cleanup);\r\n\t    }\r\n\t    return promise.then(retryOriginalTransition);\r\n\t};\r\n\texports.registerLazyLoadHook = function (transitionService) {\r\n\t    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);\r\n\t};\r\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module view */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\t/**\r\n\t * The View service\r\n\t */\r\n\tvar ViewService = (function () {\r\n\t    function ViewService() {\r\n\t        var _this = this;\r\n\t        this.uiViews = [];\r\n\t        this.viewConfigs = [];\r\n\t        this._viewConfigFactories = {};\r\n\t        this.sync = function () {\r\n\t            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\r\n\t            /**\r\n\t             * Given a ui-view and a ViewConfig, determines if they \"match\".\r\n\t             *\r\n\t             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\r\n\t             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\r\n\t             *\r\n\t             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\r\n\t             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\r\n\t             *\r\n\t             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\r\n\t             *\r\n\t             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\r\n\t             * - the ui-view's name matches the ViewConfig's target name\r\n\t             * - the ui-view's context matches the ViewConfig's anchor\r\n\t             *\r\n\t             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\r\n\t             * - There exists a parent ui-view where:\r\n\t             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\r\n\t             *    - the parent ui-view's context matches the ViewConfig's anchor\r\n\t             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\r\n\t             *\r\n\t             * Example:\r\n\t             *\r\n\t             * DOM:\r\n\t             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\r\n\t             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\r\n\t             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\r\n\t             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\r\n\t             *       </div>\r\n\t             *     </div>\r\n\t             *   </div>\r\n\t             * </div>\r\n\t             *\r\n\t             * uiViews: [\r\n\t             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\r\n\t             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\r\n\t             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\r\n\t             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\r\n\t             * ]\r\n\t             *\r\n\t             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\r\n\t             *\r\n\t             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\r\n\t             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\r\n\t             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\r\n\t             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\r\n\t             *\r\n\t             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\r\n\t             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\r\n\t             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\r\n\t             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\r\n\t             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\r\n\t             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\r\n\t             *   the tail of the ui-view's fqn \"default.bar\"\r\n\t             */\r\n\t            var matches = function (uiView) { return function (viewConfig) {\r\n\t                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\r\n\t                if (uiView.$type !== viewConfig.viewDecl.$type)\r\n\t                    return false;\r\n\t                // Split names apart from both viewConfig and uiView into segments\r\n\t                var vc = viewConfig.viewDecl;\r\n\t                var vcSegments = vc.$uiViewName.split(\".\");\r\n\t                var uivSegments = uiView.fqn.split(\".\");\r\n\t                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\r\n\t                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\r\n\t                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\r\n\t                    return false;\r\n\t                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\r\n\t                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\r\n\t                var negOffset = (1 - vcSegments.length) || undefined;\r\n\t                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\r\n\t                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\r\n\t                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\r\n\t            }; };\r\n\t            // Return the number of dots in the fully qualified name\r\n\t            function uiViewDepth(uiView) {\r\n\t                return uiView.fqn.split(\".\").length;\r\n\t            }\r\n\t            // Return the ViewConfig's context's depth in the context tree.\r\n\t            function viewConfigDepth(config) {\r\n\t                var context = config.viewDecl.$context, count = 0;\r\n\t                while (++count && context.parent)\r\n\t                    context = context.parent;\r\n\t                return count;\r\n\t            }\r\n\t            // Given a depth function, returns a compare function which can return either ascending or descending order\r\n\t            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\r\n\t            var matchingConfigPair = function (uiView) {\r\n\t                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\r\n\t                if (matchingConfigs.length > 1)\r\n\t                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\r\n\t                return [uiView, matchingConfigs[0]];\r\n\t            };\r\n\t            var configureUIView = function (_a) {\r\n\t                var uiView = _a[0], viewConfig = _a[1];\r\n\t                // If a parent ui-view is reconfigured, it could destroy child ui-views.\r\n\t                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\r\n\t                if (_this.uiViews.indexOf(uiView) !== -1)\r\n\t                    uiView.configUpdated(viewConfig);\r\n\t            };\r\n\t            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\r\n\t        };\r\n\t    }\r\n\t    ViewService.prototype.rootContext = function (context) {\r\n\t        return this._rootContext = context || this._rootContext;\r\n\t    };\r\n\t    ;\r\n\t    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\r\n\t        this._viewConfigFactories[viewType] = factory;\r\n\t    };\r\n\t    ViewService.prototype.createViewConfig = function (path, decl) {\r\n\t        var cfgFactory = this._viewConfigFactories[decl.$type];\r\n\t        if (!cfgFactory)\r\n\t            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\r\n\t        var cfgs = cfgFactory(path, decl);\r\n\t        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\r\n\t    };\r\n\t    /**\r\n\t     * De-registers a ViewConfig.\r\n\t     *\r\n\t     * @param viewConfig The ViewConfig view to deregister.\r\n\t     */\r\n\t    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\r\n\t        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\r\n\t        common_1.removeFrom(this.viewConfigs, viewConfig);\r\n\t    };\r\n\t    ;\r\n\t    ViewService.prototype.activateViewConfig = function (viewConfig) {\r\n\t        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\r\n\t        this.viewConfigs.push(viewConfig);\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\r\n\t     * be updated with a template, controller, and local variables.\r\n\t     *\r\n\t     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\r\n\t     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\r\n\t     *                   of the view.\r\n\t     * @return {Function} Returns a de-registration function used when the view is destroyed.\r\n\t     */\r\n\t    ViewService.prototype.registerUIView = function (uiView) {\r\n\t        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\r\n\t        var uiViews = this.uiViews;\r\n\t        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\r\n\t        if (uiViews.filter(fqnMatches).length)\r\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\r\n\t        uiViews.push(uiView);\r\n\t        this.sync();\r\n\t        return function () {\r\n\t            var idx = uiViews.indexOf(uiView);\r\n\t            if (idx === -1) {\r\n\t                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\r\n\t                return;\r\n\t            }\r\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\r\n\t            common_1.removeFrom(uiViews)(uiView);\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Returns the list of views currently available on the page, by fully-qualified name.\r\n\t     *\r\n\t     * @return {Array} Returns an array of fully-qualified view names.\r\n\t     */\r\n\t    ViewService.prototype.available = function () {\r\n\t        return this.uiViews.map(hof_1.prop(\"fqn\"));\r\n\t    };\r\n\t    /**\r\n\t     * Returns the list of views on the page containing loaded content.\r\n\t     *\r\n\t     * @return {Array} Returns an array of fully-qualified view names.\r\n\t     */\r\n\t    ViewService.prototype.active = function () {\r\n\t        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\r\n\t    };\r\n\t    /**\r\n\t     * Normalizes a view's name from a state.views configuration block.\r\n\t     *\r\n\t     * @param context the context object (state declaration) that the view belongs to\r\n\t     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\r\n\t     *\r\n\t     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\r\n\t     */\r\n\t    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\r\n\t        if (rawViewName === void 0) { rawViewName = \"\"; }\r\n\t        // TODO: Validate incoming view name with a regexp to allow:\r\n\t        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\r\n\t        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\r\n\t        var viewAtContext = rawViewName.split(\"@\");\r\n\t        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\r\n\t        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\r\n\t        // Handle relative view-name sugar syntax.\r\n\t        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\r\n\t        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\r\n\t        if (relativeViewNameSugar) {\r\n\t            // Clobbers existing contextAnchor (rawViewName validation will fix this)\r\n\t            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\r\n\t            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\r\n\t        }\r\n\t        if (uiViewName.charAt(0) === '!') {\r\n\t            uiViewName = uiViewName.substr(1);\r\n\t            uiViewContextAnchor = \"\"; // target absolutely from root\r\n\t        }\r\n\t        // handle parent relative targeting \"^.^.^\"\r\n\t        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\r\n\t        if (relativeMatch.exec(uiViewContextAnchor)) {\r\n\t            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\r\n\t            uiViewContextAnchor = anchor.name;\r\n\t        }\r\n\t        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\r\n\t    };\r\n\t    return ViewService;\r\n\t}());\r\n\texports.ViewService = ViewService;\r\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar stateMatcher_1 = __webpack_require__(39);\r\n\tvar stateBuilder_1 = __webpack_require__(40);\r\n\tvar stateQueueManager_1 = __webpack_require__(41);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar StateRegistry = (function () {\r\n\t    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\r\n\t        this.urlRouterProvider = urlRouterProvider;\r\n\t        this.states = {};\r\n\t        this.listeners = [];\r\n\t        this.matcher = new stateMatcher_1.StateMatcher(this.states);\r\n\t        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\r\n\t        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);\r\n\t        var rootStateDef = {\r\n\t            name: '',\r\n\t            url: '^',\r\n\t            views: null,\r\n\t            params: {\r\n\t                '#': { value: null, type: 'hash', dynamic: true }\r\n\t            },\r\n\t            abstract: true\r\n\t        };\r\n\t        var _root = this._root = this.stateQueue.register(rootStateDef);\r\n\t        _root.navigable = null;\r\n\t    }\r\n\t    /**\r\n\t     * Listen for a State Registry events\r\n\t     *\r\n\t     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * let allStates = registry.get();\r\n\t     *\r\n\t     * // Later, invoke deregisterFn() to remove the listener\r\n\t     * let deregisterFn = registry.onStatesChanged((event, states) => {\r\n\t     *   switch(event) {\r\n\t     *     case: 'registered':\r\n\t     *       states.forEach(state => allStates.push(state));\r\n\t     *       break;\r\n\t     *     case: 'deregistered':\r\n\t     *       states.forEach(state => {\r\n\t     *         let idx = allStates.indexOf(state);\r\n\t     *         if (idx !== -1) allStates.splice(idx, 1);\r\n\t     *       });\r\n\t     *       break;\r\n\t     *   }\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param listener a callback function invoked when the registered states changes.\r\n\t     *        The function receives two parameters, `event` and `state`.\r\n\t     *        See [[StateRegistryListener]]\r\n\t     * @return a function that deregisters the listener\r\n\t     */\r\n\t    StateRegistry.prototype.onStatesChanged = function (listener) {\r\n\t        this.listeners.push(listener);\r\n\t        return function deregisterListener() {\r\n\t            common_1.removeFrom(this.listeners)(listener);\r\n\t        }.bind(this);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the implicit root state\r\n\t     *\r\n\t     * Gets the root of the state tree.\r\n\t     * The root state is implicitly created by UI-Router.\r\n\t     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]\r\n\t     *\r\n\t     * @return the root [[State]]\r\n\t     */\r\n\t    StateRegistry.prototype.root = function () {\r\n\t        return this._root;\r\n\t    };\r\n\t    /**\r\n\t     * Adds a state to the registry\r\n\t     *\r\n\t     * Registers a [[StateDefinition]] or queues it for registration.\r\n\t     *\r\n\t     * Note: a state will be queued if the state's parent isn't yet registered.\r\n\t     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.\r\n\t     *\r\n\t     * @param stateDefinition the definition of the state to register.\r\n\t     * @returns the internal [[State]] object.\r\n\t     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\r\n\t     *          If the state was only queued, then the object is not fully built.\r\n\t     */\r\n\t    StateRegistry.prototype.register = function (stateDefinition) {\r\n\t        return this.stateQueue.register(stateDefinition);\r\n\t    };\r\n\t    /** @hidden */\r\n\t    StateRegistry.prototype._deregisterTree = function (state) {\r\n\t        var _this = this;\r\n\t        var all = this.get().map(function (s) { return s.$$state(); });\r\n\t        var getChildren = function (states) {\r\n\t            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });\r\n\t            return children.length === 0 ? children : children.concat(getChildren(children));\r\n\t        };\r\n\t        var children = getChildren([state]);\r\n\t        var deregistered = [state].concat(children).reverse();\r\n\t        deregistered.forEach(function (state) {\r\n\t            _this.urlRouterProvider.removeRule(state._urlRule);\r\n\t            delete _this.states[state.name];\r\n\t        });\r\n\t        return deregistered;\r\n\t    };\r\n\t    /**\r\n\t     * Removes a state from the registry\r\n\t     *\r\n\t     * This removes a state from the registry.\r\n\t     * If the state has children, they are are also removed from the registry.\r\n\t     *\r\n\t     * @param stateOrName the state's name or object representation\r\n\t     * @returns {State[]} a list of removed states\r\n\t     */\r\n\t    StateRegistry.prototype.deregister = function (stateOrName) {\r\n\t        var _state = this.get(stateOrName);\r\n\t        if (!_state)\r\n\t            throw new Error(\"Can't deregister state; not found: \" + stateOrName);\r\n\t        var deregisteredStates = this._deregisterTree(_state.$$state());\r\n\t        this.listeners.forEach(function (listener) { return listener(\"deregistered\", deregisteredStates.map(function (s) { return s.self; })); });\r\n\t        return deregisteredStates;\r\n\t    };\r\n\t    StateRegistry.prototype.get = function (stateOrName, base) {\r\n\t        var _this = this;\r\n\t        if (arguments.length === 0)\r\n\t            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\r\n\t        var found = this.matcher.find(stateOrName, base);\r\n\t        return found && found.self || null;\r\n\t    };\r\n\t    StateRegistry.prototype.decorator = function (name, func) {\r\n\t        return this.builder.builder(name, func);\r\n\t    };\r\n\t    return StateRegistry;\r\n\t}());\r\n\texports.StateRegistry = StateRegistry;\r\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** for typedoc */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar glob_1 = __webpack_require__(7);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar StateMatcher = (function () {\r\n\t    function StateMatcher(_states) {\r\n\t        this._states = _states;\r\n\t    }\r\n\t    StateMatcher.prototype.isRelative = function (stateName) {\r\n\t        stateName = stateName || \"\";\r\n\t        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\r\n\t    };\r\n\t    StateMatcher.prototype.find = function (stateOrName, base) {\r\n\t        if (!stateOrName && stateOrName !== \"\")\r\n\t            return undefined;\r\n\t        var isStr = predicates_1.isString(stateOrName);\r\n\t        var name = isStr ? stateOrName : stateOrName.name;\r\n\t        if (this.isRelative(name))\r\n\t            name = this.resolvePath(name, base);\r\n\t        var state = this._states[name];\r\n\t        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\r\n\t            return state;\r\n\t        }\r\n\t        else if (isStr) {\r\n\t            var matches = common_1.values(this._states)\r\n\t                .filter(function (state) { return new glob_1.Glob(state.name).matches(name); });\r\n\t            if (matches.length > 1) {\r\n\t                console.log(\"stateMatcher.find: Found multiple matches for \" + name + \" using glob: \", matches.map(function (match) { return match.name; }));\r\n\t            }\r\n\t            return matches[0];\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    StateMatcher.prototype.resolvePath = function (name, base) {\r\n\t        if (!base)\r\n\t            throw new Error(\"No reference point given for path '\" + name + \"'\");\r\n\t        var baseState = this.find(base);\r\n\t        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\r\n\t        for (; i < pathLength; i++) {\r\n\t            if (splitName[i] === \"\" && i === 0) {\r\n\t                current = baseState;\r\n\t                continue;\r\n\t            }\r\n\t            if (splitName[i] === \"^\") {\r\n\t                if (!current.parent)\r\n\t                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\r\n\t                current = current.parent;\r\n\t                continue;\r\n\t            }\r\n\t            break;\r\n\t        }\r\n\t        var relName = splitName.slice(i).join(\".\");\r\n\t        return current.name + (current.name && relName ? \".\" : \"\") + relName;\r\n\t    };\r\n\t    return StateMatcher;\r\n\t}());\r\n\texports.StateMatcher = StateMatcher;\r\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar parseUrl = function (url) {\r\n\t    if (!predicates_1.isString(url))\r\n\t        return false;\r\n\t    var root = url.charAt(0) === '^';\r\n\t    return { val: root ? url.substring(1) : url, root: root };\r\n\t};\r\n\tfunction nameBuilder(state) {\r\n\t    if (state.lazyLoad)\r\n\t        state.name = state.self.name + \".**\";\r\n\t    return state.name;\r\n\t}\r\n\tfunction selfBuilder(state) {\r\n\t    state.self.$$state = function () { return state; };\r\n\t    return state.self;\r\n\t}\r\n\tfunction dataBuilder(state) {\r\n\t    if (state.parent && state.parent.data) {\r\n\t        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\r\n\t    }\r\n\t    return state.data;\r\n\t}\r\n\tvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\r\n\t    return function urlBuilder(state) {\r\n\t        var stateDec = state;\r\n\t        if (stateDec && stateDec.url && stateDec.lazyLoad) {\r\n\t            stateDec.url += \"{remainder:any}\"; // match any path (.*)\r\n\t        }\r\n\t        var parsed = parseUrl(stateDec.url), parent = state.parent;\r\n\t        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\r\n\t            params: state.params || {},\r\n\t            paramMap: function (paramConfig, isSearch) {\r\n\t                if (stateDec.reloadOnSearch === false && isSearch)\r\n\t                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\r\n\t                return paramConfig;\r\n\t            }\r\n\t        });\r\n\t        if (!url)\r\n\t            return null;\r\n\t        if (!$urlMatcherFactoryProvider.isMatcher(url))\r\n\t            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\r\n\t        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\r\n\t    };\r\n\t};\r\n\tvar getNavigableBuilder = function (isRoot) {\r\n\t    return function navigableBuilder(state) {\r\n\t        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\r\n\t    };\r\n\t};\r\n\tvar getParamsBuilder = function (paramTypes) {\r\n\t    return function paramsBuilder(state) {\r\n\t        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };\r\n\t        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\r\n\t        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\r\n\t        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\r\n\t    };\r\n\t};\r\n\tfunction pathBuilder(state) {\r\n\t    return state.parent ? state.parent.path.concat(state) : [state];\r\n\t}\r\n\tfunction includesBuilder(state) {\r\n\t    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\r\n\t    includes[state.name] = true;\r\n\t    return includes;\r\n\t}\r\n\t/**\r\n\t * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\r\n\t *\r\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\r\n\t * validates the `resolve` property and converts it to a [[Resolvable]] array.\r\n\t *\r\n\t * resolve: input value can be:\r\n\t *\r\n\t * {\r\n\t *   // analyzed but not injected\r\n\t *   myFooResolve: function() { return \"myFooData\"; },\r\n\t *\r\n\t *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\r\n\t *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\r\n\t *\r\n\t *   // Array split; \"DependencyName\" dep as string\r\n\t *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\r\n\t *\r\n\t *   // Array split; DependencyType dep as token (compared using ===)\r\n\t *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\r\n\t *\r\n\t *   // val.$inject used as deps\r\n\t *   // where:\r\n\t *   //     corgeResolve.$inject = [\"DependencyName\"];\r\n\t *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\r\n\t *   // then \"DependencyName\" dep as string\r\n\t *   myCorgeResolve: corgeResolve,\r\n\t *\r\n\t *  // inject service by name\r\n\t *  // When a string is found, desugar creating a resolve that injects the named service\r\n\t *   myGraultResolve: \"SomeService\"\r\n\t * }\r\n\t *\r\n\t * or:\r\n\t *\r\n\t * [\r\n\t *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\r\n\t *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\r\n\t *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\r\n\t * ]\r\n\t */\r\n\tfunction resolvablesBuilder(state) {\r\n\t    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\r\n\t    var objects2Tuples = function (resolveObj, resolvePolicies) {\r\n\t        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });\r\n\t    };\r\n\t    /** fetch DI annotations from a function or ng1-style array */\r\n\t    var annotate = function (fn) {\r\n\t        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);\r\n\t    };\r\n\t    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\r\n\t    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\r\n\t    /** true if the object looks like a provide literal, or a ng2 Provider */\r\n\t    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\r\n\t    /** true if the object looks like a tuple from obj2Tuples */\r\n\t    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\r\n\t    /** extracts the token from a Provider or provide literal */\r\n\t    var token = function (p) { return p.provide || p.token; };\r\n\t    /** Given a literal resolve or provider object, returns a Resolvable */\r\n\t    var literal2Resolvable = hof_1.pattern([\r\n\t        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\r\n\t        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\r\n\t        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\r\n\t        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\r\n\t        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],\r\n\t    ]);\r\n\t    var tuple2Resolvable = hof_1.pattern([\r\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],\r\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\r\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\r\n\t    ]);\r\n\t    var item2Resolvable = hof_1.pattern([\r\n\t        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\r\n\t        [isResolveLiteral, literal2Resolvable],\r\n\t        [isLikeNg2Provider, literal2Resolvable],\r\n\t        [isTupleFromObj, tuple2Resolvable],\r\n\t        [hof_1.val(true), function (obj) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(obj)); }]\r\n\t    ]);\r\n\t    // If resolveBlock is already an array, use it as-is.\r\n\t    // Otherwise, assume it's an object and convert to an Array of tuples\r\n\t    var decl = state.resolve;\r\n\t    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\r\n\t    return items.map(item2Resolvable);\r\n\t}\r\n\texports.resolvablesBuilder = resolvablesBuilder;\r\n\t/**\r\n\t * @internalapi A internal global service\r\n\t *\r\n\t * StateBuilder is a factory for the internal [[State]] objects.\r\n\t *\r\n\t * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\r\n\t * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\r\n\t * [[State]] object, which has an API and is used internally.\r\n\t *\r\n\t * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\r\n\t * using the [[builder]] method.\r\n\t */\r\n\tvar StateBuilder = (function () {\r\n\t    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\r\n\t        this.matcher = matcher;\r\n\t        var self = this;\r\n\t        var root = function () { return matcher.find(\"\"); };\r\n\t        var isRoot = function (state) { return state.name === \"\"; };\r\n\t        function parentBuilder(state) {\r\n\t            if (isRoot(state))\r\n\t                return null;\r\n\t            return matcher.find(self.parentName(state)) || root();\r\n\t        }\r\n\t        this.builders = {\r\n\t            name: [nameBuilder],\r\n\t            self: [selfBuilder],\r\n\t            parent: [parentBuilder],\r\n\t            data: [dataBuilder],\r\n\t            // Build a URLMatcher if necessary, either via a relative or absolute URL\r\n\t            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],\r\n\t            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\r\n\t            navigable: [getNavigableBuilder(isRoot)],\r\n\t            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],\r\n\t            // Each framework-specific ui-router implementation should define its own `views` builder\r\n\t            // e.g., src/ng1/statebuilders/views.ts\r\n\t            views: [],\r\n\t            // Keep a full path from the root down to this state as this is needed for state activation.\r\n\t            path: [pathBuilder],\r\n\t            // Speed up $state.includes() as it's used a lot\r\n\t            includes: [includesBuilder],\r\n\t            resolvables: [resolvablesBuilder]\r\n\t        };\r\n\t    }\r\n\t    /**\r\n\t     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\r\n\t     * More than one BuilderFunction can be registered for a given property.\r\n\t     *\r\n\t     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\r\n\t     *\r\n\t     * @param name The name of the State property being registered for.\r\n\t     * @param fn The BuilderFunction which will be used to build the State property\r\n\t     * @returns a function which deregisters the BuilderFunction\r\n\t     */\r\n\t    StateBuilder.prototype.builder = function (name, fn) {\r\n\t        var builders = this.builders;\r\n\t        var array = builders[name] || [];\r\n\t        // Backwards compat: if only one builder exists, return it, else return whole arary.\r\n\t        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\r\n\t            return array.length > 1 ? array : array[0];\r\n\t        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\r\n\t            return;\r\n\t        builders[name] = array;\r\n\t        builders[name].push(fn);\r\n\t        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\r\n\t    };\r\n\t    /**\r\n\t     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\r\n\t     * properties and API built.\r\n\t     *\r\n\t     * @param state an uninitialized State object\r\n\t     * @returns the built State object\r\n\t     */\r\n\t    StateBuilder.prototype.build = function (state) {\r\n\t        var _a = this, matcher = _a.matcher, builders = _a.builders;\r\n\t        var parent = this.parentName(state);\r\n\t        if (parent && !matcher.find(parent))\r\n\t            return null;\r\n\t        for (var key in builders) {\r\n\t            if (!builders.hasOwnProperty(key))\r\n\t                continue;\r\n\t            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\r\n\t            state[key] = chain(state);\r\n\t        }\r\n\t        return state;\r\n\t    };\r\n\t    StateBuilder.prototype.parentName = function (state) {\r\n\t        var name = state.name || \"\";\r\n\t        var segments = name.split('.');\r\n\t        if (segments.length > 1) {\r\n\t            if (state.parent) {\r\n\t                throw new Error(\"States that specify the 'parent:' property should not have a '.' in their name (\" + name + \")\");\r\n\t            }\r\n\t            var lastSegment = segments.pop();\r\n\t            if (lastSegment === '**')\r\n\t                segments.pop();\r\n\t            return segments.join(\".\");\r\n\t        }\r\n\t        if (!state.parent)\r\n\t            return \"\";\r\n\t        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\r\n\t    };\r\n\t    StateBuilder.prototype.name = function (state) {\r\n\t        var name = state.name;\r\n\t        if (name.indexOf('.') !== -1 || !state.parent)\r\n\t            return name;\r\n\t        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\r\n\t        return parentName ? parentName + \".\" + name : name;\r\n\t    };\r\n\t    return StateBuilder;\r\n\t}());\r\n\texports.StateBuilder = StateBuilder;\r\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar stateObject_1 = __webpack_require__(42);\r\n\tvar StateQueueManager = (function () {\r\n\t    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {\r\n\t        this.states = states;\r\n\t        this.builder = builder;\r\n\t        this.$urlRouterProvider = $urlRouterProvider;\r\n\t        this.listeners = listeners;\r\n\t        this.queue = [];\r\n\t    }\r\n\t    StateQueueManager.prototype.register = function (config) {\r\n\t        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\r\n\t        // Wrap a new object around the state so we can store our private details easily.\r\n\t        // @TODO: state = new State(extend({}, config, { ... }))\r\n\t        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {\r\n\t            self: config,\r\n\t            resolve: config.resolve || [],\r\n\t            toString: function () { return config.name; }\r\n\t        }));\r\n\t        if (!predicates_1.isString(state.name))\r\n\t            throw new Error(\"State must have a valid name\");\r\n\t        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\r\n\t            throw new Error(\"State '\" + state.name + \"' is already defined\");\r\n\t        queue.push(state);\r\n\t        if (this.$state) {\r\n\t            this.flush($state);\r\n\t        }\r\n\t        return state;\r\n\t    };\r\n\t    StateQueueManager.prototype.flush = function ($state) {\r\n\t        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\r\n\t        var registered = [], // states that got registered\r\n\t        orphans = [], // states that dodn't yet have a parent registered\r\n\t        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\r\n\t        while (queue.length > 0) {\r\n\t            var state = queue.shift();\r\n\t            var result = builder.build(state);\r\n\t            var orphanIdx = orphans.indexOf(state);\r\n\t            if (result) {\r\n\t                if (states.hasOwnProperty(state.name))\r\n\t                    throw new Error(\"State '\" + name + \"' is already defined\");\r\n\t                states[state.name] = state;\r\n\t                this.attachRoute($state, state);\r\n\t                if (orphanIdx >= 0)\r\n\t                    orphans.splice(orphanIdx, 1);\r\n\t                registered.push(state);\r\n\t                continue;\r\n\t            }\r\n\t            var prev = previousQueueLength[state.name];\r\n\t            previousQueueLength[state.name] = queue.length;\r\n\t            if (orphanIdx >= 0 && prev === queue.length) {\r\n\t                // Wait until two consecutive iterations where no additional states were dequeued successfully.\r\n\t                // throw new Error(`Cannot register orphaned state '${state.name}'`);\r\n\t                queue.push(state);\r\n\t                return states;\r\n\t            }\r\n\t            else if (orphanIdx < 0) {\r\n\t                orphans.push(state);\r\n\t            }\r\n\t            queue.push(state);\r\n\t        }\r\n\t        if (registered.length) {\r\n\t            this.listeners.forEach(function (listener) { return listener(\"registered\", registered.map(function (s) { return s.self; })); });\r\n\t        }\r\n\t        return states;\r\n\t    };\r\n\t    StateQueueManager.prototype.autoFlush = function ($state) {\r\n\t        this.$state = $state;\r\n\t        this.flush($state);\r\n\t    };\r\n\t    StateQueueManager.prototype.attachRoute = function ($state, state) {\r\n\t        var $urlRouterProvider = this.$urlRouterProvider;\r\n\t        if (state.abstract || !state.url)\r\n\t            return;\r\n\t        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\r\n\t                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\r\n\t                    $state.transitionTo(state, $match, { inherit: true, source: \"url\" });\r\n\t                }\r\n\t            }], function (rule) { return state._urlRule = rule; });\r\n\t    };\r\n\t    return StateQueueManager;\r\n\t}());\r\n\texports.StateQueueManager = StateQueueManager;\r\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\t/**\r\n\t * @ngdoc object\r\n\t * @name ui.router.state.type:State\r\n\t *\r\n\t * @description\r\n\t * Definition object for states. Includes methods for manipulating the state heirarchy.\r\n\t *\r\n\t * @param {Object} config  A configuration object hash that includes the results of user-supplied\r\n\t *        values, as well as values from `StateBuilder`.\r\n\t *\r\n\t * @returns {Object}  Returns a new `State` object.\r\n\t */\r\n\tvar State = (function () {\r\n\t    function State(config) {\r\n\t        common_1.extend(this, config);\r\n\t        // Object.freeze(this);\r\n\t    }\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.type:State#is\r\n\t     * @methodOf ui.router.state.type:State\r\n\t     *\r\n\t     * @description\r\n\t     * Compares the identity of the state against the passed value, which is either an object\r\n\t     * reference to the actual `State` instance, the original definition object passed to\r\n\t     * `$stateProvider.state()`, or the fully-qualified name.\r\n\t     *\r\n\t     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\r\n\t     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\r\n\t     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\r\n\t     */\r\n\t    State.prototype.is = function (ref) {\r\n\t        return this === ref || this.self === ref || this.fqn() === ref;\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.type:State#fqn\r\n\t     * @methodOf ui.router.state.type:State\r\n\t     *\r\n\t     * @description\r\n\t     * Returns the fully-qualified name of the state, based on its current position in the tree.\r\n\t     *\r\n\t     * @returns {string} Returns a dot-separated name of the state.\r\n\t     */\r\n\t    State.prototype.fqn = function () {\r\n\t        if (!this.parent || !(this.parent instanceof this.constructor))\r\n\t            return this.name;\r\n\t        var name = this.parent.fqn();\r\n\t        return name ? name + \".\" + this.name : this.name;\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.type:State#root\r\n\t     * @methodOf ui.router.state.type:State\r\n\t     *\r\n\t     * @description\r\n\t     * Returns the root node of this state's tree.\r\n\t     *\r\n\t     * @returns {State} The root of this state's tree.\r\n\t     */\r\n\t    State.prototype.root = function () {\r\n\t        return this.parent && this.parent.root() || this;\r\n\t    };\r\n\t    State.prototype.parameters = function (opts) {\r\n\t        opts = common_1.defaults(opts, { inherit: true });\r\n\t        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\r\n\t        return inherited.concat(common_1.values(this.params));\r\n\t    };\r\n\t    State.prototype.parameter = function (id, opts) {\r\n\t        if (opts === void 0) { opts = {}; }\r\n\t        return (this.url && this.url.parameter(id, opts) ||\r\n\t            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\r\n\t            opts.inherit && this.parent && this.parent.parameter(id));\r\n\t    };\r\n\t    State.prototype.toString = function () {\r\n\t        return this.fqn();\r\n\t    };\r\n\t    return State;\r\n\t}());\r\n\texports.State = State;\r\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar queue_1 = __webpack_require__(8);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar node_1 = __webpack_require__(21);\r\n\tvar transitionService_1 = __webpack_require__(30);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar glob_1 = __webpack_require__(7);\r\n\tvar common_2 = __webpack_require__(3);\r\n\tvar common_3 = __webpack_require__(3);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar StateService = (function () {\r\n\t    /** @hidden */\r\n\t    function StateService(router) {\r\n\t        this.router = router;\r\n\t        this.invalidCallbacks = [];\r\n\t        /** @hidden */\r\n\t        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\r\n\t            if ($error$ instanceof Error && $error$.stack) {\r\n\t                console.error($error$);\r\n\t                console.error($error$.stack);\r\n\t            }\r\n\t            else if ($error$ instanceof rejectFactory_1.Rejection) {\r\n\t                console.error($error$.toString());\r\n\t                if ($error$.detail && $error$.detail.stack)\r\n\t                    console.error($error$.detail.stack);\r\n\t            }\r\n\t            else {\r\n\t                console.error($error$);\r\n\t            }\r\n\t        };\r\n\t        var getters = ['current', '$current', 'params', 'transition'];\r\n\t        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\r\n\t        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\r\n\t    }\r\n\t    Object.defineProperty(StateService.prototype, \"transition\", {\r\n\t        get: function () { return this.router.globals.transition; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StateService.prototype, \"params\", {\r\n\t        get: function () { return this.router.globals.params; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StateService.prototype, \"current\", {\r\n\t        get: function () { return this.router.globals.current; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StateService.prototype, \"$current\", {\r\n\t        get: function () { return this.router.globals.$current; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * Handler for when [[transitionTo]] is called with an invalid state.\r\n\t     *\r\n\t     * Invokes the [[onInvalid]] callbacks, in natural order.\r\n\t     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\r\n\t     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\r\n\t     *\r\n\t     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\r\n\t     */\r\n\t    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {\r\n\t        var _this = this;\r\n\t        var fromState = pathFactory_1.PathFactory.makeTargetState(fromPath);\r\n\t        var globals = this.router.globals;\r\n\t        var latestThing = function () { return globals.transitionHistory.peekTail(); };\r\n\t        var latest = latestThing();\r\n\t        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());\r\n\t        var injector = new resolveContext_1.ResolveContext(fromPath).injector();\r\n\t        var checkForRedirect = function (result) {\r\n\t            if (!(result instanceof targetState_1.TargetState)) {\r\n\t                return;\r\n\t            }\r\n\t            var target = result;\r\n\t            // Recreate the TargetState, in case the state is now defined.\r\n\t            target = _this.target(target.identifier(), target.params(), target.options());\r\n\t            if (!target.valid())\r\n\t                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\r\n\t            if (latestThing() !== latest)\r\n\t                return rejectFactory_1.Rejection.superseded().toPromise();\r\n\t            return _this.transitionTo(target.identifier(), target.params(), target.options());\r\n\t        };\r\n\t        function invokeNextCallback() {\r\n\t            var nextCallback = callbackQueue.dequeue();\r\n\t            if (nextCallback === undefined)\r\n\t                return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();\r\n\t            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));\r\n\t            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\r\n\t        }\r\n\t        return invokeNextCallback();\r\n\t    };\r\n\t    /**\r\n\t     * Registers an Invalid State handler\r\n\t     *\r\n\t     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\r\n\t     * has been called with an invalid state reference parameter\r\n\t     *\r\n\t     * Example:\r\n\t     * ```js\r\n\t     * stateService.onInvalid(function(to, from, injector) {\r\n\t     *   if (to.name() === 'foo') {\r\n\t     *     let lazyLoader = injector.get('LazyLoadService');\r\n\t     *     return lazyLoader.load('foo')\r\n\t     *         .then(() => stateService.target('foo'));\r\n\t     *   }\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {function} callback invoked when the toState is invalid\r\n\t     *   This function receives the (invalid) toState, the fromState, and an injector.\r\n\t     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\r\n\t     *   If one is returned, it is treated as a redirect.\r\n\t     *\r\n\t     * @returns a function which deregisters the callback\r\n\t     */\r\n\t    StateService.prototype.onInvalid = function (callback) {\r\n\t        this.invalidCallbacks.push(callback);\r\n\t        return function deregisterListener() {\r\n\t            common_1.removeFrom(this.invalidCallbacks)(callback);\r\n\t        }.bind(this);\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#reload\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\r\n\t     * controllers reinstantiated, and events re-fired.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * let app angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.reload = function(){\r\n\t     *     $state.reload();\r\n\t     *   }\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * `reload()` is just an alias for:\r\n\t     * <pre>\r\n\t     * $state.transitionTo($state.current, $stateParams, {\r\n\t     *   reload: true, inherit: false, notify: true\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\r\n\t     * //and current state is 'contacts.detail.item'\r\n\t     * let app angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.reload = function(){\r\n\t     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\r\n\t     *     $state.reload('contact.detail');\r\n\t     *   }\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * @returns {promise} A promise representing the state of the new transition. See\r\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\r\n\t     */\r\n\t    StateService.prototype.reload = function (reloadState) {\r\n\t        return this.transitionTo(this.current, this.params, {\r\n\t            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\r\n\t            inherit: false,\r\n\t            notify: false\r\n\t        });\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#go\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * Convenience method for transitioning to a new state. `$state.go` calls\r\n\t     * `$state.transitionTo` internally but automatically sets options to\r\n\t     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\r\n\t     * This allows you to easily use an absolute or relative to path and specify\r\n\t     * only the parameters you'd like to update (while letting unspecified parameters\r\n\t     * inherit from the currently active ancestor states).\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * let app = angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.changeState = function () {\r\n\t     *     $state.go('contact.detail');\r\n\t     *   };\r\n\t     * });\r\n\t     * </pre>\r\n\t     * <img src='../ngdoc_assets/StateGoExamples.png'/>\r\n\t     *\r\n\t     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:\r\n\t     *\r\n\t     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\r\n\t     * - `$state.go('^')` - will go to a parent state\r\n\t     * - `$state.go('^.sibling')` - will go to a sibling state\r\n\t     * - `$state.go('.child.grandchild')` - will go to grandchild state\r\n\t     *\r\n\t     * @param {object=} params A map of the parameters that will be sent to the state,\r\n\t     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\r\n\t     * defined parameters. This allows, for example, going to a sibling state that shares parameters\r\n\t     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\r\n\t     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\r\n\t     * will get you all current parameters, etc.\r\n\t     * @param {object=} options Options object. The options are:\r\n\t     *\r\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\r\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\r\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\r\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\r\n\t     *    defines which state to be relative from.\r\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\r\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\r\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\r\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\r\n\t     *\r\n\t     * @returns {promise} A promise representing the state of the new transition.\r\n\t     *\r\n\t     * Possible success values:\r\n\t     *\r\n\t     * - $state.current\r\n\t     *\r\n\t     * <br/>Possible rejection values:\r\n\t     *\r\n\t     * - 'transition superseded' - when a newer transition has been started after this one\r\n\t     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\r\n\t     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\r\n\t     *   when a `$stateNotFound` `event.retry` promise errors.\r\n\t     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\r\n\t     * - *resolve error* - when an error has occurred with a `resolve`\r\n\t     *\r\n\t     */\r\n\t    StateService.prototype.go = function (to, params, options) {\r\n\t        var defautGoOpts = { relative: this.$current, inherit: true };\r\n\t        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\r\n\t        return this.transitionTo(to, params, transOpts);\r\n\t    };\r\n\t    ;\r\n\t    /** Factory method for creating a TargetState */\r\n\t    StateService.prototype.target = function (identifier, params, options) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        // If we're reloading, find the state object to reload from\r\n\t        if (predicates_1.isObject(options.reload) && !options.reload.name)\r\n\t            throw new Error('Invalid reload state object');\r\n\t        var reg = this.router.stateRegistry;\r\n\t        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\r\n\t        if (options.reload && !options.reloadState)\r\n\t            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\r\n\t        var stateDefinition = reg.matcher.find(identifier, options.relative);\r\n\t        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#transitionTo\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\r\n\t     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * let app = angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.changeState = function () {\r\n\t     *     $state.transitionTo('contact.detail');\r\n\t     *   };\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} to State name or state object.\r\n\t     * @param {object=} toParams A map of the parameters that will be sent to the state,\r\n\t     * will populate $stateParams.\r\n\t     * @param {object=} options Options object. The options are:\r\n\t     *\r\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\r\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\r\n\t     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\r\n\t     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\r\n\t     *    defines which state to be relative from.\r\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\r\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\r\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\r\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\r\n\t     *\r\n\t     * @returns {promise} A promise representing the state of the new transition. See\r\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\r\n\t     */\r\n\t    StateService.prototype.transitionTo = function (to, toParams, options) {\r\n\t        var _this = this;\r\n\t        if (toParams === void 0) { toParams = {}; }\r\n\t        if (options === void 0) { options = {}; }\r\n\t        var router = this.router;\r\n\t        var globals = router.globals;\r\n\t        var transHistory = globals.transitionHistory;\r\n\t        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\r\n\t        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\r\n\t        var ref = this.target(to, toParams, options);\r\n\t        var latestSuccess = globals.successfulTransitions.peekTail();\r\n\t        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };\r\n\t        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\r\n\t        if (!ref.exists())\r\n\t            return this._handleInvalidTargetState(currentPath, ref);\r\n\t        if (!ref.valid())\r\n\t            return common_1.silentRejection(ref.error());\r\n\t        /**\r\n\t         * Special handling for Ignored, Aborted, and Redirected transitions\r\n\t         *\r\n\t         * The semantics for the transition.run() promise and the StateService.transitionTo()\r\n\t         * promise differ. For instance, the run() promise may be rejected because it was\r\n\t         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\r\n\t         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\r\n\t         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\r\n\t         */\r\n\t        var rejectedTransitionHandler = function (transition) { return function (error) {\r\n\t            if (error instanceof rejectFactory_1.Rejection) {\r\n\t                if (error.type === rejectFactory_1.RejectType.IGNORED) {\r\n\t                    // Consider ignored `Transition.run()` as a successful `transitionTo`\r\n\t                    router.urlRouter.update();\r\n\t                    return coreservices_1.services.$q.when(globals.current);\r\n\t                }\r\n\t                var detail = error.detail;\r\n\t                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {\r\n\t                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\r\n\t                    // by returning the promise for the new (redirect) `Transition.run()`.\r\n\t                    var redirect = transition.redirect(detail);\r\n\t                    return redirect.run().catch(rejectedTransitionHandler(redirect));\r\n\t                }\r\n\t                if (error.type === rejectFactory_1.RejectType.ABORTED) {\r\n\t                    router.urlRouter.update();\r\n\t                }\r\n\t            }\r\n\t            var errorHandler = _this.defaultErrorHandler();\r\n\t            errorHandler(error);\r\n\t            return coreservices_1.services.$q.reject(error);\r\n\t        }; };\r\n\t        var transition = this.router.transitionService.create(currentPath, ref);\r\n\t        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\r\n\t        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\r\n\t        // Return a promise for the transition, which also has the transition object on it.\r\n\t        return common_1.extend(transitionToPromise, { transition: transition });\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#is\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\r\n\t     * but only checks for the full state name. If params is supplied then it will be\r\n\t     * tested for strict equality against the current active params object, so all params\r\n\t     * must match with none missing and no extras.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * $state.$current.name = 'contacts.details.item';\r\n\t     *\r\n\t     * // absolute name\r\n\t     * $state.is('contact.details.item'); // returns true\r\n\t     * $state.is(contactDetailItemStateObject); // returns true\r\n\t     *\r\n\t     * // relative name (. and ^), typically from a template\r\n\t     * // E.g. from the 'contacts.details' template\r\n\t     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\r\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\r\n\t     * to test against the current active state.\r\n\t     * @param {object=} options An options object.  The options are:\r\n\t     *\r\n\t     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\r\n\t     * test relative to `options.relative` state (or name).\r\n\t     *\r\n\t     * @returns {boolean} Returns true if it is the state.\r\n\t     */\r\n\t    StateService.prototype.is = function (stateOrName, params, options) {\r\n\t        options = common_1.defaults(options, { relative: this.$current });\r\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\r\n\t        if (!predicates_1.isDefined(state))\r\n\t            return undefined;\r\n\t        if (this.$current !== state)\r\n\t            return false;\r\n\t        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#includes\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * A method to determine if the current active state is equal to or is the child of the\r\n\t     * state stateName. If any params are passed then they will be tested for a match as well.\r\n\t     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\r\n\t     *\r\n\t     * @example\r\n\t     * Partial and relative names\r\n\t     * <pre>\r\n\t     * $state.$current.name = 'contacts.details.item';\r\n\t     *\r\n\t     * // Using partial names\r\n\t     * $state.includes(\"contacts\"); // returns true\r\n\t     * $state.includes(\"contacts.details\"); // returns true\r\n\t     * $state.includes(\"contacts.details.item\"); // returns true\r\n\t     * $state.includes(\"contacts.list\"); // returns false\r\n\t     * $state.includes(\"about\"); // returns false\r\n\t     *\r\n\t     * // Using relative names (. and ^), typically from a template\r\n\t     * // E.g. from the 'contacts.details' template\r\n\t     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\r\n\t     * </pre>\r\n\t     *\r\n\t     * Basic globbing patterns\r\n\t     * <pre>\r\n\t     * $state.$current.name = 'contacts.details.item.url';\r\n\t     *\r\n\t     * $state.includes(\"*.details.*.*\"); // returns true\r\n\t     * $state.includes(\"*.details.**\"); // returns true\r\n\t     * $state.includes(\"**.item.**\"); // returns true\r\n\t     * $state.includes(\"*.details.item.url\"); // returns true\r\n\t     * $state.includes(\"*.details.*.url\"); // returns true\r\n\t     * $state.includes(\"*.details.*\"); // returns false\r\n\t     * $state.includes(\"item.**\"); // returns false\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} stateOrName A partial name, relative name, glob pattern,\r\n\t     * or state object to be searched for within the current state name.\r\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\r\n\t     * that you'd like to test against the current active state.\r\n\t     * @param {object=} options An options object.  The options are:\r\n\t     *\r\n\t     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\r\n\t     * .includes will test relative to `options.relative` state (or name).\r\n\t     *\r\n\t     * @returns {boolean} Returns true if it does include the state\r\n\t     */\r\n\t    StateService.prototype.includes = function (stateOrName, params, options) {\r\n\t        options = common_1.defaults(options, { relative: this.$current });\r\n\t        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\r\n\t        if (glob) {\r\n\t            if (!glob.matches(this.$current.name))\r\n\t                return false;\r\n\t            stateOrName = this.$current.name;\r\n\t        }\r\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\r\n\t        if (!predicates_1.isDefined(state))\r\n\t            return undefined;\r\n\t        if (!predicates_1.isDefined(include[state.name]))\r\n\t            return false;\r\n\t        // @TODO Replace with Param.equals() ?\r\n\t        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#href\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * A url generation method that returns the compiled url for the given state populated with the given params.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\r\n\t     * @param {object=} params An object of parameter values to fill the state's required parameters.\r\n\t     * @param {object=} options Options object. The options are:\r\n\t     *\r\n\t     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\r\n\t     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\r\n\t     *    ancestor with a valid url).\r\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\r\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\r\n\t     *    defines which state to be relative from.\r\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\r\n\t     *\r\n\t     * @returns {string} compiled state url\r\n\t     */\r\n\t    StateService.prototype.href = function (stateOrName, params, options) {\r\n\t        var defaultHrefOpts = {\r\n\t            lossy: true,\r\n\t            inherit: true,\r\n\t            absolute: false,\r\n\t            relative: this.$current\r\n\t        };\r\n\t        options = common_1.defaults(options, defaultHrefOpts);\r\n\t        params = params || {};\r\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\r\n\t        if (!predicates_1.isDefined(state))\r\n\t            return null;\r\n\t        if (options.inherit)\r\n\t            params = this.params.$inherit(params, this.$current, state);\r\n\t        var nav = (state && options.lossy) ? state.navigable : state;\r\n\t        if (!nav || nav.url === undefined || nav.url === null) {\r\n\t            return null;\r\n\t        }\r\n\t        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\r\n\t            absolute: options.absolute\r\n\t        });\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Sets or gets the default [[transitionTo]] error handler.\r\n\t     *\r\n\t     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\r\n\t     * This includes errors caused by resolves and transition hooks.\r\n\t     *\r\n\t     * Note:\r\n\t     * This handler does not receive certain Transition rejections.\r\n\t     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\r\n\t     *\r\n\t     * The built-in default error handler logs the error to the console.\r\n\t     *\r\n\t     * You can provide your own custom handler.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * stateService.defaultErrorHandler(function() {\r\n\t     *   // Do not log transitionTo errors\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param handler a global error handler function\r\n\t     * @returns the current global error handler\r\n\t     */\r\n\t    StateService.prototype.defaultErrorHandler = function (handler) {\r\n\t        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\r\n\t    };\r\n\t    StateService.prototype.get = function (stateOrName, base) {\r\n\t        var reg = this.router.stateRegistry;\r\n\t        if (arguments.length === 0)\r\n\t            return reg.get();\r\n\t        return reg.get(stateOrName, base || this.$current);\r\n\t    };\r\n\t    return StateService;\r\n\t}());\r\n\texports.StateService = StateService;\r\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module core */ /** */\r\n\tvar stateParams_1 = __webpack_require__(45);\r\n\tvar queue_1 = __webpack_require__(8);\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/**\r\n\t * Global mutable state\r\n\t */\r\n\tvar Globals = (function () {\r\n\t    function Globals(transitionService) {\r\n\t        var _this = this;\r\n\t        this.params = new stateParams_1.StateParams();\r\n\t        this.transitionHistory = new queue_1.Queue([], 1);\r\n\t        this.successfulTransitions = new queue_1.Queue([], 1);\r\n\t        var beforeNewTransition = function ($transition$) {\r\n\t            _this.transition = $transition$;\r\n\t            _this.transitionHistory.enqueue($transition$);\r\n\t            var updateGlobalState = function () {\r\n\t                _this.successfulTransitions.enqueue($transition$);\r\n\t                _this.$current = $transition$.$to();\r\n\t                _this.current = _this.$current.self;\r\n\t                common_1.copy($transition$.params(), _this.params);\r\n\t            };\r\n\t            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\r\n\t            var clearCurrentTransition = function () { if (_this.transition === $transition$)\r\n\t                _this.transition = null; };\r\n\t            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\r\n\t        };\r\n\t        transitionService.onBefore({}, beforeNewTransition);\r\n\t    }\r\n\t    return Globals;\r\n\t}());\r\n\texports.Globals = Globals;\r\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar StateParams = (function () {\r\n\t    function StateParams(params) {\r\n\t        if (params === void 0) { params = {}; }\r\n\t        common_1.extend(this, params);\r\n\t    }\r\n\t    /**\r\n\t     * Merges a set of parameters with all parameters inherited between the common parents of the\r\n\t     * current state and a given destination state.\r\n\t     *\r\n\t     * @param {Object} newParams The set of parameters which will be composited with inherited params.\r\n\t     * @param {Object} $current Internal definition of object representing the current state.\r\n\t     * @param {Object} $to Internal definition of object representing state to transition to.\r\n\t     */\r\n\t    StateParams.prototype.$inherit = function (newParams, $current, $to) {\r\n\t        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\r\n\t        for (var i in parents) {\r\n\t            if (!parents[i] || !parents[i].params)\r\n\t                continue;\r\n\t            parentParams = Object.keys(parents[i].params);\r\n\t            if (!parentParams.length)\r\n\t                continue;\r\n\t            for (var j in parentParams) {\r\n\t                if (inheritList.indexOf(parentParams[j]) >= 0)\r\n\t                    continue;\r\n\t                inheritList.push(parentParams[j]);\r\n\t                inherited[parentParams[j]] = this[parentParams[j]];\r\n\t            }\r\n\t        }\r\n\t        return common_1.extend({}, inherited, newParams);\r\n\t    };\r\n\t    ;\r\n\t    return StateParams;\r\n\t}());\r\n\texports.StateParams = StateParams;\r\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/**\r\n\t * This module contains code for State Parameters.\r\n\t *\r\n\t * See [[ParamDeclaration]]\r\n\t * @module params\r\n\t * @preferred doc\r\n\t */\r\n\t/** for typedoc */\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(28));\r\n\t__export(__webpack_require__(45));\r\n\t__export(__webpack_require__(24));\r\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module path */ /** for typedoc */\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(20));\r\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module resolve */ /** for typedoc */\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(17));\r\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module state */ /** for typedoc */\r\n\t__export(__webpack_require__(40));\r\n\t__export(__webpack_require__(42));\r\n\t__export(__webpack_require__(39));\r\n\t__export(__webpack_require__(41));\r\n\t__export(__webpack_require__(38));\r\n\t__export(__webpack_require__(43));\r\n\t__export(__webpack_require__(14));\r\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/**\r\n\t * This module contains APIs related to a Transition.\r\n\t *\r\n\t * See [[Transition]], [[$transitions]]\r\n\t *\r\n\t * @module transition\r\n\t * @preferred\r\n\t */\r\n\t/** for typedoc */\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(10));\r\n\t__export(__webpack_require__(11));\r\n\t__export(__webpack_require__(13));\r\n\t__export(__webpack_require__(30));\r\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module url */ /** for typedoc */\r\n\t__export(__webpack_require__(27));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(29));\r\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module view */ /** for typedoc */\r\n\t__export(__webpack_require__(37));\r\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/**\r\n\t * Naive, pure JS implementation of core ui-router services\r\n\t *\r\n\t * @module justjs\r\n\t */ /** */\r\n\t__export(__webpack_require__(1));\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/** $q-like promise api */\r\n\tcoreservices_1.services.$q = (function (executor) { return new Promise(executor); });\r\n\tcoreservices_1.services.$q.when = function (val) { return Promise.resolve(val); };\r\n\tcoreservices_1.services.$q.reject = function (val) { return Promise.reject(val); };\r\n\tcoreservices_1.services.$q.defer = function () {\r\n\t    var deferred = {};\r\n\t    deferred.promise = new Promise(function (resolve, reject) {\r\n\t        deferred.resolve = resolve;\r\n\t        deferred.reject = reject;\r\n\t    });\r\n\t    return deferred;\r\n\t};\r\n\tcoreservices_1.services.$q.all = function (promises) {\r\n\t    if (predicates_1.isArray(promises)) {\r\n\t        return Promise.all(promises);\r\n\t    }\r\n\t    if (predicates_1.isObject(promises)) {\r\n\t        var p = promises;\r\n\t        // Convert promises map to promises array.\r\n\t        // When each promise resolves, map it to a tuple { key: key, val: val }\r\n\t        var objectToTuples = Object.keys(promises)\r\n\t            .map(function (key) { return p[key].then(function (val) { return ({ key: key, val: val }); }); });\r\n\t        var tuplesToObject = function (values) {\r\n\t            return values.reduce(function (acc, tuple) { acc[tuple.key] = tuple.val; return acc; }, {});\r\n\t        };\r\n\t        // Then wait for all promises to resolve, and convert them back to an object\r\n\t        return coreservices_1.services.$q.all(objectToTuples).then(tuplesToObject);\r\n\t    }\r\n\t};\r\n\t// angular1-like injector api\r\n\t// globally available injectables\r\n\tvar globals = {};\r\n\tcoreservices_1.services.$injector = {\r\n\t    get: function (name) { return globals[name]; },\r\n\t    has: function (name) { return coreservices_1.services.$injector.get(name) != null; },\r\n\t    invoke: function (fn, context, locals) {\r\n\t        var all = common_1.extend({}, globals, locals || {});\r\n\t        var params = coreservices_1.services.$injector.annotate(fn);\r\n\t        var ensureExist = common_1.assertPredicate(function (key) { return all.hasOwnProperty(key); }, function (key) { return (\"Could not find Dependency Injection token: \" + strings_1.stringify(key)); });\r\n\t        var args = params.filter(ensureExist).map(function (x) { return all[x]; });\r\n\t        if (predicates_1.isFunction(fn))\r\n\t            return fn.apply(context, args);\r\n\t        return fn.slice(-1)[0].apply(context, args);\r\n\t    },\r\n\t    // http://stackoverflow.com/questions/1007981\r\n\t    annotate: function (fn) {\r\n\t        var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n\t        var ARGUMENT_NAMES = /([^\\s,]+)/g;\r\n\t        if (!predicates_1.isInjectable(fn))\r\n\t            throw new Error(\"Not an injectable function: \" + fn);\r\n\t        if (fn && fn['$inject'])\r\n\t            return fn['$inject'];\r\n\t        if (predicates_1.isArray(fn))\r\n\t            return fn.slice(0, -1);\r\n\t        var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\r\n\t        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\r\n\t        return result || [];\r\n\t    }\r\n\t};\r\n\tvar loc = coreservices_1.services.location;\r\n\tloc.hash = function () { return \"\"; };\r\n\tloc.path = function () { return location.hash.replace(/^#/, \"\"); };\r\n\tloc.search = function () { return location.search; };\r\n\tloc.setUrl = function (url, replace) {\r\n\t    if (replace === void 0) { replace = true; }\r\n\t    if (url)\r\n\t        location.hash = url;\r\n\t};\r\n\tloc.onChange = function (cb) {\r\n\t    window.addEventListener(\"hashchange\", cb, false);\r\n\t};\r\n\tvar locCfg = coreservices_1.services.locationConfig;\r\n\tlocCfg.port = function () { return location.port; };\r\n\tlocCfg.protocol = function () { return location.protocol; };\r\n\tlocCfg.host = function () { return location.host; };\r\n\tlocCfg.baseHref = function () { return \"\"; };\r\n\tlocCfg.html5Mode = function () { return false; };\r\n\tlocCfg.hashPrefix = function () { return \"\"; };\r\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(55);\r\n\texports.NG2_INJECTOR_TOKEN = new core_1.OpaqueToken(\"NgModule Injector\");\r\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module ng2 */ /** */\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar uiRouterNgModule_1 = __webpack_require__(57);\r\n\tvar uiRouterConfig_1 = __webpack_require__(69);\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\t/**\r\n\t * Returns a function which lazy loads a nested module\r\n\t *\r\n\t * Use this function as a [[StateDeclaration.lazyLoad]] property to lazy load a state tree (an NgModule).\r\n\t *\r\n\t * @param path the path to the module source code.\r\n\t * @returns A function which takes a transition, then:\r\n\t *\r\n\t * - Gets the Injector (scoped properly for the destination state)\r\n\t * - Loads and creates the NgModule\r\n\t * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\r\n\t *\r\n\t * returns the new states array\r\n\t */\r\n\tfunction loadNgModule(path) {\r\n\t    /** Get the parent NgModule Injector (from resolves) */\r\n\t    var getNg2Injector = function (transition) {\r\n\t        return transition.injector().getAsync(resolveContext_1.NATIVE_INJECTOR_TOKEN);\r\n\t    };\r\n\t    /**\r\n\t     * Lazy loads the NgModule using the NgModuleFactoryLoader\r\n\t     *\r\n\t     * Use the parent NgModule's Injector to:\r\n\t     * - Find the correct NgModuleFactoryLoader\r\n\t     * - Load the new NgModuleFactory from the path string (async)\r\n\t     * - Create the new NgModule\r\n\t     */\r\n\t    var createNg2Module = function (path, ng2Injector) {\r\n\t        return ng2Injector.get(core_1.NgModuleFactoryLoader).load(path).then(function (factory) {\r\n\t            return factory.create(ng2Injector);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Apply the UI-Router Modules found in the lazy loaded module.\r\n\t     *\r\n\t     * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\r\n\t     *\r\n\t     * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\r\n\t     * The NgModule should include a state with the same name as the placeholder.\r\n\t     *\r\n\t     * Find the *newly loaded state* with the same name as the *placeholder state*.\r\n\t     * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\r\n\t     * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\r\n\t     */\r\n\t    function loadUIRouterModules(transition, ng2Module) {\r\n\t        var injector = ng2Module.injector;\r\n\t        var parentInjector = ng2Module.injector['parent'];\r\n\t        var uiRouter = injector.get(router_1.UIRouter);\r\n\t        var originalName = transition.to().name;\r\n\t        var originalState = uiRouter.stateRegistry.get(originalName);\r\n\t        var rootModules = injector.get(uiRouterNgModule_1.UIROUTER_ROOT_MODULE);\r\n\t        var parentRootModules = parentInjector.get(uiRouterNgModule_1.UIROUTER_ROOT_MODULE);\r\n\t        var newRootModules = rootModules.filter(function (module) { return parentRootModules.indexOf(module) === -1; });\r\n\t        if (newRootModules.length) {\r\n\t            console.log(rootModules);\r\n\t            throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\r\n\t        }\r\n\t        var modules = injector.get(uiRouterNgModule_1.UIROUTER_MODULE_TOKEN);\r\n\t        modules.forEach(function (module) { return uiRouterConfig_1.applyModuleConfig(uiRouter, injector, module); });\r\n\t        var replacementState = uiRouter.stateRegistry.get(originalName);\r\n\t        if (replacementState === originalState) {\r\n\t            throw new Error(\"The module that was loaded from \" + path + \" should have a ui-router state named '\" + originalName + \"'\");\r\n\t        }\r\n\t        // Supply the newly loaded states with the Injector from the lazy loaded NgModule\r\n\t        replacementState.$$state().resolvables.push(resolvable_1.Resolvable.fromData(resolveContext_1.NATIVE_INJECTOR_TOKEN, injector));\r\n\t        return {};\r\n\t    }\r\n\t    return function (transition) { return getNg2Injector(transition)\r\n\t        .then(function (injector) { return createNg2Module(path, injector); })\r\n\t        .then(function (moduleRef) { return loadUIRouterModules(transition, moduleRef); }); };\r\n\t}\r\n\texports.loadNgModule = loadNgModule;\r\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar directives_1 = __webpack_require__(58);\r\n\tvar uiView_1 = __webpack_require__(60);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar common_2 = __webpack_require__(67);\r\n\tvar providers_1 = __webpack_require__(68);\r\n\t/**\r\n\t * Creates UI-Router Modules\r\n\t *\r\n\t * This class has two static factory methods which create UIRouter Modules.\r\n\t * A UI-Router Module is an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\r\n\t * with support for UI-Router.\r\n\t *\r\n\t * ### UIRouter Directives\r\n\t *\r\n\t * When a UI-Router Module is imported into a `NgModule`, that module's components\r\n\t * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\r\n\t *\r\n\t * ### State Definitions\r\n\t *\r\n\t * State definitions found in the `states:` property are provided to the Dependency Injector.\r\n\t * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\r\n\t *\r\n\t * ### Entry Components\r\n\t *\r\n\t * Any routed components are added as `entryComponents:` so they will get compiled.\r\n\t */\r\n\tvar UIRouterModule = (function () {\r\n\t    function UIRouterModule() {\r\n\t    }\r\n\t    /**\r\n\t     * Creates a UI-Router Module for the root (bootstrapped) application module to import\r\n\t     *\r\n\t     * This factory function creates an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\r\n\t     * with UI-Router support.\r\n\t     *\r\n\t     * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\r\n\t     * An application should only create and import a single `NgModule` using `forRoot()`.\r\n\t     * All other modules should be created using [[UIRouterModule.forChild]].\r\n\t     *\r\n\t     * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\r\n\t     * This factory also accepts root-level router configuration.\r\n\t     * These are the only differences between `forRoot` and `forChild`.\r\n\t     *\r\n\t     * Example:\r\n\t     * ```js\r\n\t     * let routerConfig = {\r\n\t     *   otherwise: '/home',\r\n\t     *   states: [homeState, aboutState]\r\n\t     * };\r\n\t     *\r\n\t     * @ NgModule({\r\n\t     *   imports: [\r\n\t     *     BrowserModule,\r\n\t     *     UIRouterModule.forRoot(routerConfig),\r\n\t     *     FeatureModule1\r\n\t     *   ]\r\n\t     * })\r\n\t     * class MyRootAppModule {}\r\n\t     *\r\n\t     * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\r\n\t     * ```\r\n\t     *\r\n\t     * @param config declarative UI-Router configuration\r\n\t     * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\r\n\t     */\r\n\t    UIRouterModule.forRoot = function (config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        var locationStrategy = config.useHash ? common_2.HashLocationStrategy : common_2.PathLocationStrategy;\r\n\t        return {\r\n\t            ngModule: UIRouterModule,\r\n\t            providers: [\r\n\t                providers_1._UIROUTER_INSTANCE_PROVIDERS,\r\n\t                providers_1._UIROUTER_SERVICE_PROVIDERS,\r\n\t                { provide: common_2.LocationStrategy, useClass: locationStrategy }\r\n\t            ].concat(makeProviders(config, true))\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * Creates an `NgModule` for an UIRouter module\r\n\t     *\r\n\t     * This function creates an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\r\n\t     * with UI-Router support.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var homeState = { name: 'home', url: '/home', component: Home };\r\n\t     * var aboutState = { name: 'about', url: '/about', component: About };\r\n\t     *\r\n\t     * @ NgModule({\r\n\t     *   imports: [\r\n\t     *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\r\n\t     *     SharedModule,\r\n\t     *   ],\r\n\t     *   declarations: [ Home, About ],\r\n\t     * })\r\n\t     * export class AppModule {};\r\n\t     * ```\r\n\t     *\r\n\t     * @param module UI-Router module options\r\n\t     * @returns an `NgModule`\r\n\t     */\r\n\t    UIRouterModule.forChild = function (module) {\r\n\t        if (module === void 0) { module = {}; }\r\n\t        return {\r\n\t            ngModule: UIRouterModule,\r\n\t            providers: makeProviders(module, false),\r\n\t        };\r\n\t    };\r\n\t    UIRouterModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            declarations: [directives_1._UIROUTER_DIRECTIVES],\r\n\t            exports: [directives_1._UIROUTER_DIRECTIVES],\r\n\t            entryComponents: [uiView_1.UIView],\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], UIRouterModule);\r\n\t    return UIRouterModule;\r\n\t}());\r\n\texports.UIRouterModule = UIRouterModule;\r\n\tfunction makeProviders(module, forRoot) {\r\n\t    var providers = [module.configClass]\r\n\t        .filter(common_1.identity)\r\n\t        .map(function (configClass) { return ({ provide: configClass, useClass: configClass }); });\r\n\t    if (forRoot)\r\n\t        providers.push({ provide: exports.UIROUTER_ROOT_MODULE, useValue: module, multi: true });\r\n\t    providers.push({ provide: exports.UIROUTER_MODULE_TOKEN, useValue: module, multi: true });\r\n\t    providers.push({ provide: core_1.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true });\r\n\t    return providers;\r\n\t}\r\n\texports.makeProviders = makeProviders;\r\n\texports.UIROUTER_ROOT_MODULE = new core_1.OpaqueToken(\"UIRouter Root Module\");\r\n\texports.UIROUTER_MODULE_TOKEN = new core_1.OpaqueToken(\"UIRouter Module\");\r\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/**\r\n\t * The UI-Router Angular 2 directives:\r\n\t *\r\n\t * - [[UIView]]: A viewport for routed components\r\n\t * - [[UISref]]: A state ref to a target state; navigates when clicked\r\n\t * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\r\n\t *\r\n\t * @preferred @module ng2_directives\r\n\t */ /** */\r\n\tvar uiSref_1 = __webpack_require__(59);\r\n\tvar uiSrefActive_1 = __webpack_require__(65);\r\n\tvar uiView_1 = __webpack_require__(60);\r\n\tvar uiSrefStatus_1 = __webpack_require__(66);\r\n\t__export(__webpack_require__(60));\r\n\t__export(__webpack_require__(59));\r\n\t__export(__webpack_require__(66));\r\n\t__export(__webpack_require__(65));\r\n\texports._UIROUTER_DIRECTIVES = [uiSref_1.UISref, uiSref_1.AnchorUISref, uiView_1.UIView, uiSrefActive_1.UISrefActive, uiSrefStatus_1.UISrefStatus];\r\n\t/**\r\n\t * References to the UI-Router directive classes, for use within a @Component's `directives:` property\r\n\t * @deprecated use [[UIRouterModule]]\r\n\t */\r\n\texports.UIROUTER_DIRECTIVES = exports._UIROUTER_DIRECTIVES;\r\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n\t    return function (target, key) { decorator(target, key, paramIndex); }\r\n\t};\r\n\t/** @module ng2_directives */ /** */\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar core_2 = __webpack_require__(55);\r\n\tvar core_3 = __webpack_require__(55);\r\n\tvar core_4 = __webpack_require__(55);\r\n\tvar uiView_1 = __webpack_require__(60);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar globals_1 = __webpack_require__(44);\r\n\tvar Rx_1 = __webpack_require__(64);\r\n\t/** @hidden */\r\n\tvar AnchorUISref = (function () {\r\n\t    function AnchorUISref(_el, _renderer) {\r\n\t        this._el = _el;\r\n\t        this._renderer = _renderer;\r\n\t    }\r\n\t    AnchorUISref.prototype.update = function (href) {\r\n\t        this._renderer.setElementProperty(this._el.nativeElement, 'href', href);\r\n\t    };\r\n\t    AnchorUISref = __decorate([\r\n\t        core_1.Directive({ selector: 'a[uiSref]' }), \r\n\t        __metadata('design:paramtypes', [core_3.ElementRef, core_4.Renderer])\r\n\t    ], AnchorUISref);\r\n\t    return AnchorUISref;\r\n\t}());\r\n\texports.AnchorUISref = AnchorUISref;\r\n\t/**\r\n\t * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\r\n\t *\r\n\t * ### Purpose\r\n\t *\r\n\t * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\r\n\t * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\r\n\t * and optionally supply state parameter values and transition options.\r\n\t *\r\n\t * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\r\n\t *\r\n\t * ### Selector\r\n\t *\r\n\t * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\r\n\t *\r\n\t * ### Inputs\r\n\t *\r\n\t * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\r\n\t * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\r\n\t *\r\n\t * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\r\n\t *\r\n\t * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\r\n\t *\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <!-- Targets bar state' -->\r\n\t * <a uiSref=\"bar\">Bar</a>\r\n\t *\r\n\t * <!-- Assume this component's state is \"foo\".\r\n\t *      Relatively targets \"foo.child\" -->\r\n\t * <a uiSref=\".child\">Foo Child</a>\r\n\t *\r\n\t * <!-- Targets \"bar\" state and supplies parameter value -->\r\n\t * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\r\n\t *\r\n\t * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\r\n\t * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\r\n\t * ```\r\n\t */\r\n\tvar UISref = (function () {\r\n\t    function UISref(_router, parent, _anchorUISref, _globals) {\r\n\t        var _this = this;\r\n\t        this._router = _router;\r\n\t        this.parent = parent;\r\n\t        this._anchorUISref = _anchorUISref;\r\n\t        this.targetState$ = new Rx_1.ReplaySubject(1);\r\n\t        this._emit = false;\r\n\t        this._statesSub = _globals.states$.subscribe(function () { return _this.update(); });\r\n\t    }\r\n\t    Object.defineProperty(UISref.prototype, \"uiSref\", {\r\n\t        set: function (val) { this.state = val; this.update(); },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(UISref.prototype, \"uiParams\", {\r\n\t        set: function (val) { this.params = val; this.update(); },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(UISref.prototype, \"uiOptions\", {\r\n\t        set: function (val) { this.options = val; this.update(); },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    UISref.prototype.ngOnInit = function () {\r\n\t        this._emit = true;\r\n\t        this.update();\r\n\t    };\r\n\t    UISref.prototype.ngOnDestroy = function () {\r\n\t        this._statesSub.unsubscribe();\r\n\t        this.targetState$.unsubscribe();\r\n\t    };\r\n\t    UISref.prototype.update = function () {\r\n\t        var $state = this._router.stateService;\r\n\t        if (this._emit) {\r\n\t            var newTarget = $state.target(this.state, this.params, this.getOptions());\r\n\t            this.targetState$.next(newTarget);\r\n\t        }\r\n\t        if (this._anchorUISref) {\r\n\t            var href = $state.href(this.state, this.params, this.getOptions());\r\n\t            this._anchorUISref.update(href);\r\n\t        }\r\n\t    };\r\n\t    UISref.prototype.getOptions = function () {\r\n\t        var defaultOpts = {\r\n\t            relative: this.parent && this.parent.context && this.parent.context.name,\r\n\t            inherit: true,\r\n\t            source: \"sref\"\r\n\t        };\r\n\t        return common_1.extend(defaultOpts, this.options || {});\r\n\t    };\r\n\t    UISref.prototype.go = function () {\r\n\t        this._router.stateService.go(this.state, this.params, this.getOptions());\r\n\t        return false;\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Input('uiSref'), \r\n\t        __metadata('design:type', String)\r\n\t    ], UISref.prototype, \"state\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input('uiParams'), \r\n\t        __metadata('design:type', Object)\r\n\t    ], UISref.prototype, \"params\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input('uiOptions'), \r\n\t        __metadata('design:type', Object)\r\n\t    ], UISref.prototype, \"options\", void 0);\r\n\t    UISref = __decorate([\r\n\t        core_1.Directive({\r\n\t            selector: '[uiSref]',\r\n\t            host: { '(click)': 'go()' }\r\n\t        }),\r\n\t        __param(1, core_1.Inject(uiView_1.UIView.PARENT_INJECT)),\r\n\t        __param(2, core_2.Optional()),\r\n\t        __param(3, core_1.Inject(globals_1.Globals)), \r\n\t        __metadata('design:paramtypes', [router_1.UIRouter, Object, AnchorUISref, Object])\r\n\t    ], UISref);\r\n\t    return UISref;\r\n\t}());\r\n\texports.UISref = UISref;\r\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n\t    return function (target, key) { decorator(target, key, paramIndex); }\r\n\t};\r\n\t/** @module ng2_directives */ /** */\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar private_import_core_1 = __webpack_require__(61);\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar views_1 = __webpack_require__(62);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar mergeInjector_1 = __webpack_require__(63);\r\n\t/** @hidden */\r\n\tvar id = 0;\r\n\t/** @hidden */\r\n\tvar ng2ComponentInputs = function (ng2CompClass) {\r\n\t    /** Get \"@Input('foo') _foo\" inputs */\r\n\t    var props = private_import_core_1.reflector.propMetadata(ng2CompClass);\r\n\t    var _props = Object.keys(props || {})\r\n\t        .map(function (key) { return ({ key: key, annoArr: props[key] }); })\r\n\t        .reduce(function (acc, tuple) { return acc.concat(tuple.annoArr.map(function (anno) { return ({ key: tuple.key, anno: anno }); })); }, [])\r\n\t        .filter(function (tuple) { return tuple.anno instanceof core_1.Input; })\r\n\t        .map(function (tuple) { return ({ token: tuple.anno.bindingPropertyName || tuple.key, prop: tuple.key }); });\r\n\t    /** Get \"inputs: ['foo']\" inputs */\r\n\t    var inputs = private_import_core_1.reflector.annotations(ng2CompClass)\r\n\t        .filter(function (x) { return x instanceof core_1.Component && !!x.inputs; })\r\n\t        .map(function (x) { return x.inputs; })\r\n\t        .reduce(common_1.flattenR, [])\r\n\t        .map(function (input) { return ({ token: input, prop: input }); });\r\n\t    return _props.concat(inputs);\r\n\t};\r\n\t/**\r\n\t * A UI-Router viewport directive, which is filled in by a view (component) on a state.\r\n\t *\r\n\t * ### Selector\r\n\t *\r\n\t * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\r\n\t *\r\n\t * ### Purpose\r\n\t *\r\n\t * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\r\n\t * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\r\n\t * state has been activated.\r\n\t *\r\n\t * @example\r\n\t * ```js\r\n\t *\r\n\t * // This app has two states, 'foo' and 'bar'\r\n\t * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\r\n\t * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\r\n\t * ```\r\n\t * ```html\r\n\t * <!-- This ui-view will be filled in by the foo state's component or\r\n\t *      the bar state's component when the foo or bar state is activated -->\r\n\t * <ui-view></ui-view>\r\n\t * ```\r\n\t *\r\n\t * ### Named ui-views\r\n\t *\r\n\t * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\r\n\t * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\r\n\t * by a matching named view.\r\n\t *\r\n\t * @example\r\n\t * ```js\r\n\t *\r\n\t * stateRegistry.register({\r\n\t *   name: 'foo',\r\n\t *   url: '/foo',\r\n\t *   views: { header: HeaderComponent, $default: FooComponent });\r\n\t * ```\r\n\t * ```html\r\n\t * <!-- When 'foo' state is active, filled by HeaderComponent -->\r\n\t * <div ui-view=\"header\"></div>\r\n\t *\r\n\t * <!-- When 'foo' state is active, filled by FooComponent -->\r\n\t * <ui-view></ui-view>\r\n\t * ```\r\n\t */\r\n\tvar UIView = (function () {\r\n\t    function UIView(router, parent, viewContainerRef) {\r\n\t        this.router = router;\r\n\t        this.viewContainerRef = viewContainerRef;\r\n\t        this.uiViewData = {};\r\n\t        this.parent = parent;\r\n\t    }\r\n\t    Object.defineProperty(UIView.prototype, \"_name\", {\r\n\t        set: function (val) { this.name = val; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    UIView.prototype.ngOnInit = function () {\r\n\t        var parentFqn = this.parent.fqn;\r\n\t        var name = this.name || '$default';\r\n\t        this.uiViewData = {\r\n\t            $type: 'ng2',\r\n\t            id: id++,\r\n\t            name: name,\r\n\t            fqn: parentFqn ? parentFqn + \".\" + name : name,\r\n\t            creationContext: this.parent.context,\r\n\t            configUpdated: this.viewConfigUpdated.bind(this),\r\n\t            config: undefined\r\n\t        };\r\n\t        this.deregister = this.router.viewService.registerUIView(this.uiViewData);\r\n\t    };\r\n\t    UIView.prototype.disposeLast = function () {\r\n\t        if (this.componentRef)\r\n\t            this.componentRef.destroy();\r\n\t        this.componentRef = null;\r\n\t    };\r\n\t    UIView.prototype.ngOnDestroy = function () {\r\n\t        if (this.deregister)\r\n\t            this.deregister();\r\n\t        this.disposeLast();\r\n\t    };\r\n\t    /**\r\n\t     * The view service is informing us of an updated ViewConfig\r\n\t     * (usually because a transition activated some state and its views)\r\n\t     */\r\n\t    UIView.prototype.viewConfigUpdated = function (config) {\r\n\t        // The config may be undefined if there is nothing currently targeting this UIView.\r\n\t        // Dispose the current component, if there is one\r\n\t        if (!config)\r\n\t            return this.disposeLast();\r\n\t        // Only care about Ng2 configs\r\n\t        if (!(config instanceof views_1.Ng2ViewConfig))\r\n\t            return;\r\n\t        // The \"new\" viewconfig is already applied, so exit early\r\n\t        if (this.uiViewData.config === config)\r\n\t            return;\r\n\t        // This is a new ViewConfig.  Dispose the previous component\r\n\t        this.disposeLast();\r\n\t        trace_1.trace.traceUIViewConfigUpdated(this.uiViewData, config && config.viewDecl.$context);\r\n\t        this.applyUpdatedConfig(config);\r\n\t    };\r\n\t    UIView.prototype.applyUpdatedConfig = function (config) {\r\n\t        this.uiViewData.config = config;\r\n\t        // Create the Injector for the routed component\r\n\t        var context = new resolveContext_1.ResolveContext(config.path);\r\n\t        var componentInjector = this.getComponentInjector(context);\r\n\t        // Get the component class from the view declaration. TODO: allow promises?\r\n\t        var componentClass = config.viewDecl.component;\r\n\t        // Create the component\r\n\t        var compFactoryResolver = componentInjector.get(core_1.ComponentFactoryResolver);\r\n\t        var compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\r\n\t        this.componentRef = this.componentTarget.createComponent(compFactory, undefined, componentInjector);\r\n\t        // Wire resolves to @Input()s\r\n\t        this.applyInputBindings(this.componentRef, context, componentClass);\r\n\t        // TODO: wire uiCanExit and uiOnParamsChanged callbacks\r\n\t    };\r\n\t    /**\r\n\t     * Creates a new Injector for a routed component.\r\n\t     *\r\n\t     * Adds resolve values to the Injector\r\n\t     * Adds providers from the NgModule for the state\r\n\t     * Adds providers from the parent Component in the component tree\r\n\t     * Adds a PARENT_INJECT view context object\r\n\t     *\r\n\t     * @returns an Injector\r\n\t     */\r\n\t    UIView.prototype.getComponentInjector = function (context) {\r\n\t        // Map resolves to \"useValue: providers\"\r\n\t        var resolvables = context.getTokens().map(function (token) { return context.getResolvable(token); }).filter(function (r) { return r.resolved; });\r\n\t        var newProviders = resolvables.map(function (r) { return ({ provide: r.token, useValue: r.data }); });\r\n\t        var parentInject = { context: this.uiViewData.config.viewDecl.$context, fqn: this.uiViewData.fqn };\r\n\t        newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\r\n\t        var parentComponentInjector = this.viewContainerRef.injector;\r\n\t        var moduleInjector = context.getResolvable(resolveContext_1.NATIVE_INJECTOR_TOKEN).data;\r\n\t        var mergedParentInjector = new mergeInjector_1.MergeInjector(moduleInjector, parentComponentInjector);\r\n\t        return core_1.ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\r\n\t    };\r\n\t    /**\r\n\t     * Supplies component inputs with resolve data\r\n\t     *\r\n\t     * Finds component inputs which match resolves (by name) and sets the input value\r\n\t     * to the resolve data.\r\n\t     */\r\n\t    UIView.prototype.applyInputBindings = function (ref, context, componentClass) {\r\n\t        var bindings = this.uiViewData.config.viewDecl['bindings'] || {};\r\n\t        var addResolvable = function (tuple) { return ({\r\n\t            prop: tuple.prop,\r\n\t            resolvable: context.getResolvable(bindings[tuple.prop] || tuple.token)\r\n\t        }); };\r\n\t        // Supply resolve data to matching @Input('prop') or inputs: ['prop']\r\n\t        var inputTuples = ng2ComponentInputs(componentClass);\r\n\t        inputTuples.map(addResolvable)\r\n\t            .filter(function (tuple) { return tuple.resolvable && tuple.resolvable.resolved; })\r\n\t            .forEach(function (tuple) { ref.instance[tuple.prop] = tuple.resolvable.data; });\r\n\t        // Initiate change detection for the newly created component\r\n\t        ref.changeDetectorRef.detectChanges();\r\n\t    };\r\n\t    UIView.PARENT_INJECT = \"UIView.PARENT_INJECT\";\r\n\t    __decorate([\r\n\t        core_1.ViewChild('componentTarget', { read: core_1.ViewContainerRef }), \r\n\t        __metadata('design:type', core_1.ViewContainerRef)\r\n\t    ], UIView.prototype, \"componentTarget\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input('name'), \r\n\t        __metadata('design:type', String)\r\n\t    ], UIView.prototype, \"name\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input('ui-view'), \r\n\t        __metadata('design:type', String), \r\n\t        __metadata('design:paramtypes', [String])\r\n\t    ], UIView.prototype, \"_name\", null);\r\n\t    UIView = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'ui-view, [ui-view]',\r\n\t            template: \"<template #componentTarget></template>\"\r\n\t        }),\r\n\t        __param(1, core_1.Inject(UIView.PARENT_INJECT)), \r\n\t        __metadata('design:paramtypes', [router_1.UIRouter, Object, core_1.ViewContainerRef])\r\n\t    ], UIView);\r\n\t    return UIView;\r\n\t}());\r\n\texports.UIView = UIView;\r\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * @Kamshak It's imported like this in @angular/compiler as well.\r\n\t * Was going to mark it injectable as in\r\n\t * https://github.com/angular/angular/blob/42a287fabf6b035d51e00cf3006c27fec00f054a/modules/%40angular/compiler/src/ng_module_resolver.ts\r\n\t * but unfortunately not all platforms (namely browser-dynamic) provide it.\r\n\t */\r\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(55);\r\n\texports.reflector = core_1.__core_private__.reflector;\r\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar view_1 = __webpack_require__(37);\r\n\t/**\r\n\t * This is a [[StateBuilder.builder]] function for angular2 `views`.\r\n\t *\r\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\r\n\t * handles the `views` property with logic specific to ui-router-ng2.\r\n\t *\r\n\t * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\r\n\t * applies the state-level configuration to a view named `$default`.\r\n\t */\r\n\tfunction ng2ViewsBuilder(state) {\r\n\t    var views = {}, viewsObject = state.views || { \"$default\": common_1.pick(state, \"component\") };\r\n\t    common_1.forEach(viewsObject, function (config, name) {\r\n\t        name = name || \"$default\"; // Account for views: { \"\": { template... } }\r\n\t        if (Object.keys(config).length == 0)\r\n\t            return;\r\n\t        config.$type = \"ng2\";\r\n\t        config.$context = state;\r\n\t        config.$name = name;\r\n\t        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\r\n\t        config.$uiViewName = normalized.uiViewName;\r\n\t        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\r\n\t        views[name] = config;\r\n\t    });\r\n\t    return views;\r\n\t}\r\n\texports.ng2ViewsBuilder = ng2ViewsBuilder;\r\n\tvar id = 0;\r\n\tvar Ng2ViewConfig = (function () {\r\n\t    function Ng2ViewConfig(path, viewDecl) {\r\n\t        this.path = path;\r\n\t        this.viewDecl = viewDecl;\r\n\t        this.$id = id++;\r\n\t        this.loaded = true;\r\n\t    }\r\n\t    Ng2ViewConfig.prototype.load = function () {\r\n\t        return coreservices_1.services.$q.when(this);\r\n\t    };\r\n\t    return Ng2ViewConfig;\r\n\t}());\r\n\texports.Ng2ViewConfig = Ng2ViewConfig;\r\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * Merge two injectors\r\n\t *\r\n\t * This class implements the Injector ng2 interface but delegates\r\n\t * to the Injectors provided in the constructor.\r\n\t */\r\n\tvar MergeInjector = (function () {\r\n\t    function MergeInjector() {\r\n\t        var injectors = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            injectors[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        if (injectors.length < 2)\r\n\t            throw new Error(\"pass at least two injectors\");\r\n\t        this.injectors = injectors;\r\n\t    }\r\n\t    /**\r\n\t     * Get the token from the first injector which contains it.\r\n\t     *\r\n\t     * Delegates to the first Injector.get().\r\n\t     * If not found, then delegates to the second Injector (and so forth).\r\n\t     * If no Injector contains the token, return the `notFoundValue`, or throw.\r\n\t     *\r\n\t     * @param token the DI token\r\n\t     * @param notFoundValue the value to return if none of the Injectors contains the token.\r\n\t     * @returns {any} the DI value\r\n\t     */\r\n\t    MergeInjector.prototype.get = function (token, notFoundValue) {\r\n\t        for (var i = 0; i < this.injectors.length; i++) {\r\n\t            var val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\r\n\t            if (val !== MergeInjector.NOT_FOUND)\r\n\t                return val;\r\n\t        }\r\n\t        if (arguments.length >= 2)\r\n\t            return notFoundValue;\r\n\t        // This will throw the DI Injector error\r\n\t        this.injectors[0].get(token);\r\n\t    };\r\n\t    MergeInjector.NOT_FOUND = {};\r\n\t    return MergeInjector;\r\n\t}());\r\n\texports.MergeInjector = MergeInjector;\r\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n\t    return function (target, key) { decorator(target, key, paramIndex); }\r\n\t};\r\n\t/** @module ng2_directives */ /** */\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar uiSrefStatus_1 = __webpack_require__(66);\r\n\t/**\r\n\t * A directive that adds a CSS class when a `uiSref` is active.\r\n\t *\r\n\t * ### Purpose\r\n\t *\r\n\t * This directive should be paired with a [[UISref]], and is used to apply a CSS class to the element when\r\n\t * the state that the `uiSref` targets is active.\r\n\t *\r\n\t * ### Selectors\r\n\t *\r\n\t * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\r\n\t * child of the target state is active\r\n\t * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is directly active\r\n\t *\r\n\t * ### Inputs\r\n\t *\r\n\t * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when active\r\n\t *\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\r\n\t * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Foo Bar #{{bar.id}}</a>\r\n\t * ```\r\n\t */\r\n\tvar UISrefActive = (function () {\r\n\t    function UISrefActive(uiSrefStatus, rnd, host) {\r\n\t        var _this = this;\r\n\t        this._classes = [];\r\n\t        this._classesEq = [];\r\n\t        this._subscription = uiSrefStatus.uiSrefStatus.subscribe(function (next) {\r\n\t            _this._classes.forEach(function (cls) { return rnd.setElementClass(host.nativeElement, cls, next.active); });\r\n\t            _this._classesEq.forEach(function (cls) { return rnd.setElementClass(host.nativeElement, cls, next.exact); });\r\n\t        });\r\n\t    }\r\n\t    Object.defineProperty(UISrefActive.prototype, \"active\", {\r\n\t        set: function (val) { this._classes = val.split(\"\\s+\"); },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    ;\r\n\t    Object.defineProperty(UISrefActive.prototype, \"activeEq\", {\r\n\t        set: function (val) { this._classesEq = val.split(\"\\s+\"); },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    ;\r\n\t    UISrefActive.prototype.ngOnDestroy = function () {\r\n\t        this._subscription.unsubscribe();\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Input('uiSrefActive'), \r\n\t        __metadata('design:type', String), \r\n\t        __metadata('design:paramtypes', [String])\r\n\t    ], UISrefActive.prototype, \"active\", null);\r\n\t    __decorate([\r\n\t        core_1.Input('uiSrefActiveEq'), \r\n\t        __metadata('design:type', String), \r\n\t        __metadata('design:paramtypes', [String])\r\n\t    ], UISrefActive.prototype, \"activeEq\", null);\r\n\t    UISrefActive = __decorate([\r\n\t        core_1.Directive({\r\n\t            selector: '[uiSrefActive],[uiSrefActiveEq]'\r\n\t        }),\r\n\t        __param(2, core_1.Host()), \r\n\t        __metadata('design:paramtypes', [uiSrefStatus_1.UISrefStatus, core_1.Renderer, core_1.ElementRef])\r\n\t    ], UISrefActive);\r\n\t    return UISrefActive;\r\n\t}());\r\n\texports.UISrefActive = UISrefActive;\r\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n\t    return function (target, key) { decorator(target, key, paramIndex); }\r\n\t};\r\n\t/** @module ng2_directives */ /** */\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar uiSref_1 = __webpack_require__(59);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar globals_1 = __webpack_require__(44);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar Rx_1 = __webpack_require__(64);\r\n\tvar inactiveStatus = {\r\n\t    active: false,\r\n\t    exact: false,\r\n\t    entering: false,\r\n\t    exiting: false\r\n\t};\r\n\t/**\r\n\t * Returns a Predicate<PathNode[]>\r\n\t *\r\n\t * The predicate returns true when the target state (and param values)\r\n\t * match the (tail of) the path, and the path's param values\r\n\t */\r\n\tvar pathMatches = function (target) {\r\n\t    if (!target.exists())\r\n\t        return function () { return false; };\r\n\t    var state = target.$state();\r\n\t    var targetParamVals = target.params();\r\n\t    var targetPath = pathFactory_1.PathFactory.buildPath(target);\r\n\t    var paramSchema = targetPath.map(function (node) { return node.paramSchema; })\r\n\t        .reduce(common_1.unnestR, [])\r\n\t        .filter(function (param) { return targetParamVals.hasOwnProperty(param.id); });\r\n\t    return function (path) {\r\n\t        var tailNode = common_1.tail(path);\r\n\t        if (!tailNode || tailNode.state !== state)\r\n\t            return false;\r\n\t        var paramValues = pathFactory_1.PathFactory.paramValues(path);\r\n\t        return param_1.Param.equals(paramSchema, paramValues, targetParamVals);\r\n\t    };\r\n\t};\r\n\t/**\r\n\t * Given basePath: [a, b], appendPath: [c, d]),\r\n\t * Expands the path to [c], [c, d]\r\n\t * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\r\n\t */\r\n\tfunction spreadToSubPaths(basePath, appendPath) {\r\n\t    return appendPath.map(function (node) { return basePath.concat(pathFactory_1.PathFactory.subPath(appendPath, function (n) { return n.state === node.state; })); });\r\n\t}\r\n\t/**\r\n\t * Given a TransEvt (Transition event: started, success, error)\r\n\t * and a UISref Target State, return a SrefStatus object\r\n\t * which represents the current status of that Sref:\r\n\t * active, activeEq (exact match), entering, exiting\r\n\t */\r\n\tfunction getSrefStatus(event, srefTarget) {\r\n\t    var pathMatchesTarget = pathMatches(srefTarget);\r\n\t    var tc = event.trans.treeChanges();\r\n\t    var isStartEvent = event.evt === 'start';\r\n\t    var isSuccessEvent = event.evt === 'success';\r\n\t    var activePath = isSuccessEvent ? tc.to : tc.from;\r\n\t    var isActive = function () {\r\n\t        return spreadToSubPaths([], activePath)\r\n\t            .map(pathMatchesTarget)\r\n\t            .reduce(common_1.anyTrueR, false);\r\n\t    };\r\n\t    var isExact = function () {\r\n\t        return pathMatchesTarget(activePath);\r\n\t    };\r\n\t    var isEntering = function () {\r\n\t        return spreadToSubPaths(tc.retained, tc.entering)\r\n\t            .map(pathMatchesTarget)\r\n\t            .reduce(common_1.anyTrueR, false);\r\n\t    };\r\n\t    var isExiting = function () {\r\n\t        return spreadToSubPaths(tc.retained, tc.exiting)\r\n\t            .map(pathMatchesTarget)\r\n\t            .reduce(common_1.anyTrueR, false);\r\n\t    };\r\n\t    return {\r\n\t        active: isActive(),\r\n\t        exact: isExact(),\r\n\t        entering: isStartEvent ? isEntering() : false,\r\n\t        exiting: isStartEvent ? isExiting() : false,\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * A directive (which pairs with a [[UISref]]) and emits events when the UISref status changes.\r\n\t *\r\n\t * This directive is used by the [[UISrefActive]] directive.\r\n\t *\r\n\t * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`\r\n\t *\r\n\t * The values from this event can be captured and stored on a component, then applied (perhaps using ngClass).\r\n\t *\r\n\t * This API is subject to change.\r\n\t */\r\n\tvar UISrefStatus = (function () {\r\n\t    function UISrefStatus(_globals) {\r\n\t        this._globals = _globals;\r\n\t        /** current statuses of the state/params the uiSref directive is linking to */\r\n\t        this.uiSrefStatus = new core_1.EventEmitter(false);\r\n\t        this.status = Object.assign({}, inactiveStatus);\r\n\t    }\r\n\t    UISrefStatus.prototype.ngAfterContentInit = function () {\r\n\t        // Map each transition start event to a stream of:\r\n\t        // start -> (success|error)\r\n\t        var transEvents$ = this._globals.start$.switchMap(function (trans) {\r\n\t            var event = function (evt) { return ({ evt: evt, trans: trans }); };\r\n\t            var transStart$ = Rx_1.Observable.of(event(\"start\"));\r\n\t            var transResult = trans.promise.then(function () { return event(\"success\"); }, function () { return event(\"error\"); });\r\n\t            var transFinish$ = Rx_1.Observable.fromPromise(transResult);\r\n\t            return transStart$.concat(transFinish$);\r\n\t        });\r\n\t        // Watch the children UISref components and get their target states\r\n\t        var srefs$ = Rx_1.Observable.of(this.srefs.toArray()).concat(this.srefs.changes);\r\n\t        var targetStates$ = srefs$.switchMap(function (srefs) {\r\n\t            return Rx_1.Observable.combineLatest(srefs.map(function (sref) { return sref.targetState$; }));\r\n\t        });\r\n\t        // Calculate the status of each UISref based on the transition event.\r\n\t        // Reduce the statuses (if multiple) by or-ing each flag.\r\n\t        this._subscription = transEvents$.mergeMap(function (evt) {\r\n\t            return targetStates$.map(function (targets) {\r\n\t                var statuses = targets.map(function (target) { return getSrefStatus(evt, target); });\r\n\t                return statuses.reduce(function (acc, val) { return ({\r\n\t                    active: acc.active || val.active,\r\n\t                    exact: acc.active || val.active,\r\n\t                    entering: acc.active || val.active,\r\n\t                    exiting: acc.active || val.active,\r\n\t                }); });\r\n\t            });\r\n\t        }).subscribe(this._setStatus.bind(this));\r\n\t    };\r\n\t    UISrefStatus.prototype.ngOnDestroy = function () {\r\n\t        if (this._subscription)\r\n\t            this._subscription.unsubscribe();\r\n\t    };\r\n\t    UISrefStatus.prototype._setStatus = function (status) {\r\n\t        this.status = status;\r\n\t        this.uiSrefStatus.emit(status);\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Output(\"uiSrefStatus\"), \r\n\t        __metadata('design:type', Object)\r\n\t    ], UISrefStatus.prototype, \"uiSrefStatus\", void 0);\r\n\t    __decorate([\r\n\t        core_1.ContentChildren(uiSref_1.UISref, { descendants: true }), \r\n\t        __metadata('design:type', core_1.QueryList)\r\n\t    ], UISrefStatus.prototype, \"srefs\", void 0);\r\n\t    UISrefStatus = __decorate([\r\n\t        core_1.Directive({ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' }),\r\n\t        __param(0, core_1.Inject(globals_1.Globals)), \r\n\t        __metadata('design:paramtypes', [Object])\r\n\t    ], UISrefStatus);\r\n\t    return UISrefStatus;\r\n\t}());\r\n\texports.UISrefStatus = UISrefStatus;\r\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_67__;\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * # UI-Router for Angular 2\r\n\t *\r\n\t * - [ui-router-ng2 home page](https://ui-router.github.io/ng2)\r\n\t * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\r\n\t * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\r\n\t *\r\n\t * Getting started:\r\n\t *\r\n\t * - Use npm. Add a dependency on latest `ui-router-ng2`\r\n\t * - Import UI-Router classes directly from `\"ui-router-ng2\"`\r\n\t *\r\n\t * ```js\r\n\t * import {StateRegistry} from \"ui-router-ng2\";\r\n\t * ```\r\n\t *\r\n\t * - Create application states (as defined by [[Ng2StateDeclaration]]).\r\n\t *\r\n\t * ```js\r\n\t * export let state1: Ng2StateDeclaration = {\r\n\t *   name: 'state1',\r\n\t *   component: State1Component,\r\n\t *   url: '/one'\r\n\t * }\r\n\t *\r\n\t * export let state2: Ng2StateDeclaration = {\r\n\t *   name: 'state2',\r\n\t *   component: State2Component,\r\n\t *   url: '/two'\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\r\n\t *\r\n\t * ```js\r\n\t * @ NgModule({\r\n\t *   imports: [\r\n\t *     SharedModule,\r\n\t *     UIRouterModule.forChild({ states: [state1, state2 ] })\r\n\t *   ],\r\n\t *   declarations: [\r\n\t *     State1Component,\r\n\t *     State2Component,\r\n\t *   ]\r\n\t * })\r\n\t * export class MyFeatureModule {}\r\n\t * ```\r\n\t *\r\n\t * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\r\n\t * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\r\n\t *\r\n\t * ```js\r\n\t * @ NgModule({\r\n\t *   imports: [\r\n\t *     BrowserModule,\r\n\t *     UIRouterModule.forRoot({ states: [ homeState ] }),\r\n\t *     MyFeatureModule,\r\n\t *   ],\r\n\t *   declarations: [\r\n\t *     HomeComponent\r\n\t *   ]\r\n\t *   bootstrap: [ UIView ]\r\n\t * })\r\n\t * class RootAppModule {}\r\n\t *\r\n\t * browserPlatformDynamic.bootstrapModule(RootAppModule);\r\n\t * ```\r\n\t *\r\n\t * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\r\n\t * to perform any router configuration during bootstrap or lazyload.\r\n\t * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\r\n\t *\r\n\t * ```js\r\n\t * import {UIRouter} from \"ui-router-ng2\";\r\n\t *\r\n\t * @ Injectable()\r\n\t * export class MyUIRouterConfig {\r\n\t *   // Constructor is injectable\r\n\t *   constructor(uiRouter: UIRouter) {\r\n\t *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @preferred @module ng2\r\n\t */ /** */\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar stateRegistry_1 = __webpack_require__(38);\r\n\tvar stateService_1 = __webpack_require__(43);\r\n\tvar transitionService_1 = __webpack_require__(30);\r\n\tvar urlMatcherFactory_1 = __webpack_require__(26);\r\n\tvar urlRouter_1 = __webpack_require__(29);\r\n\tvar view_1 = __webpack_require__(37);\r\n\tvar uiView_1 = __webpack_require__(60);\r\n\tvar views_1 = __webpack_require__(62);\r\n\tvar uiRouterConfig_1 = __webpack_require__(69);\r\n\tvar globals_1 = __webpack_require__(44);\r\n\tvar location_1 = __webpack_require__(70);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar uiRouterNgModule_1 = __webpack_require__(57);\r\n\tvar rx_1 = __webpack_require__(71);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\t/**\r\n\t * This is a factory function for a UIRouter instance\r\n\t *\r\n\t * Creates a UIRouter instance and configures it for Angular 2, then invokes router bootstrap.\r\n\t * This function is used as an Angular 2 `useFactory` Provider.\r\n\t */\r\n\tvar uiRouterFactory = function (location, injector) {\r\n\t    var rootModules = injector.get(uiRouterNgModule_1.UIROUTER_ROOT_MODULE);\r\n\t    var modules = injector.get(uiRouterNgModule_1.UIROUTER_MODULE_TOKEN);\r\n\t    if (rootModules.length !== 1) {\r\n\t        throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\r\n\t    }\r\n\t    // ----------------- Monkey Patches ----------------\r\n\t    // Monkey patch the services.$injector to the ng2 Injector\r\n\t    coreservices_1.services.$injector.get = injector.get.bind(injector);\r\n\t    // Monkey patch the services.$location with ng2 Location implementation\r\n\t    location.init();\r\n\t    // ----------------- Create router -----------------\r\n\t    // Create a new ng2 UIRouter and configure it for ng2\r\n\t    var router = new router_1.UIRouter();\r\n\t    new rx_1.UIRouterRx(router);\r\n\t    var registry = router.stateRegistry;\r\n\t    // ----------------- Configure for ng2 -------------\r\n\t    // Apply ng2 ui-view handling code\r\n\t    router.viewService.viewConfigFactory(\"ng2\", function (path, config) { return new views_1.Ng2ViewConfig(path, config); });\r\n\t    registry.decorator('views', views_1.ng2ViewsBuilder);\r\n\t    // Apply statebuilder decorator for ng2 NgModule registration\r\n\t    registry.stateQueue.flush(router.stateService);\r\n\t    // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\r\n\t    var ng2InjectorResolvable = resolvable_1.Resolvable.fromData(resolveContext_1.NATIVE_INJECTOR_TOKEN, injector);\r\n\t    registry.root().resolvables.push(ng2InjectorResolvable);\r\n\t    // ----------------- Initialize router -------------\r\n\t    // Allow states to be registered\r\n\t    registry.stateQueue.autoFlush(router.stateService);\r\n\t    setTimeout(function () {\r\n\t        rootModules.forEach(function (moduleConfig) { return uiRouterConfig_1.applyRootModuleConfig(router, injector, moduleConfig); });\r\n\t        modules.forEach(function (moduleConfig) { return uiRouterConfig_1.applyModuleConfig(router, injector, moduleConfig); });\r\n\t        // Start monitoring the URL\r\n\t        if (!router.urlRouterProvider.interceptDeferred) {\r\n\t            router.urlRouter.listen();\r\n\t            router.urlRouter.sync();\r\n\t        }\r\n\t    });\r\n\t    return router;\r\n\t};\r\n\texports._UIROUTER_INSTANCE_PROVIDERS = [\r\n\t    { provide: router_1.UIRouter, useFactory: uiRouterFactory, deps: [location_1.UIRouterLocation, core_1.Injector] },\r\n\t    { provide: location_1.UIRouterLocation, useClass: location_1.UIRouterLocation },\r\n\t    { provide: uiView_1.UIView.PARENT_INJECT, useFactory: function (r) { return { fqn: null, context: r.root() }; }, deps: [stateRegistry_1.StateRegistry] },\r\n\t];\r\n\texports._UIROUTER_SERVICE_PROVIDERS = [\r\n\t    { provide: stateService_1.StateService, useFactory: function (r) { return r.stateService; }, deps: [router_1.UIRouter] },\r\n\t    { provide: transitionService_1.TransitionService, useFactory: function (r) { return r.transitionService; }, deps: [router_1.UIRouter] },\r\n\t    { provide: urlMatcherFactory_1.UrlMatcherFactory, useFactory: function (r) { return r.urlMatcherFactory; }, deps: [router_1.UIRouter] },\r\n\t    { provide: urlRouter_1.UrlRouter, useFactory: function (r) { return r.urlRouter; }, deps: [router_1.UIRouter] },\r\n\t    { provide: view_1.ViewService, useFactory: function (r) { return r.viewService; }, deps: [router_1.UIRouter] },\r\n\t    { provide: stateRegistry_1.StateRegistry, useFactory: function (r) { return r.stateRegistry; }, deps: [router_1.UIRouter] },\r\n\t    { provide: globals_1.Globals, useFactory: function (r) { return r.globals; }, deps: [router_1.UIRouter] },\r\n\t];\r\n\t/**\r\n\t * The UI-Router providers, for use in your application bootstrap\r\n\t *\r\n\t * @deprecated use [[UIRouterModule.forRoot]]\r\n\t */\r\n\texports.UIROUTER_PROVIDERS = exports._UIROUTER_INSTANCE_PROVIDERS.concat(exports._UIROUTER_SERVICE_PROVIDERS);\r\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tfunction applyModuleConfig(uiRouter, injector, options) {\r\n\t    if (options.configClass) {\r\n\t        injector.get(options.configClass);\r\n\t    }\r\n\t    var states = options.states || [];\r\n\t    states.forEach(function (state) { return uiRouter.stateRegistry.register(state); });\r\n\t}\r\n\texports.applyModuleConfig = applyModuleConfig;\r\n\tfunction applyRootModuleConfig(uiRouter, injector, config) {\r\n\t    if (predicates_1.isDefined(config.deferIntercept)) {\r\n\t        uiRouter.urlRouterProvider.deferIntercept(config.deferIntercept);\r\n\t    }\r\n\t    if (predicates_1.isDefined(config.otherwise)) {\r\n\t        if (predicates_1.isDefined(config.otherwise['state'])) {\r\n\t            uiRouter.urlRouterProvider.otherwise(function () {\r\n\t                var _a = config.otherwise, state = _a.state, params = _a.params;\r\n\t                uiRouter.stateService.go(state, params, { source: \"otherwise\" });\r\n\t                return null;\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            uiRouter.urlRouterProvider.otherwise(config.otherwise);\r\n\t        }\r\n\t    }\r\n\t}\r\n\texports.applyRootModuleConfig = applyRootModuleConfig;\r\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\t/** @module ng2 */ /** */\r\n\tvar common_1 = __webpack_require__(67);\r\n\tvar core_1 = __webpack_require__(55);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar common_2 = __webpack_require__(3);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar splitOnHash = strings_1.beforeAfterSubstr(\"#\");\r\n\tvar splitOnEquals = strings_1.beforeAfterSubstr(\"=\");\r\n\tvar splitOnQuestionMark = strings_1.beforeAfterSubstr(\"?\");\r\n\tvar UIRouterLocation = (function () {\r\n\t    function UIRouterLocation(locationStrategy, platformLocation) {\r\n\t        this.locationStrategy = locationStrategy;\r\n\t        this.platformLocation = platformLocation;\r\n\t        this.hashPrefix = \"\";\r\n\t        this.isHashBang = locationStrategy instanceof common_1.HashLocationStrategy;\r\n\t    }\r\n\t    UIRouterLocation.prototype.init = function () {\r\n\t        var _this = this;\r\n\t        var loc = coreservices_1.services.location;\r\n\t        var locSt = this.locationStrategy;\r\n\t        if (this.isHashBang) {\r\n\t            loc.path = function () {\r\n\t                return splitOnHash(splitOnQuestionMark(locSt.path())[0])[0];\r\n\t            };\r\n\t            loc.hash = function () {\r\n\t                return splitOnHash(splitOnHash(_this.platformLocation.hash)[1])[1];\r\n\t            };\r\n\t        }\r\n\t        else {\r\n\t            var basepath = locSt.getBaseHref();\r\n\t            var basepathRegExp_1 = new RegExp(\"^\" + basepath);\r\n\t            var replace_1 = (basepath[basepath.length - 1] === '/') ? \"/\" : \"\";\r\n\t            loc.path = function () {\r\n\t                return splitOnHash(splitOnQuestionMark(locSt.path())[0])[0].replace(basepathRegExp_1, replace_1);\r\n\t            };\r\n\t            loc.hash = function () {\r\n\t                return splitOnHash(_this.platformLocation.hash)[1];\r\n\t            };\r\n\t        }\r\n\t        loc.search = (function () {\r\n\t            var queryString = splitOnHash(splitOnQuestionMark(locSt.path())[1])[0];\r\n\t            return queryString.split(\"&\").map(function (kv) { return splitOnEquals(kv); }).reduce(common_2.applyPairs, {});\r\n\t        });\r\n\t        loc.setUrl = function (url, replace) {\r\n\t            if (replace === void 0) { replace = false; }\r\n\t            if (predicates_1.isDefined(url)) {\r\n\t                var split = splitOnQuestionMark(url);\r\n\t                if (replace) {\r\n\t                    locSt.replaceState(null, null, split[0], split[1]);\r\n\t                }\r\n\t                else {\r\n\t                    locSt.pushState(null, null, split[0], split[1]);\r\n\t                }\r\n\t            }\r\n\t        };\r\n\t        loc.onChange = function (cb) { return locSt.onPopState(cb); };\r\n\t        var locCfg = coreservices_1.services.locationConfig;\r\n\t        locCfg.port = function () { return null; };\r\n\t        locCfg.protocol = function () { return null; };\r\n\t        locCfg.host = function () { return null; };\r\n\t        locCfg.baseHref = function () { return locSt.getBaseHref(); };\r\n\t        locCfg.html5Mode = function () { return !_this.isHashBang; };\r\n\t        locCfg.hashPrefix = function (newprefix) {\r\n\t            if (predicates_1.isDefined(newprefix)) {\r\n\t                _this.hashPrefix = newprefix;\r\n\t            }\r\n\t            return _this.hashPrefix;\r\n\t        };\r\n\t    };\r\n\t    UIRouterLocation = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [common_1.LocationStrategy, common_1.PlatformLocation])\r\n\t    ], UIRouterLocation);\r\n\t    return UIRouterLocation;\r\n\t}());\r\n\texports.UIRouterLocation = UIRouterLocation;\r\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module ng2 */ /** */\r\n\tvar Rx_1 = __webpack_require__(64);\r\n\t/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */\r\n\tvar UIRouterRx = (function () {\r\n\t    function UIRouterRx(router) {\r\n\t        this.deregisterFns = [];\r\n\t        var start$ = new Rx_1.ReplaySubject(1);\r\n\t        var success$ = start$.mergeMap(function (t) { return t.promise.then(function () { return t; }); });\r\n\t        var params$ = success$.map(function (transition) { return transition.params(); });\r\n\t        var states$ = new Rx_1.ReplaySubject(1);\r\n\t        function onStatesChangedEvent(event, states) {\r\n\t            var changeEvent = {\r\n\t                currentStates: router.stateRegistry.get(),\r\n\t                registered: [],\r\n\t                deregistered: []\r\n\t            };\r\n\t            if (event)\r\n\t                changeEvent[event] = states;\r\n\t            states$.next(changeEvent);\r\n\t        }\r\n\t        this.deregisterFns.push(router.transitionService.onStart({}, function (transition) { return start$.next(transition); }));\r\n\t        this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));\r\n\t        onStatesChangedEvent(null, null);\r\n\t        Object.assign(router.globals, { start$: start$, success$: success$, params$: params$, states$: states$ });\r\n\t    }\r\n\t    UIRouterRx.prototype.dispose = function () {\r\n\t        this.deregisterFns.forEach(function (deregisterFn) { return deregisterFn(); });\r\n\t        this.deregisterFns = [];\r\n\t    };\r\n\t    return UIRouterRx;\r\n\t}());\r\n\texports.UIRouterRx = UIRouterRx;\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ui-router-ng2.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 79b8ce3378a301ac535b\n **/","/**\n * Main entry point for angular 2.x build\n * @module ng2\n */\n/** for typedoc */\n\nexport * from \"./core\";\nimport \"./justjs\";\n\nexport * from \"./ng2/interface\";\nexport * from \"./ng2/lazyLoadNgModule\";\nexport * from \"./ng2/rx\";\nexport * from \"./ng2/providers\";\nexport * from \"./ng2/location\";\nexport * from \"./ng2/directives/directives\";\nexport * from \"./ng2/statebuilders/views\";\nexport * from \"./ng2/uiRouterNgModule\";\nexport * from \"./ng2/uiRouterConfig\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2.ts\n **/","/** @module common */ /** */\n\nexport * from \"./common/module\";\nexport * from \"./params/module\";\nexport * from \"./path/module\";\nexport * from \"./resolve/module\";\nexport * from \"./state/module\";\nexport * from \"./transition/module\";\nexport * from \"./url/module\";\nexport * from \"./view/module\";\nexport * from \"./globals\";\n\nexport { UIRouter } from \"./router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./core.ts\n **/","/** @module common */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./common\";\nexport * from \"./coreservices\";\nexport * from \"./glob\";\nexport * from \"./hof\";\nexport * from \"./predicates\";\nexport * from \"./queue\";\nexport * from \"./strings\";\nexport * from \"./trace\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/module.ts\n **/","/**\n * Random utility functions used in the UI-Router code\n *\n * @preferred @module common\n */ /** for typedoc */\n\nimport {isFunction, isString, isArray, isRegExp, isDate} from \"./predicates\";\nimport { all, any, not, prop, curry } from \"./hof\";\nimport {services} from \"./coreservices\";\nimport {State} from \"../state/stateObject\";\n\nlet w: any = typeof window === 'undefined' ? {} : window;\nlet angular = w.angular || {};\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const copy = angular.copy || _copy;\nexport const forEach = angular.forEach || _forEach;\nexport const extend = angular.extend || _extend;\nexport const equals = angular.equals || _equals;\nexport const identity = (x: any) => x;\nexport const noop = () => <any> undefined;\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (x: X) => boolean;\nexport type IInjectable = (Function|any[]);\n\nexport interface Obj extends Object {\n  [key: string]: any\n}\n\n/**\n * Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n */\nexport function bindFunctions(from: Obj, to: Obj, bindTo: Obj, fnNames: string[] = Object.keys(from)) {\n  return fnNames.filter(name => typeof from[name] === 'function')\n      .forEach(name => to[name] = from[name].bind(bindTo));\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra: Obj) =>\n    extend(new (extend(function() {}, { prototype: parent }))(), extra);\n\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args: IArguments, idx = 0) =>\n    Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray = (array: any[], obj: any) =>\n    array.indexOf(obj) !== -1;\n\n/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\nexport const removeFrom = curry((array: any[], obj: any) => {\n  let idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n});\n\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts = {}, ...defaultsList: Obj[]) {\n  let defaults = merge.apply(null, [{}].concat(defaultsList));\n  return extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n}\n\n/**\n * Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.\n */\nexport function merge(dst: Obj, ...objs: Obj[]) {\n  forEach(objs, function(obj: Obj) {\n    forEach(obj, function(value: any, key: string) {\n      if (!dst.hasOwnProperty(key)) dst[key] = value;\n    });\n  });\n  return dst;\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first: State, second: State) {\n  let path: State[] = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nexport function equalForKeys(a: Obj, b: Obj, keys: string[] = Object.keys(a)) {\n  for (var i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\ntype PickOmitPredicate = (keys: string[], key: string) => boolean;\nfunction pickOmitImpl(predicate: PickOmitPredicate, obj: Obj, ...keys: string[]) {\n  let objCopy = {};\n  for (let key in obj) {\n    if (predicate(keys, key)) objCopy[key] = obj[key];\n  }\n  return objCopy;\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, propNames: string[]): Obj;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, 'a', 'b'); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, ...propNames: string[]): Obj;\n/** Return a copy of the object only containing the whitelisted properties. */\nexport function pick(obj: Obj) {\n  return pickOmitImpl.apply(null, [inArray].concat(restArgs(arguments)));\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, propNames: string[]): Obj;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, 'a', 'b'); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, ...propNames: string[]): Obj;\n/** Return a copy of the object omitting the blacklisted properties. */\nexport function omit(obj: Obj) {\n  let notInArray = (array, item) => !inArray(array, item);\n  return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));\n}\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck(collection: Obj[], propName: string): Obj[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: any, callback: Function): T {\n  let arr = isArray(collection), result: any = arr ? [] : {};\n  let accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection: any, callback: any) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any): any {\n  let result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj: Obj) =>\n    Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem: any) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem: any) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem: any[]) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem: any) =>\n    isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = <T> (acc: T[], token: T): T[] =>\n    inArray(acc, token) ? acc : pushR(acc, token);\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport function assertPredicate<T>(predicate: Predicate<T>, errMsg: (string|Function) = \"assert failure\"): Predicate<T> {\n  return (obj: T) => {\n    if (!predicate(obj)) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return true;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) =>\n    Object.keys(obj).map(key => [ key, obj[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...arrayArgs: any[]): any[] {\n  if (arrayArgs.length === 0) return [];\n  let length = arrayArgs.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  return Array.apply(null, Array(length)).map((ignored, idx) => arrayArgs.map(arr => arr[idx]));\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key: string, value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src: Obj, dest: Obj) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj: (any[]|any), cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\nfunction _copyProps(to: Obj, from: Obj) {\n  Object.keys(from).forEach(key => to[key] = from[key]);\n  return to;\n}\nfunction _extend(toObj: Obj, fromObj: Obj): Obj;\nfunction _extend(toObj: Obj, ...fromObj: Obj[]): Obj;\nfunction _extend(toObj: Obj) {\n  return restArgs(arguments, 1).filter(identity).reduce(_copyProps, toObj);\n}\n\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let key: string, keys: { [i: string]: boolean } = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/common.ts\n **/","/** Predicates @module common_predicates */ /** */\nimport {and, not, pipe, prop} from \"./hof\";\nimport {Predicate} from \"./common\"; // has or is using\n\nconst toStr = Object.prototype.toString;\nconst tis = (t: string) => (x: any) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = (o: any) => o === null;\nexport const isFunction: (x: any) => x is Function = <any> tis('function');\nexport const isNumber: (x: any) => x is number = <any> tis('number');\nexport const isString = <(x: any) => x is string> tis('string');\nexport const isObject = (x: any) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x: any) => x is Date = <any> ((x: any) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x: any) => x is RegExp = <any> ((x: any) => toStr.call(x) === '[object RegExp]');\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>> and(isObject, pipe(prop('then'), isFunction));\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/predicates.ts\n **/","/**\n * Higher order functions\n *\n * @module common_hof\n */ /** */\n\nimport {Predicate} from \"./common\";\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  let initial_args = [].slice.apply(arguments, [1]);\n  let func_args_length = fn.length;\n\n  function curried(args: any[]) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  let args = arguments;\n  let start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) =>\n    (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) =>\n    pipe.apply(null, name.split(\".\").map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) =>\n    (...args: any[]) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\nexport const any = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false) as boolean;\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is = (ctor: Function): Predicate<any> => obj => \n    (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp: any) => Predicate<any> = (val: any) => (other: any) =>\n    val === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) =>\n      obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x: any) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/hof.ts\n **/","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n/** for typedoc */\nimport {IInjectable, Obj} from \"./common\";\n\nlet notImplemented = (fnname: string) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']`);\n};\n\nlet services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n  location: <any> {},\n  locationConfig: <any> {},\n  template: <any> {}\n};\n\n[\"setUrl\", \"path\", \"search\", \"hash\", \"onChange\"]\n    .forEach(key => services.location[key] = notImplemented(key));\n\n[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\" ]\n    .forEach(key => services.locationConfig[key] = notImplemented(key));\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(val?: T): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  get(token: any): any;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n  strictDi?: boolean;\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n  /** Services related to getting or setting the browser location (url) */\n  location: LocationServices;\n  /** Retrieves configuration for how to construct a URL. */\n  locationConfig: LocationConfig;\n  template: TemplateServices;\n}\n\nexport interface LocationServices {\n  setUrl(newurl: string, replace?: boolean): void;\n  path(): string;\n  search(): string;\n  hash(): string;\n  onChange(callback: Function): Function;\n}\n\nexport interface LocationConfig {\n  port(): number;\n  protocol(): string;\n  host(): string;\n\n  baseHref(): string;\n  html5Mode(): boolean;\n  hashPrefix(): string;\n  hashPrefix(newprefix: string): string;\n}\n\nexport interface TemplateServices {\n  get(url: string): Promise<string>;\n}\n\n\nexport {services};\n\n\n/** WEBPACK FOOTER **\n ** ./common/coreservices.ts\n **/","/** @module common */ \n/** \n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - [[HookMatchCriteria.to]]\n * - [[HookMatchCriteria.from]]\n * - [[HookMatchCriteria.exiting]]\n * - [[HookMatchCriteria.retained]]\n * - [[HookMatchCriteria.entering]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    let regexpString = this.text.split('.')\n        .map(seg => {\n          if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n          if (seg === '*')  return '\\\\.[^.]*';\n          return                   '\\\\.' + seg;\n        }).join('');\n\n    this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n\n  /** @deprecated whats the point? */\n  static is(text: string) {\n    return text.indexOf('*') > -1;\n  }\n\n  /** @deprecated whats the point? */\n  static fromString(text: string) {\n    if (!this.is(text)) return null;\n    return new Glob(text);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/glob.ts\n **/","/** @module common */ /** for typedoc */\n\nexport class Queue<T> {\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    let items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    let current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    let idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/queue.ts\n **/","/** @module common_strings */ /** */\n\nimport {isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject} from \"./predicates\";\nimport {Rejection} from \"../transition/rejectFactory\";\nimport {IInjectable, identity, Obj} from \"./common\";\nimport {pattern, is, not, val, invoke} from \"./hof\";\nimport {Transition} from \"../transition/transition\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => \"-\" + $1.toLowerCase()); // replace rest\n}\n\nfunction _toJson(obj: Obj) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn: Function) {\n  let fnStr = fnToString(fn);\n  let namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  let toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  let fnName = fn['name'] || \"\";\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  let _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\nlet stringifyPatternFn: (val: any) => string = null;\nlet stringifyPattern = function(value: any) {\n  let isTransitionRejectionPromise = Rejection.isTransitionRejectionPromise;\n\n  stringifyPatternFn = <any> stringifyPatternFn || pattern([\n    [not(isDefined),                  val(\"undefined\")],\n    [isNull,                          val(\"null\")],\n    [isPromise,                       val(\"[Promise]\")],\n    [isTransitionRejectionPromise,    (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),                   invoke(\"toString\")],\n    [is(Transition),                  invoke(\"toString\")],\n    [is(Resolvable),                  invoke(\"toString\")],\n    [isInjectable,                    functionToString],\n    [val(true),                       identity]\n  ]);\n\n  return stringifyPatternFn(value);\n};\n\nexport function stringify(o: any) {\n  var seen: any[] = [];\n\n  function format(val: any) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string) => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\n\n/** WEBPACK FOOTER **\n ** ./common/strings.ts\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nimport {extend, silentRejection} from \"../common/common\";\nimport {stringify} from \"../common/strings\";\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5, ERROR = 6\n}\n\nexport class Rejection {\n  type: number;\n  message: string;\n  detail: any;\n  redirected: boolean;\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) => \n        d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let type = this.type, message = this.message, detail = detailString(this.detail);\n    return `TransitionRejection(type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise() {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isTransitionRejectionPromise(obj: any) {\n    return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n  }\n\n  /** Returns a TransitionRejection due to transition superseded */\n  static superseded(detail?: any, options?: any) {\n    let message = \"The transition has been superseded by a different transition\";\n    let rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a TransitionRejection due to redirected transition */\n  static redirected(detail?: any) {\n    return Rejection.superseded(detail, {redirected: true});\n  }\n\n  /** Returns a TransitionRejection due to invalid transition */\n  static invalid(detail?: any) {\n    let message = \"This transition is invalid\";\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to ignored transition */\n  static ignored(detail?: any) {\n    let message = \"The transition was ignored\";\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static aborted(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition has been aborted\";\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static errored(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition errored\";\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/rejectFactory.ts\n **/","/** @module transition */ /** for typedoc */\nimport {stringify} from \"../common/strings\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {\n    map, find, extend, mergeR,  tail,\n    omit, toJson, arrayTuples, unnestR, identity, anyTrueR\n} from \"../common/common\";\nimport { isObject, isArray } from \"../common/predicates\";\nimport { prop, propEq, val, not } from \"../common/hof\";\n\nimport {StateDeclaration, StateOrName} from \"../state/interface\";\nimport {\n    TransitionOptions, TransitionHookOptions, TreeChanges, IHookRegistry, IHookGetter,\n    HookMatchCriteria, TransitionHookFn, TransitionStateHookFn, HookRegOptions\n} from \"./interface\";\n\nimport {TransitionHook} from \"./transitionHook\";\nimport {HookRegistry, matchState} from \"./hookRegistry\";\nimport {HookBuilder} from \"./hookBuilder\";\nimport {PathNode} from \"../path/node\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\nimport {Rejection} from \"./rejectFactory\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {UIRouter} from \"../router\";\nimport {Globals} from \"../globals\";\nimport {UIInjector} from \"../common/interface\";\nimport {RawParams} from \"../params/interface\";\n\n\nlet transitionCount = 0;\nconst stateSelf: (_state: State) => StateDeclaration = prop(\"self\");\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n  static diToken = Transition;\n  \n  $id: number;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @hidden */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n  /**\n   * A boolean which indicates if the transition was successful\n   *\n   * After a successful transition, this value is set to true.\n   * After a failed transition, this value is set to false.\n   */\n  success: boolean;\n  /** @hidden */\n  private _error: any;\n\n  private _options: TransitionOptions;\n  private _treeChanges: TreeChanges;\n  private _targetState: TargetState;\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n  getHooks:   IHookGetter;\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    this._targetState = targetState;\n\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // Makes the Transition instance a hook registry (onStart, etc)\n    HookRegistry.mixin(new HookRegistry(), this);\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = transitionCount++;\n    let toPath = PathFactory.buildToPath(fromPath, targetState);\n    this._treeChanges = PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n    let enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\n    let rootResolvables: Resolvable[] = [\n      new Resolvable(UIRouter, () => router, [], undefined, router),\n      new Resolvable(Transition, () => this, [], undefined, this),\n      new Resolvable('$transition$', () => this, [], undefined, this),\n      new Resolvable('$stateParams', () => this.params(), [], undefined, this.params())\n    ];\n\n    let rootNode: PathNode = this._treeChanges.to[0];\n    let context = new ResolveContext(this._treeChanges.to);\n    context.addResolvables(rootResolvables, rootNode.state);\n  }\n\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * @returns The state object for the Transition's \"from state\".\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * @returns The state object for the Transition's target state (\"to state\").\n   */\n  to() {\n    return this.$to().self;\n  }\n\n  /**\n   * Gets the Target State\n   *\n   * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].\n   *\n   * @returns the [[TargetState]] of this Transition\n   */\n  targetState() {\n    return this._targetState;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   */\n  is(compare: (Transition|{to?: any, from?: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * @param pathname Pick which treeChanges path to get parameters for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname: string = \"to\"): { [key: string]: any } {\n    return this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {});\n  }\n\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName): UIInjector {\n    let path: PathNode[] = this.treeChanges().to;\n    if (state) path = PathFactory.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(): any[] {\n    return new ResolveContext(this._treeChanges.to).getTokens();\n  }\n\n\n  /**\n   * Gets resolved values\n   *\n   * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n   * are available to the Transition.\n   *\n   * Given a token, returns the resolved data for that token.\n   * Given an array of tokens, returns an array of resolved data for those tokens.\n   *\n   * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n   * If a resolvable doesn't exist for the token, throws an error.\n   *\n   * @param token the token (or array of tokens)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveValue(token: (any|any[])): (any|any[]) {\n    let resolveContext = new ResolveContext(this._treeChanges.to);\n    const getData = (token: any) => {\n      var resolvable = resolveContext.getResolvable(token);\n      if (resolvable === undefined) {\n        throw new Error(`Dependency Injection token not found: ${stringify(token)}`);\n      }\n      return resolvable.data;\n    };\n\n    if (isArray(token)) {\n      return token.map(getData);\n    }\n\n    return getData(token);\n  }\n\n  /**\n   * Gets a [[Resolvable]] primitive\n   *\n   * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.\n   *\n   * @param token the DI token\n   *\n   * @returns the [[Resolvable]] in the transition's to path, or undefined\n   */\n  getResolvable(token: any): Resolvable {\n    return new ResolveContext(this._treeChanges.to).getResolvable(token);\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n   *\n   * @param resolvable an [[Resolvable]] object\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable, state: StateOrName = \"\"): void {\n    let stateName: string = (typeof state === \"string\") ? state : state.name;\n    let topath = this._treeChanges.to;\n    let targetNode = find(topath, node => node.state.name === stateName);\n    let resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable], targetNode.state);\n  }\n\n  /**\n   * If the current transition is a redirect, returns the transition that was redirected.\n   *\n   * Gets the transition from which this transition was redirected.\n   *\n   *\n   * @example\n   * ```js\n   *\n   * let transitionA = $state.go('A').transitionA\n   * transitionA.onStart({}, () => $state.target('B'));\n   * $transitions.onSuccess({ to: 'B' }, (trans) => {\n   *   trans.to().name === 'B'; // true\n   *   trans.redirectedFrom() === transitionA; // true\n   * });\n   * ```\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  redirectedFrom(): Transition {\n    return this._options.redirectedFrom || null;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname: string = \"entering\", state?: State): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  treeChanges = () => this._treeChanges;\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let newOptions = extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: \"redirect\" });\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    let originalEnteringNodes = this.treeChanges().entering;\n    let redirectEnteringNodes = newTransition.treeChanges().entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: State) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    let matchingEnteringNodes: PathNode[] = PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    let {to, from} = this._treeChanges;\n    if (this._options.reload || tail(to).state !== tail(from).state) return undefined;\n\n    let nodeSchemas: Param[][] = to.map((node: PathNode) => node.paramSchema);\n    let [toValues, fromValues] = [to, from].map(path => path.map(x => x.paramValues));\n    let tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.length === 0;\n  }\n\n  /**\n   * @hidden\n   */\n  hookBuilder(): HookBuilder {\n    return new HookBuilder(this.router.transitionService, this, <TransitionHookOptions> {\n      transition: this,\n      current: this._options.current\n    });\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @returns a promise for a successful transition.\n   */\n  run(): Promise<any> {\n    let runSynchronousHooks = TransitionHook.runSynchronousHooks;\n    let hookBuilder = this.hookBuilder();\n    let globals = <Globals> this.router.globals;\n    globals.transitionHistory.enqueue(this);\n\n    let syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\n    if (Rejection.isTransitionRejectionPromise(syncResult)) {\n      syncResult.catch(() => 0); // issue #2676\n      let rejectReason = (<any> syncResult)._transitionRejection;\n      this._deferred.reject(rejectReason);\n      return this.promise;\n    }\n\n    if (!this.valid()) {\n      let error = new Error(this.error());\n      this._deferred.reject(error);\n      return this.promise;\n    }\n\n    if (this.ignored()) {\n      trace.traceTransitionIgnored(this);\n      this._deferred.reject(Rejection.ignored());\n      return this.promise;\n    }\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n    };\n\n    const transitionError = (reason: any) => {\n      trace.traceError(reason, this);\n      this.success = false;\n      this._deferred.reject(reason);\n      this._error = reason;\n      runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n    };\n\n    trace.traceTransitionStart(this);\n\n    // Chain the next hook off the previous\n    const appendHookToChain = (prev: Promise<any>, nextHook: TransitionHook) =>\n        prev.then(() => nextHook.invokeHook());\n\n    // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n    hookBuilder.asyncHooks()\n        .reduce(appendHookToChain, syncResult)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  isActive = () => this === this._options.current();\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error() || this.success !== undefined;\n  }\n\n  /**\n   * The Transition error reason.\n   *\n   * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n   * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n   *\n   * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n   */\n  error() {\n    let state: State = this.$to();\n\n    let redirects = 0, trans: Transition = this;\n    while((trans = trans.redirectedFrom()) != null) {\n      if (++redirects > 20) return `Too many Transition redirects (20+)`;\n    }\n\n    if (state.self.abstract)\n      return `Cannot transition to abstract state '${state.name}'`;\n    if (!Param.validates(state.parameters(), this.params()))\n      return `Param values not valid for state '${state.name}'`;\n    if (this.success === false)\n      return this._error;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    let fromStateOrName = this.from();\n    let toStateOrName = this.to();\n\n    const avoidEmptyHash = (params: RawParams) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, \"#\");\n\n    // (X) means the to state is invalid.\n    let id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transition.ts\n **/","/**\n * UI-Router Transition Tracing\n *\n * Enable transition tracing to print transition information to the console, in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n *\n * ES6\n * ```\n *\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * CJS\n * ```\n *\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * Globals\n * ```\n *\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * @module trace\n */ /** for typedoc */\nimport {parse} from \"../common/hof\";\nimport {isNumber} from \"../common/predicates\";\nimport {Transition}  from \"../transition/transition\";\nimport {ActiveUIView, ViewConfig, ViewContext}  from \"../view/interface\";\nimport {stringify, functionToString, maxLength, padString} from \"./strings\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {PathNode} from \"../path/node\";\nimport {PolicyWhen} from \"../resolve/interface\";\nimport {TransitionHook} from \"../transition/transitionHook\";\nimport {HookResult} from \"../transition/interface\";\nimport {State} from \"../state/stateObject\";\n\n/** @hidden */\nfunction uiViewString (viewData: ActiveUIView) {\n    if (!viewData) return 'ui-view (defunct)';\n    return `[ui-view#${viewData.id} tag ` +\n        `in template from '${viewData.creationContext && viewData.creationContext.name || '(root)'}' state]: ` +\n        `fqn: '${viewData.fqn}', ` +\n        `name: '${viewData.name}@${viewData.creationContext}')`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) =>\n    `[ViewConfig#${viewConfig.$id} from '${viewConfig.viewDecl.$context.name || '(root)'}' state]: target ui-view: '${viewConfig.viewDecl.$uiViewName}@${viewConfig.viewDecl.$uiViewContextAnchor}'`;\n\n/** @hidden */\nfunction normalizedCat(input: Category|string): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n\n/**\n * Trace categories\n *\n * [[Trace.enable]] or [[Trace.disable]] a category\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, UIVIEW, VIEWCONFIG\n}\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  approximateDigests: number;\n\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = <any> Object.keys(Category)\n          .map(k => parseInt(k, 10))\n          .filter(k => !isNaN(k))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: Category[]) { this._set(true, categories) }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: Category[]) { this._set(false, categories) }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: Category): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** called by ui-router code */\n  traceTransitionStart(transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: Started  -> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: Ignored  <> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceHookInvocation(step: TransitionHook, options: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = functionToString((step as any).eventHook.callback);\n    console.log(`Transition #${tid} Digest #${digest}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** called by ui-router code */\n  traceHookResult(hookResult: HookResult, transitionOptions: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(transitionOptions),\n        digest = this.approximateDigests,\n        hookResultStr = stringify(hookResult);\n    console.log(`Transition #${tid} Digest #${digest}:   <- Hook returned: ${maxLength(200, hookResultStr)}`);\n  }\n\n  /** called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        pathStr = path && path.toString();\n    console.log(`Transition #${tid} Digest #${digest}:         Resolving ${pathStr} (${when})`);\n  }\n\n  /** called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        resolvableStr = resolvable && resolvable.toString(),\n        result = stringify(resolvable.data);\n    console.log(`Transition #${tid} Digest #${digest}:               <- Resolved  ${resolvableStr} to: ${maxLength(200, result)}`);\n  }\n\n  /** called by ui-router code */\n  traceError(reason: any, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Rejected ${transitionStr}, reason: ${reason}`);\n  }\n\n  /** called by ui-router code */\n  traceSuccess(finalState: State, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        state = finalState.name,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Success  ${transitionStr}, final state: ${state}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context: ViewContext) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html: string) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * @example\n * ```js\n *\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/trace.ts\n **/","/** @module transition */ /** for typedoc */\nimport {TransitionHookOptions, IEventHook, HookResult} from \"./interface\";\nimport {defaults, noop} from \"../common/common\";\nimport {fnToString, maxLength} from \"../common/strings\";\nimport {isPromise} from \"../common/predicates\";\nimport {val, is, parse } from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\n\nimport {Rejection} from \"./rejectFactory\";\nimport {TargetState} from \"../state/targetState\";\nimport {Transition} from \"./transition\";\nimport {State} from \"../state/stateObject\";\n\nlet defaultOptions: TransitionHookOptions = {\n  async: true,\n  rejectIfSuperseded: true,\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null\n};\n\n/** @hidden */\nexport class TransitionHook {\n  constructor(private transition: Transition,\n              private stateContext: State,\n              private eventHook: IEventHook,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n  }\n\n  private isSuperseded = () =>\n    this.options.current() !== this.options.transition;\n\n  invokeHook(): Promise<HookResult> {\n    let { options, eventHook } = this;\n    trace.traceHookInvocation(this, options);\n    if (options.rejectIfSuperseded && this.isSuperseded()) {\n      return Rejection.superseded(options.current()).toPromise();\n    }\n\n    let synchronousHookResult = !eventHook._deregistered\n      ? eventHook.callback.call(options.bind, this.transition, this.stateContext)\n      : undefined;\n\n    return this.handleHookResult(synchronousHookResult);\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false (cancel), a TargetState (redirect),\n   * or a promise (which may later resolve to false or a redirect)\n   *\n   * This also handles \"transition superseded\" -- when a new transition\n   * was started while the hook was still running\n   */\n  handleHookResult(result: HookResult): Promise<any> {\n    // This transition is no longer current.\n    // Another transition started while this hook was still running.\n    if (this.isSuperseded()) {\n      // Abort this transition\n      return Rejection.superseded(this.options.current()).toPromise();\n    }\n\n    // Hook returned a promise\n    if (isPromise(result)) {\n      // Wait for the promise, then reprocess the resolved value\n      return result.then(this.handleHookResult.bind(this));\n    }\n\n    trace.traceHookResult(result, this.options);\n\n    // Hook returned false\n    if (result === false) {\n      // Abort this Transition\n      return Rejection.aborted(\"Hook aborted transition\").toPromise();\n    }\n\n    const isTargetState = is(TargetState);\n    // hook returned a TargetState\n    if (isTargetState(result)) {\n      // Halt the current Transition and start a redirected Transition (to the TargetState).\n      return Rejection.redirected(result).toPromise();\n    }\n  }\n\n  toString() {\n    let { options, eventHook } = this;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = fnToString(eventHook.callback);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n\n  /**\n   * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n   *\n   * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n   */\n  static runSynchronousHooks(hooks: TransitionHook[], swallowExceptions: boolean = false): Promise<any> {\n    let results: Promise<HookResult>[] = [];\n    for (let i = 0; i < hooks.length; i++) {\n      let hook = hooks[i];\n      try {\n        results.push(hook.invokeHook());\n      } catch (exception) {\n        if (!swallowExceptions) {\n          return Rejection.errored(exception).toPromise();\n        }\n\n        let errorHandler = hook.transition.router.stateService.defaultErrorHandler();\n        errorHandler(exception);\n      }\n    }\n\n    let rejections = results.filter(Rejection.isTransitionRejectionPromise);\n    if (rejections.length) return rejections[0];\n\n    return results\n        .filter(isPromise)\n        .reduce((chain: Promise<any>, promise: Promise<any>) => chain.then(val(promise)), services.$q.when());\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionHook.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, StateOrName} from \"./interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {TransitionOptions} from \"../transition/interface\";\n\nimport {State} from \"./stateObject\";\nimport {toJson} from \"../common/common\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:TargetState\n *\n * @description\n * Encapsulate the desired target of a transition.\n * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n *\n * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n *            used to define the state.\n * @param {IState} _definition The `State` object definition.\n * @param {ParamsOrArray} _params Parameters for the target state\n * @param {TransitionOptions} _options Transition options.\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: State,\n    _params: ParamsOrArray = {},\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  name() {\n    return this._definition && this._definition.name || this._identifier;\n  }\n\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  $state(): State {\n    return this._definition;\n  }\n\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  options() {\n    return this._options;\n  }\n\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  valid(): boolean {\n    return !this.error();\n  }\n\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${toJson(this.params())}`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/targetState.ts\n **/","/** @module transition */ /** for typedoc */\nimport {extend, removeFrom, allTrueR, tail} from \"../common/common\";\nimport {isString, isFunction} from \"../common/predicates\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"./interface\"; // has or is using\n\nimport {\n    HookRegOptions, HookMatchCriteria, IEventHook, IHookRegistry, IHookRegistration, TreeChanges,\n    HookMatchCriterion, IMatchingNodes, HookFn\n} from \"./interface\";\nimport {Glob} from \"../common/glob\";\nimport {State} from \"../state/stateObject\";\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: State, criterion: HookMatchCriterion) {\n  let toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state: State) {\n    let globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      let glob = Glob.fromString(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n/** @hidden */\nexport class EventHook implements IEventHook {\n  callback: HookFn;\n  matchCriteria: HookMatchCriteria;\n  priority: number;\n  bind: any;\n  _deregistered: boolean;\n\n  constructor(matchCriteria: HookMatchCriteria, callback: HookFn, options: HookRegOptions = <any>{}) {\n    this.callback = callback;\n    this.matchCriteria = extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n    this._deregistered = false;\n  }\n\n  private static _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    let matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    let mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\n    let matches: IMatchingNodes = {\n      to: _matchingNodes([tail(treeChanges.to)], mc.to),\n      from: _matchingNodes([tail(treeChanges.from)], mc.from),\n      exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n      retained: _matchingNodes(treeChanges.retained, mc.retained),\n      entering: _matchingNodes(treeChanges.entering, mc.entering),\n    };\n\n    // Check if all the criteria matched the TreeChanges object\n    let allMatched: boolean = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n        .map(prop => matches[prop])\n        .reduce(allTrueR, true);\n\n    return allMatched ? matches : null;\n  }\n}\n\n/** @hidden */\ninterface ITransitionEvents { [key: string]: IEventHook[]; }\n\n/** @hidden Return a registration function of the requested type. */\nfunction makeHookRegistrationFn(hooks: ITransitionEvents, name: string): IHookRegistration {\n  return function (matchObject, callback, options = {}) {\n    let eventHook = new EventHook(matchObject, callback, options);\n    hooks[name].push(eventHook);\n\n    return function deregisterEventHook() {\n      eventHook._deregistered = true;\n      removeFrom(hooks[name])(eventHook);\n    };\n  };\n}\n\n/**\n * Mixin class acts as a Transition Hook registry.\n *\n * Holds the registered [[HookFn]] objects.\n * Exposes functions to register new hooks.\n *\n * This is a Mixin class which can be applied to other objects.\n *\n * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n *\n * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n * Global hooks are added to the [[TransitionService]].\n * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n * (note: the hook criteria still must match the Transition).\n */\nexport class HookRegistry implements IHookRegistry {\n  static mixin(source: HookRegistry, target: IHookRegistry) {\n    Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(key => target[key] = source[key]);\n  }\n\n  private _transitionEvents: ITransitionEvents = {\n    onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n  };\n\n  getHooks = (name: string) => this._transitionEvents[name];\n\n  /** @inheritdoc */\n  onBefore  = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n  /** @inheritdoc */\n  onStart   = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n  /** @inheritdoc */\n  onEnter   = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n  /** @inheritdoc */\n  onRetain  = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n  /** @inheritdoc */\n  onExit    = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n  /** @inheritdoc */\n  onFinish  = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n  /** @inheritdoc */\n  onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n  /** @inheritdoc */\n  onError   = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookRegistry.ts\n **/","/** @module transition */ /** for typedoc */\n\nimport {extend, tail, assertPredicate, unnestR, identity} from \"../common/common\";\nimport {isArray} from \"../common/predicates\";\n\nimport {TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IEventHook, IMatchingNodes} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {TransitionHook} from \"./transitionHook\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionService} from \"./transitionService\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n\n  treeChanges: TreeChanges;\n  transitionOptions: TransitionOptions;\n\n  toState: State;\n  fromState: State;\n\n  constructor(private $transitions: TransitionService, private transition: Transition, private baseHookOptions: TransitionHookOptions) {\n    this.treeChanges        = transition.treeChanges();\n    this.toState            = tail(this.treeChanges.to).state;\n    this.fromState          = tail(this.treeChanges.from).state;\n    this.transitionOptions  = transition.options();\n  }\n\n  getOnBeforeHooks  = () => this._buildNodeHooks(\"onBefore\",  \"to\",       tupleSort(), { async: false });\n  getOnStartHooks   = () => this._buildNodeHooks(\"onStart\",   \"to\",       tupleSort());\n  getOnExitHooks    = () => this._buildNodeHooks(\"onExit\",    \"exiting\",  tupleSort(true),  { stateHook: true });\n  getOnRetainHooks  = () => this._buildNodeHooks(\"onRetain\",  \"retained\", tupleSort(false), { stateHook: true });\n  getOnEnterHooks   = () => this._buildNodeHooks(\"onEnter\",   \"entering\", tupleSort(false), { stateHook: true });\n  getOnFinishHooks  = () => this._buildNodeHooks(\"onFinish\",  \"to\",       tupleSort());\n  getOnSuccessHooks = () => this._buildNodeHooks(\"onSuccess\", \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n  getOnErrorHooks   = () => this._buildNodeHooks(\"onError\",   \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n\n  asyncHooks() {\n    let onStartHooks    = this.getOnStartHooks();\n    let onExitHooks     = this.getOnExitHooks();\n    let onRetainHooks   = this.getOnRetainHooks();\n    let onEnterHooks    = this.getOnEnterHooks();\n    let onFinishHooks   = this.getOnFinishHooks();\n\n    let asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n    return asyncHooks.reduce(unnestR, []).filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n   * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n   * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n   * @param options any specific Transition Hook Options\n   */\n  private _buildNodeHooks(hookType: string,\n                          matchingNodesProp: string,\n                          sortHooksFn: (l: HookTuple, r: HookTuple) => number,\n                          options?: TransitionHookOptions): TransitionHook[] {\n\n    // Find all the matching registered hooks for a given hook type\n    let matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n    if (!matchingHooks) return [];\n\n     const makeTransitionHooks = (hook: IEventHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       let matches: IMatchingNodes = hook.matches(this.treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       let matchingNodes: PathNode[] = matches[matchingNodesProp];\n\n       // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n       // Everything else gets the \"to path\"\n       let resolvePath = matchingNodesProp === 'exiting' ? this.treeChanges.from : this.treeChanges.to;\n       let resolveContext = new ResolveContext(resolvePath);\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         let _options = extend({ bind: hook.bind, traceData: { hookType, context: node} }, this.baseHookOptions, options);\n         let state = _options.stateHook ? node.state : null;\n         let transitionHook = new TransitionHook(this.transition, state, hook, _options);\n         return <HookTuple> { hook, node, transitionHook };\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(sortHooksFn)\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all IEventHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[IEventHook]]s\n   */\n  private _matchingHooks(hookName: string, treeChanges: TreeChanges): IEventHook[] {\n    return [ this.transition, this.$transitions ]                             // Instance and Global hook registries\n        .map((reg: IHookRegistry) => reg.getHooks(hookName))                  // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookName}`))  // Sanity check\n        .reduce(unnestR, [])                                                  // Un-nest IEventHook[][] to IEventHook[] array\n        .filter(hook => hook.matches(treeChanges));                           // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: IEventHook, node: PathNode, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let factor = reverseDepthSort ? -1 : 1;\n    let depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookBuilder.ts\n **/","/** @module resolve */ /** for typedoc */\nimport { find, tail, uniqR, unnestR, inArray } from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services, $InjectorLike} from \"../common/coreservices\";\nimport {resolvePolicies, PolicyWhen} from \"./interface\";\n\nimport {PathNode} from \"../path/node\";\nimport {Resolvable} from \"./resolvable\";\nimport {State} from \"../state/stateObject\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {stringify} from \"../common/strings\";\nimport {Transition} from \"../transition/transition\";\nimport {UIInjector} from \"../common/interface\";\n\nconst when = resolvePolicies.when;\nconst ALL_WHENS = [when.EAGER, when.LAZY];\nconst EAGER_WHENS = [when.EAGER];\n\nexport const NATIVE_INJECTOR_TOKEN = \"Native Injector\";\n\n/**\n * Encapsulates Depenency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n  _injector: UIInjector;\n\n  constructor(private _path: PathNode[]) { }\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens(): any[] {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token: any): Resolvable {\n    var matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: State): ResolveContext {\n    return new ResolveContext(PathFactory.subPath(this._path, node => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: State) {\n    var node = <PathNode> find(this._path, propEq('state', state));\n    var keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n  \n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = \"LAZY\", trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    let whenOption: string = inArray(ALL_WHENS, when) ? when : \"LAZY\";\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    let matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n    \n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    let promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      const matchesRequestedPolicy = (resolvable: Resolvable) =>\n          inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n      let nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n      let subContext = this.subContext(node.state);\n\n      // For the matching Resolvables, start their async fetch process.\n      var getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      return acc.concat(nodeResolvables.map(getResult));\n    }, []);\n\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return this._injector || (this._injector = new UIInjectorImpl(this));\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    let node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    let subPath: PathNode[] = PathFactory.subPath(this._path, x => x === node) || this._path;\n    let availableResolvables: Resolvable[] = subPath\n        .reduce((acc, node) => acc.concat(node.resolvables), []) //all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = (token: any) => {\n      let matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      let fromInjector = this.injector().getNative(token);\n      if (!fromInjector) {\n        throw new Error(\"Could not find Dependency Injection token: \" + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nclass UIInjectorImpl implements UIInjector {\n  native: $InjectorLike;\n\n  constructor(public context: ResolveContext) {\n    this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n  }\n\n  get(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (!resolvable.resolved) {\n        throw new Error(\"Resolvable async .get() not complete:\" + stringify(resolvable.token))\n      }\n      return resolvable.data;\n    }\n    return this.native && this.native.get(token);\n  }\n\n  getAsync(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(this.native.get(token));\n  }\n\n  getNative(token: any) {\n    return this.native.get(token);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolveContext.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {Resolvable} from \"./resolvable\";\n\nexport interface Resolvables {\n  [key: string]: Resolvable;\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be defined in [[StateDefinition.resolve]] blocks to declare\n * async data that the state or substates require.\n */\nexport interface ResolvableLiteral {\n  /** The Dependency Injection token that will be used to inject/access the resolvable */\n  token: any;\n\n  /**\n   * The function that returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /** A policy that defines when to invoke the resolve, and whether to wait for async and unwrap the data */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens for dependencies of the [[resolveFn]].\n   * The DI tokens are references to other `Resolvables`, or to global services.\n   */\n  deps?: any[];\n\n  /** Pre-resolved value. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * This object is the [[StateDeclaration.resolvePolicy]] property.\n *\n * @example\n * ```js\n *\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * 1) Individual resolve definition\n * 2) State definition\n * 3) Global default\n *\n * @example\n * ```js\n *\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default) resolved as the resolve's state is being entered\n   * - `EAGER` resolved as the transition is starting\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default) if a promise is returned from the resolveFn, wait for the promise before proceeding\n   * - `NOWAIT` if a promise is returned from the resolve, do not wait for the promise.\n   *            The promise will not be unwrapped.\n   *            The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT` When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *            The Observable item will not be unwrapped.\n   *            The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = \"LAZY\" | \"EAGER\" ;\nexport type PolicyAsync = \"WAIT\" | \"NOWAIT\" | \"RXWAIT\" ;\n\nexport let resolvePolicies = {\n  when: {\n    LAZY: \"LAZY\",\n    EAGER: \"EAGER\"\n  },\n  async: {\n    WAIT: \"WAIT\",\n    NOWAIT: \"NOWAIT\",\n    RXWAIT: \"RXWAIT\"\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/interface.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {extend, equals, inArray, identity} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {ResolvePolicy, ResolvableLiteral, resolvePolicies} from \"./interface\";\n\nimport {ResolveContext} from \"./resolveContext\";\nimport {stringify} from \"../common/strings\";\nimport {isFunction, isObject} from \"../common/predicates\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\n\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: \"LAZY\",\n  async: \"WAIT\"\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved: boolean = false;\n  promise: Promise<any> = undefined;\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable)\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral)\n\n  /**\n   * This constructor creates a new `Resolvable`\n   *\n   * @example\n   * ```js\n   *\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (arg1 == null || arg1 == undefined) throw new Error(\"new Resolvable(): token argument is required\");\n      if (!isFunction(resolveFn)) throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && isFunction(arg1.resolveFn)) {\n      let literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state:State): ResolvePolicy {\n    let thisPolicy = this.policy || {};\n    let statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    }\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    let $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n        $q.all(resolveContext.getDependencies(this).map(r =>\n            r.get(resolveContext, trans))) as Promise<any[]>;\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = (resolvedDeps: any[]) =>\n        this.resolveFn.apply(null, resolvedDeps);\n\n    /**\n     * For RXWAIT policy:\n     *\n     * Given an observable returned from a resolve function:\n     * - enables .cache() mode (this allows multicast subscribers)\n     * - then calls toPromise() (this triggers subscribe() and thus fetches)\n     * - Waits for the promise, then return the cached observable (not the first emitted value).\n     */\n    const waitForRx = (observable$: any) => {\n      let cached = observable$.cache(1);\n      return cached.take(1).toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    let node: PathNode = resolveContext.findNode(this);\n    let state: State = node && node.state;\n    let maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : identity;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = (resolvedValue: any) => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n  \n  static fromData = (token: any, data: any) =>  \n      new Resolvable(token, () => data, null, null, data);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolvable.ts\n **/","/** @module path */ /** for typedoc */\n\nimport {extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray} from \"../common/common\";\nimport {prop, propEq, not} from \"../common/hof\";\n\nimport {RawParams} from \"../params/interface\";\nimport {TreeChanges} from \"../transition/interface\";\nimport {ViewConfig} from \"../view/interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {ViewService} from \"../view/view\";\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathFactory {\n\n  constructor() { }\n\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(path: PathNode[]): TargetState {\n    let state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n  static buildPath(targetState: TargetState) {\n    let toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    let toPath: PathNode[] = PathFactory.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: State[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      let viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      let subPath = PathFactory.subPath(path, n => n === node);\n      let viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: State): RawParams {\n      let node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      let fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]> toPath.map(makeInheritedParamsNode);\n  }\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: State): TreeChanges {\n    let keep = 0, max = Math.min(fromPath.length, toPath.length);\n    const staticParams = (state: State) => \n        state.parameters({ inherit: false }).filter(not(prop('dynamic'))).map(prop('id'));\n    const nodesMatch = (node1: PathNode, node2: PathNode) =>\n        node1.equals(node2, staticParams(node1.state));\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      let cloned = PathNode.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    let retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, exiting, entering };\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    let node = find(path, predicate);\n    let elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) => path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./path/pathFactory.ts\n **/","/** @module path */ /** for typedoc */\nimport {extend, applyPairs, find, allTrueR} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {State} from \"../state/stateObject\";\nimport {RawParams} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\n\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: State;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /** Creates a copy of a PathNode */\n  constructor(state: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: State);\n  constructor(stateOrPath: any) {\n    if (stateOrPath instanceof PathNode) {\n      let node: PathNode = stateOrPath;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      let state: State = stateOrPath;\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, keys = this.paramSchema.map(p => p.id)): boolean {\n    const paramValsEq = (key: string) =>\n        this.parameter(key).type.equals(this.paramValues[key], node.paramValues[key]);\n    return this.state === node.state && keys.map(paramValsEq).reduce(allTrueR, true);\n  }\n\n  /** Returns a clone of the PathNode */\n  static clone(node: PathNode) {\n    return new PathNode(node);\n  }\n\n  /**\n   * Returns a new path which is a subpath of the first path which matched the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * Nodes are compared using their state property and parameter values.\n   *\n   * @param pathA the first path\n   * @param pathB the second path\n   * @param ignoreDynamicParams don't compare dynamic parameter values\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[], ignoreDynamicParams = true): PathNode[] {\n    let matching: PathNode[] = [];\n\n    for (let i = 0; i < pathA.length && i < pathB.length; i++) {\n      let a = pathA[i], b = pathB[i];\n\n      if (a.state !== b.state) break;\n\n      let changedParams = Param.changed(a.paramSchema, a.paramValues, b.paramValues)\n          .filter(param => !(ignoreDynamicParams && param.dynamic));\n      if (changedParams.length) break;\n\n      matching.push(a);\n    }\n\n    return matching\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./path/node.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map, applyPairs, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isInjectable, isDefined, isString, isArray} from \"../common/predicates\";\nimport {RawParams, ParamDeclaration} from \"../params/interface\";\nimport {services} from \"../common/coreservices\";\nimport {matcherConfig} from \"../url/urlMatcherConfig\";\nimport {ParamType} from \"./type\";\nimport {ParamTypes} from \"./paramTypes\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\nlet isShorthand = (cfg: ParamDeclaration) =>\n    [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\nexport enum DefType {\n  PATH, SEARCH, CONFIG\n}\n\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\n  cfg = isShorthand(cfg) && { value: cfg } as any || cfg;\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : () => cfg.value\n  });\n}\n\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type as string)) return paramTypes.type(cfg.type as string);\n  if (urlType) return urlType;\n  if (!cfg.type) return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type as string);\n}\n\n/**\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean) {\n  let squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return matcherConfig.defaultSquashPolicy();\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: (string|boolean)) {\n  let replace: any, configuredKeys: string[], defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")}\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  array: boolean;\n  squash: (boolean|string);\n  replace: any;\n  isOptional: boolean;\n  dynamic: boolean;\n  config: any;\n\n  constructor(id: string, type: ParamType, config: ParamDeclaration, location: DefType, paramTypes: ParamTypes) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id, paramTypes);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined;\n    let dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    let squash = getSquashPolicy(config, isOptional);\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, squash, replace, isOptional, dynamic, config, array: arrayMode});\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const $$getDefaultValue = () => {\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n      return defaultValue;\n    };\n\n    const $replace = (val: any) => {\n      let replacement: any = map(filter(this.replace, propEq('from', val)), prop(\"to\"));\n      return replacement.length ? replacement[0] : val;\n    };\n\n    value = $replace(value);\n    return !isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((!isDefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n\n  /** Creates a new [[Param]] from a CONFIG block */\n  static fromConfig(id: string, type: ParamType, config: any, paramTypes: ParamTypes): Param {\n    return new Param(id, type, config, DefType.CONFIG, paramTypes);\n  }\n\n  /** Creates a new [[Param]] from a url PATH */\n  static fromPath(id: string, type: ParamType, config: any, paramTypes: ParamTypes): Param {\n    return new Param(id, type, config, DefType.PATH, paramTypes);\n  }\n\n  /** Creates a new [[Param]] from a url SEARCH */\n  static fromSearch(id: string, type: ParamType, config: any, paramTypes: ParamTypes): Param {\n    return new Param(id, type, config, DefType.SEARCH, paramTypes);\n  }\n\n  static values(params: Param[], values: RawParams = {}): RawParams {\n    return <RawParams> params.map(param => [param.id, param.value(values[param.id])]).reduce(applyPairs, {});\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values: RawParams = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/param.ts\n **/","/** @module url */ /** for typedoc */\nimport {isDefined, isString} from \"../common/predicates\";\n\nexport class MatcherConfig {\n  _isCaseInsensitive: boolean = false;\n  _isStrictMode: boolean = true;\n  _defaultSquashPolicy: (boolean|string) = false;\n\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  defaultSquashPolicy(value?: (boolean|string)): (boolean|string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n}\n\n// TODO: Do not export global instance; create one in UIRouter() constructor\nexport let matcherConfig = new MatcherConfig();\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherConfig.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map} from \"../common/common\";\nimport {isArray, isDefined} from \"../common/predicates\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n */\nfunction ArrayType(type: ParamType, mode: (boolean|\"auto\")) {\n  // Wrap non-array value as array\n  function arrayWrap(val: any): any[] {\n    return isArray(val) ? val : (isDefined(val) ? [ val ] : []);\n  }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val: any) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback: (x: any) => any, allTruthyMode?: boolean) {\n    return function handleArray(val: any) {\n      if (isArray(val) && val.length === 0) return val;\n      let arr = arrayWrap(val);\n      let result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback: (l: any, r: any) => boolean) {\n    return function handleArray(val1: any, val2: any) {\n      let left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].forEach(name => {\n    var paramTypeFn = type[name].bind(type);\n    var wrapperFn: Function = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n    this[name] = wrapperFn(paramTypeFn);\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n\n/**\n * A class that implements Custom Parameter Type functionality.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * @example\n * ```\n *\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * ```\n */\nexport class ParamType implements ParamTypeDefinition {\n  pattern: RegExp = /.*/;\n  name: string;\n  raw: boolean;\n  dynamic: boolean;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; }\n\n\n  $subPattern() {\n    let sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val: any) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode: (boolean|\"auto\"), isSearch: boolean) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new (<any> ArrayType)(this, mode);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/type.ts\n **/","/** @module core */ /** */\nimport {UrlMatcherFactory} from \"./url/urlMatcherFactory\";\nimport {UrlRouterProvider} from \"./url/urlRouter\";\nimport {UrlRouter} from \"./url/urlRouter\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {ViewService} from \"./view/view\";\nimport {StateRegistry} from \"./state/stateRegistry\";\nimport {StateService} from \"./state/stateService\";\nimport {UIRouterGlobals, Globals} from \"./globals\";\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * This class instantiates and wires the global UI-Router services.\n *\n * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n */\nexport class UIRouter {\n  viewService = new ViewService();\n\n  transitionService: TransitionService = new TransitionService(this);\n\n  globals: UIRouterGlobals = new Globals(this.transitionService);\n\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  urlRouterProvider: UrlRouterProvider = new UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\n  urlRouter: UrlRouter = new UrlRouter(this.urlRouterProvider);\n\n  stateRegistry: StateRegistry = new StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\n  stateService = new StateService(this);\n\n  constructor() {\n    this.viewService.rootContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./router.ts\n **/","/** @module url */ /** for typedoc */\nimport {forEach, extend} from \"../common/common\";\nimport {isObject, isDefined, isFunction} from \"../common/predicates\";\n\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {matcherConfig} from \"./urlMatcherConfig\";\nimport {Param} from \"../params/param\";\nimport {ParamTypes} from \"../params/paramTypes\";\nimport {ParamTypeDefinition} from \"../params/interface\";\n\n/** @hidden */\nfunction getDefaultConfig() {\n  return {\n    strict: matcherConfig.strictMode(),\n    caseInsensitive: matcherConfig.caseInsensitive()\n  };\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  paramTypes = new ParamTypes();\n\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  caseInsensitive(value: boolean) {\n    return matcherConfig.caseInsensitive(value);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  strictMode(value: boolean) {\n    return matcherConfig.strictMode(value);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  defaultSquashPolicy(value: string) {\n    return matcherConfig.defaultSquashPolicy(value);\n  }\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, this.paramTypes, extend(getDefaultConfig(), config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any) {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A [[ParamType]] can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   *\n   * Note: Register custom types *before using them* in a state definition.\n   *\n   * See [[ParamTypeDefinition]] for examples\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    let type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  /** @hidden */\n  $get() {\n    this.paramTypes.enqueue = false;\n    this.paramTypes._flushTypeQueue();\n    return this;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherFactory.ts\n **/","/** @module url */ /** for typedoc */\nimport {\n  map, defaults, extend, inherit, identity,\n  unnest, tail, forEach, find, Obj, pairs, allTrueR\n} from \"../common/common\";\nimport {prop, propEq } from \"../common/hof\";\nimport {isArray, isString} from \"../common/predicates\";\nimport {Param} from \"../params/param\";\nimport {ParamTypes} from \"../params/paramTypes\";\nimport {isDefined} from \"../common/predicates\";\nimport {DefType} from \"../params/param\";\nimport {unnestR} from \"../common/common\";\nimport {arrayTuples} from \"../common/common\";\nimport {RawParams} from \"../params/interface\";\n\n/** @hidden */\nfunction quoteRegExp(string: any, param?: any) {\n  let surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj: Obj, prop: string, fn: Function) =>\n    obj[prop] = obj[prop] || fn();\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: { path: UrlMatcher[], pattern?: RegExp } = { path: [], pattern: null };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params:   Param[]      = [];\n  /** @hidden */\n  private _segments: string[]     = [];\n  /** @hidden */\n  private _compiled: string[]     = [];\n\n  /**\n   * A static prefix of this pattern.\n   *\n   * The matcher guarantees that any\n   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n   *   non-null) will start with this prefix.\n   */\n  public prefix: string;\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param config  A configuration object\n   * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   */\n  constructor(pattern: string, paramTypes: ParamTypes, public config?: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m: RegExpExecArray, patterns: any[][] = [];\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp || \"string\") || inherit(paramTypes.type(\"string\"), {\n          pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n        })\n      };\n    }\n\n    let p: any, segment: string;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n\n    extend(this, {\n      _compiled: patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment)),\n      prefix: this._segments[0]\n    });\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    forEach(url._cache, (val, key) => url._cache[key] = isArray(val) ? [] : null);\n    url._cache.path = this._cache.path.concat(this);\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path.length === 0;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    let match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.concat(this).map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.concat(this).map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(string: string) {\n      const reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let split = reverseString(string).split(/-(?!\\\\)/);\n      let allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      let param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    searchParams.forEach(param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.concat(this).map(prop('_params')));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const parent = tail(this._cache.path);\n\n    return (\n      find(this._params, propEq('id', id)) ||\n      (opts.inherit !== false && parent && parent.parameter(id)) ||\n      null\n    );\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val: any) => \n        !param || param.validates(val);\n    return pairs(params || {}).map(([key, val]) => validParamVal(this.parameter(key), val)).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values: RawParams = {}) {\n    if (!this.validates(values)) return null;\n\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let urlMatchers = this._cache.path.slice().concat(this);\n\n    // Extract all the static segments and Params into an ordered array\n    let pathSegmentsAndParams: Array<string|Param> =\n        urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []);\n\n    // Extract the query params into a separate array\n    let queryParams: Array<Param> =\n        urlMatchers.map(UrlMatcher.queryParams).reduce(unnestR, []);\n\n    /**\n     * Given a Param,\n     * Applies the parameter value, then returns details about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let value = param.value(values[param.id]);\n      let isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let encoded = param.type.encode(value);\n\n      return { param, value, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let pathString = pathSegmentsAndParams.reduce((acc: string, x: string|Param) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a Param.  Fetch details about the parameter value\n      let {squash, encoded, param} = getDetails(<Param> x);\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.type.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let queryString = queryParams.map((param: Param) => {\n      let {squash, encoded, isDefaultValue} = getDetails(param);\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.type.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n\n  /** @hidden */\n  static encodeDashes(str: string) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    let staticSegments = matcher._segments;\n    let pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(unnestR, []).filter(x => x !== \"\" && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcher.ts\n **/","/** @module params */ /** for typedoc */\nimport {fromJson, toJson, identity, equals, inherit, map, extend} from \"../common/common\";\nimport {isDefined} from \"../common/predicates\";\nimport {is, val} from \"../common/hof\";\nimport {services} from \"../common/coreservices\";\nimport {ParamType} from \"./type\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n// Use tildes to pre-encode slashes.\n// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n// and bidirectional encoding/decoding fails.\n// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\nfunction valToString(val: any) { return val != null ? val.toString().replace(/(~|\\/)/g, m => ({'~':'~~', '/':'~2F'}[m])) : val; }\nfunction valFromString(val: string) { return val != null ? val.toString().replace(/(~~|~2F)/g, m => ({'~~':'~', '~2F':'/'}[m])) : val; }\n\nexport class ParamTypes {\n  types: any;\n  enqueue: boolean = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = {\n    \"hash\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /.*/,\n      equals: (a: any, b: any) => a == b // allow coersion for null/undefined/\"\"\n    },\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode(val: string) { return parseInt(val, 10); },\n      is(val: any) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /-?\\d+/\n    },\n    \"bool\": {\n      encode: (val: any) => val && 1 || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode(val: any) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode(val: string) {\n        if (this.is(val)) return <any> val as Date;\n        let match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: identity,\n      decode: identity,\n      equals: equals,\n      pattern: /.*/\n    }\n  };\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/paramTypes.ts\n **/","/** @module url */ /** for typedoc */\nimport {extend, bindFunctions, IInjectable, removeFrom} from \"../common/common\";\nimport {isFunction, isString, isDefined, isArray} from \"../common/predicates\";\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {services, $InjectorLike, LocationServices} from \"../common/coreservices\";\nimport {UrlMatcherFactory} from \"./urlMatcherFactory\";\nimport {StateParams} from \"../params/stateParams\";\nimport {RawParams} from \"../params/interface\";\n\n/** @hidden */\nlet $location = services.location;\n\n/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\nfunction regExpPrefix(re: RegExp) {\n  let prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n  return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n}\n\n/** @hidden Interpolates matched values into a String.replace()-style pattern */\nfunction interpolate(pattern: string, match: RegExpExecArray) {\n  return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n    return match[what === '$' ? 0 : Number(what)];\n  });\n}\n\n/** @hidden */\nfunction handleIfMatch($injector: $InjectorLike, $stateParams: RawParams, handler: IInjectable, match: RawParams) {\n  if (!match) return false;\n  let result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n  return isDefined(result) ? result : true;\n}\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean): string {\n  let baseHref = services.locationConfig.baseHref();\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n/** @hidden */\nfunction update(rules: Function[], otherwiseFn: Function, evt?: any) {\n  if (evt && evt.defaultPrevented) return;\n\n  function check(rule: Function) {\n    let handled = rule(services.$injector, $location);\n\n    if (!handled) return false;\n    if (isString(handled)) {\n      $location.setUrl(handled, true);\n    }\n    return true;\n  }\n  let n = rules.length;\n\n  for (let i = 0; i < n; i++) {\n    if (check(rules[i])) return;\n  }\n  // always check otherwise last to allow dynamic updates to the set of rules\n  if (otherwiseFn) check(otherwiseFn);\n}\n\n\n/**\n * Manages rules for client-side URL\n *\n * This class manages the router rules for what to do when the URL changes.\n */\nexport class UrlRouterProvider {\n  /** @hidden */\n  rules: Function[] = [];\n  /** @hidden */\n  otherwiseFn: ($injector: $InjectorLike, $location: LocationServices) => string;\n  /** @hidden */\n  interceptDeferred = false;\n\n  /** @hidden */\n  private $urlMatcherFactory: UrlMatcherFactory;\n  /** @hidden */\n  private $stateParams: StateParams;\n\n  constructor($urlMatcherFactory: UrlMatcherFactory, $stateParams: StateParams) {\n    this.$urlMatcherFactory = $urlMatcherFactory;\n    this.$stateParams = $stateParams;\n  }\n\n  /**\n   * Registers a url handler function.\n   *\n   * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n   * a redirect, or performs some action.\n   *\n   * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param rule\n   * Handler function that takes `$injector` and `$location` services as arguments.\n   * You can use them to detect a url and return a different url as a string.\n   *\n   * @return [[$urlRouterProvider]] (`this`)\n   */\n  rule(rule: ($injector: $InjectorLike, $location: LocationServices) => string): UrlRouterProvider {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    this.rules.push(rule);\n    return this;\n  };\n\n  /**\n   * Remove a rule previously registered\n   *\n   * @param rule the matcher rule that was previously registered using [[rule]]\n   * @return true if the rule was found (and removed)\n   */\n  removeRule(rule): boolean {\n    return this.rules.length !== removeFrom(this.rules, rule).length;\n  }\n\n  /**\n   * Defines the path or behavior to use when no url can be matched.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * ```\n   *\n   * @param rule \n   * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`. \n   * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  otherwise(rule: string | (($injector: $InjectorLike, $location: LocationServices) => string)): UrlRouterProvider {\n    if (!isFunction(rule) && !isString(rule)) throw new Error(\"'rule' must be a string or function\");\n    this.otherwiseFn = isString(rule) ? () => rule : rule;\n    return this;\n  };\n\n  /**\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable.\n   * It gets invoked if `$location` matches.\n   * You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * ```js\n   * \n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n   * @param handler The path (or function that returns a path) that you want to redirect your user to.\n   * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\n   *\n   * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n   */\n  when(what: (RegExp|UrlMatcher|string), handler: string|IInjectable, ruleCallback = function(rule) {}) {\n    let {$urlMatcherFactory, $stateParams} = this;\n    let redirect, handlerIsString = isString(handler);\n\n    // @todo Queue this\n    if (isString(what)) what = $urlMatcherFactory.compile(<string> what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    let strategies = {\n      matcher: function (_what, _handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(_handler);\n          _handler = ['$match', redirect.format.bind(redirect)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n        }, {\n          prefix: isString(_what.prefix) ? _what.prefix : ''\n        });\n      },\n      regex: function (_what, _handler) {\n        if (_what.global || _what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = _handler;\n          _handler = ['$match', ($match) => interpolate(redirect, $match)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(_what)\n        });\n      }\n    };\n\n    let check = {\n      matcher: $urlMatcherFactory.isMatcher(what),\n      regex: what instanceof RegExp\n    };\n\n    for (var n in check) {\n      if (check[n]) {\n        let rule = strategies[n](what, handler);\n        ruleCallback(rule);\n        return this.rule(rule);\n      }\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   $urlRouterProvider.deferIntercept();\n   * })\n   *\n   * app.run(function (MyService, $urlRouter, $http) {\n   *   $http.get(\"/stuff\").then(function(resp) {\n   *     MyService.doStuff(resp.data);\n   *     $urlRouter.listen();\n   *     $urlRouter.sync();\n   *   });\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception. Passing\n   *        no parameter is equivalent to `true`.\n   */\n  deferIntercept(defer) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nexport class UrlRouter {\n  /** @hidden */\n  private location: string;\n  /** @hidden */\n  private listener: Function;\n  /** @hidden */\n  private urlRouterProvider: UrlRouterProvider;\n\n\n  /** @hidden */\n  constructor(urlRouterProvider: UrlRouterProvider) {\n    this.urlRouterProvider = urlRouterProvider;\n    bindFunctions(UrlRouter.prototype, this, this);\n  }\n\n  /**\n   * Checks the current URL for a matching rule\n   *\n   * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n   * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n   * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n   * with the transition by calling `$urlRouter.sync()`.\n   *\n   * @example\n   * ```js\n   *\n   * angular.module('app', ['ui.router'])\n   *   .run(function($rootScope, $urlRouter) {\n   *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n   *       // Halt state change from even starting\n   *       evt.preventDefault();\n   *       // Perform custom logic\n   *       var meetsRequirement = ...\n   *       // Continue with the update and state transition if logic allows\n   *       if (meetsRequirement) $urlRouter.sync();\n   *     });\n   * });\n   * ```\n   */\n  sync() {\n    update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n  }\n\n  /**\n   * Starts listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n   */\n  listen(): Function {\n    return this.listener = this.listener || $location.onChange(evt => update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn, evt));\n  }\n\n  /**\n   * Internal API.\n   */\n  update(read?: boolean) {\n    if (read) {\n      this.location = $location.path();\n      return;\n    }\n    if ($location.path() === this.location) return;\n\n    $location.setUrl(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params: StateParams, options: { replace?: (string|boolean) }) {\n    let replace = options && !!options.replace;\n    $location.setUrl(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * @example\n   * ```js\n   *\n   * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n   *   person: \"bob\"\n   * });\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params: any, options: { absolute: boolean }): string {\n    if (!urlMatcher.validates(params)) return null;\n\n    let url = urlMatcher.format(params);\n    options = options || { absolute: false };\n\n    let cfg = services.locationConfig;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute);\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlRouter.ts\n **/","/** @module transition */ /** for typedoc */\nimport {\n    IHookRegistry, TransitionOptions, HookMatchCriteria, HookRegOptions,\n    TransitionStateHookFn, TransitionHookFn\n} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {HookRegistry} from \"./hookRegistry\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {IEventHook} from \"./interface\";\nimport {ViewService} from \"../view/view\";\nimport {UIRouter} from \"../router\";\n\nimport {registerEagerResolvePath, registerLazyResolveState} from \"../hooks/resolve\";\nimport {registerLoadEnteringViews, registerActivateViews} from \"../hooks/views\";\nimport {registerUpdateUrl} from \"../hooks/url\";\nimport {registerRedirectToHook} from \"../hooks/redirectTo\";\nimport {registerOnExitHook, registerOnRetainHook, registerOnEnterHook} from \"../hooks/onEnterExitRetain\";\nimport {registerLazyLoadHook} from \"../hooks/lazyLoadStates\";\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null,\n  source      : \"unknown\"\n};\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry {\n  /** @hidden */\n  public $view: ViewService;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  constructor(private _router: UIRouter) {\n    this.$view = _router.viewService;\n    HookRegistry.mixin(new HookRegistry(), this);\n    this._deregisterHookFns = <any> {};\n    this.registerTransitionHooks();\n  }\n\n  /** @hidden */\n  private registerTransitionHooks() {\n    let fns = this._deregisterHookFns;\n\n    // Wire up redirectTo hook\n    fns.redirectTo    = registerRedirectToHook(this);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit        = registerOnExitHook(this);\n    fns.onRetain      = registerOnRetainHook(this);\n    fns.onEnter       = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve  = registerEagerResolvePath(this);\n    fns.lazyResolve   = registerLazyResolveState(this);\n\n    // Wire up the View management hooks\n    fns.loadViews     = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl     = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad      = registerLazyLoadHook(this);\n  }\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n\n  /** @hidden */\n  getHooks  : (hookName: string) => IEventHook[];\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionService.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {val} from \"../common/hof\";\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(noop);\n\nexport const registerEagerResolvePath = (transitionService: TransitionService) =>\n    transitionService.onStart({}, eagerResolvePath, {priority: 1000});\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: State) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state)\n        .resolvePath(\"LAZY\", trans)\n        .then(noop);\n\nexport const registerLazyResolveState = (transitionService: TransitionService) =>\n    transitionService.onEnter({ entering: val(true) }, lazyResolveState, {priority: 1000});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/resolve.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {Transition} from \"../transition/transition\";\nimport {ViewService} from \"../view/view\";\nimport {ViewConfig} from \"../view/interface\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  let enteringViews = transition.views(\"entering\");\n  if (!enteringViews.length) return;\n  return services.$q.all(enteringViews.map(view => view.load())).then(noop);\n};\n\nexport const registerLoadEnteringViews = (transitionService: TransitionService) =>\n    transitionService.onStart({}, loadEnteringViews);\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  let enteringViews = transition.views(\"entering\");\n  let exitingViews = transition.views(\"exiting\");\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  let $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const registerActivateViews = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, activateViews);\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/views.ts\n **/","/** @module hooks */ /** */\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {StateService} from \"../state/stateService\";\nimport {Transition} from \"../transition/transition\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n/** \n * A [[TransitionHookFn]] which updates the URL after a successful transition\n * \n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  let options = transition.options();\n  let $state: StateService = transition.router.stateService;\n  let $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    var urlOptions = {replace: options.location === 'replace'};\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const registerUpdateUrl = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, updateUrl, {priority: 9999});\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/url.ts\n **/","/** @module hooks */ /** */\nimport {isString, isFunction} from \"../common/predicates\"\nimport {Transition} from \"../transition/transition\";\nimport {services} from \"../common/coreservices\";\nimport {TargetState} from \"../state/targetState\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {TransitionHookFn} from \"../transition/interface\";\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n * \n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  let redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  function handleResult(result: any) {\n    let $state = trans.router.stateService;\n\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n    transitionService.onStart({to: (state) => !!state.redirectTo}, redirectToHook);\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/redirectTo.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {TransitionStateHookFn} from \"../transition/interface\";\nimport {State} from \"../state/stateObject\";\nimport {Transition} from \"../transition/transition\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: State) => {\n    let hookFn: TransitionStateHookFn = state[hookName];\n    return hookFn(transition, state);\n  }\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n    transitionService.onExit({exiting: state => !!state.onExit}, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n    transitionService.onRetain({retained: state => !!state.onRetain}, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n    transitionService.onEnter({entering: state => !!state.onEnter}, onEnterHook);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/onEnterExitRetain.ts\n **/","/** @module hooks */ /** */\nimport {Transition} from \"../transition/transition\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {StateDeclaration, LazyLoadResult} from \"../state/interface\";\nimport {State} from \"../state/stateObject\";\nimport {services} from \"../common/coreservices\";\n\n/**\n * A [[TransitionHookFn]] that lazy loads a state tree.\n *\n * When transitioning to a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function\n *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s\n * - Wait for the promise to resolve\n * - Deregister the original state \"abc\"\n *   - The original state definition is a placeholder for the lazy loaded states\n * - Register the new states\n * - Retry the transition\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nconst lazyLoadHook: TransitionHookFn = (transition: Transition) => {\n  var toState = transition.to();\n  let registry = transition.router.stateRegistry;\n\n  function retryOriginalTransition() {\n    if (transition.options().source === 'url') {\n      let loc = services.location, path = loc.path(), search = loc.search(), hash = loc.hash();\n\n      let matchState = state => [state, state.url && state.url.exec(path, search, hash)];\n      let matches = registry.get().map(s => s.$$state()).map(matchState).filter(([state, params]) => !!params);\n\n      if (matches.length) {\n        let [state, params] = matches[0];\n        return transition.router.stateService.target(state, params, transition.options());\n      }\n      transition.router.urlRouter.sync();\n    }\n\n    // The original transition was not triggered via url sync\n    // The lazy state should be loaded now, so re-try the original transition\n    let orig = transition.targetState();\n    return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());\n  }\n\n  /**\n   * Replace the placeholder state with the newly loaded states from the NgModule.\n   */\n  function updateStateRegistry(result: LazyLoadResult) {\n    // deregister placeholder state\n    registry.deregister(transition.$to());\n    if (result && Array.isArray(result.states)) {\n      result.states.forEach(state => registry.register(state));\n    }\n  }\n\n  let hook = toState.lazyLoad;\n  // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n  let promise = hook['_promise'];\n  if (!promise) {\n    promise = hook['_promise'] = hook(transition).then(updateStateRegistry);\n    const cleanup = () => delete hook['_promise'];\n    promise.then(cleanup, cleanup);\n  }\n\n  return promise.then(retryOriginalTransition);\n};\n\nexport const registerLazyLoadHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({ to: (state) => !!state.lazyLoad }, lazyLoadHook);\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/lazyLoadStates.ts\n **/","/** @module view */ /** for typedoc */\nimport {equals, applyPairs, removeFrom, TypedMap} from \"../common/common\";\nimport {curry, prop} from \"../common/hof\";\nimport {isString, isArray} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {PathNode} from \"../path/node\";\n\nimport {ActiveUIView, ViewContext, ViewConfig} from \"./interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\n/**\n * The View service\n */\nexport class ViewService {\n  private uiViews: ActiveUIView[] = [];\n  private viewConfigs: ViewConfig[] = [];\n  private _rootContext: ViewContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n\n  constructor() { }\n\n  rootContext(context?: ViewContext): ViewContext {\n    return this._rootContext = context || this._rootContext;\n  };\n\n  viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    let cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    let cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n  \n  /**\n   * De-registers a ViewConfig.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this.viewConfigs, viewConfig);\n  };\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", <any> viewConfig);\n    this.viewConfigs.push(viewConfig);\n  };\n\n  sync = () => {\n    let uiViewsByFqn: TypedMap<ActiveUIView> =\n        this.uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    /**\n     * Given a ui-view and a ViewConfig, determines if they \"match\".\n     *\n     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n     *\n     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n     * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n     *\n     * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n     *\n     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n     * - the ui-view's name matches the ViewConfig's target name\n     * - the ui-view's context matches the ViewConfig's anchor\n     *\n     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n     * - There exists a parent ui-view where:\n     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n     *    - the parent ui-view's context matches the ViewConfig's anchor\n     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n     *\n     * Example:\n     *\n     * DOM:\n     * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n     *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n     *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n     *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n     *       </div>\n     *     </div>\n     *   </div>\n     * </div>\n     *\n     * uiViews: [\n     *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n     *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n     *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n     *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n     * ]\n     *\n     * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n     *\n     * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n     * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n     * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n     * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n     *\n     * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n     * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n     * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n     *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n     *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n     * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n     *   the tail of the ui-view's fqn \"default.bar\"\n     */\n    const matches = (uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n      // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n      if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n      // Split names apart from both viewConfig and uiView into segments\n      let vc = viewConfig.viewDecl;\n      let vcSegments = vc.$uiViewName.split(\".\");\n      let uivSegments = uiView.fqn.split(\".\");\n\n      // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n        return false;\n\n      // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n      let negOffset = (1 - vcSegments.length) || undefined;\n      let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n      let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n\n    // Return the number of dots in the fully qualified name\n    function uiViewDepth(uiView: ActiveUIView) {\n      return uiView.fqn.split(\".\").length;\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = uiView => {\n      let matchingConfigs = this.viewConfigs.filter(matches(uiView));\n      if (matchingConfigs.length > 1)\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const configureUIView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this.uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n  };\n\n  /**\n   * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n   * be updated with a template, controller, and local variables.\n   *\n   * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n   * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n   *                   of the view.\n   * @return {Function} Returns a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n    let uiViews = this.uiViews;\n    const fqnMatches = uiv => uiv.fqn === uiView.fqn;\n    if (uiViews.filter(fqnMatches).length)\n      trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this.uiViews.map(prop(\"fqn\"));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this.uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let viewAtContext: string[] = rawViewName.split(\"@\");\n    let uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./view/view.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateQueueManager} from \"./stateQueueManager\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {StateDeclaration} from \"./interface\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateOrName} from \"./interface\";\nimport {UrlRouterProvider} from \"../url/urlRouter\";\nimport {removeFrom} from \"../common/common\";\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStateRegistryEvent]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: \"registered\"|\"deregistered\", states: StateDeclaration[]) => void;\n\nexport class StateRegistry {\n  private _root: State;\n  private states: { [key: string]: State } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  listeners: StateRegistryListener[] = [];\n\n  constructor(urlMatcherFactory: UrlMatcherFactory, private urlRouterProvider: UrlRouterProvider) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);\n\n    let rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true }\n      },\n      abstract: true\n    };\n\n    let _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * @example\n   * ```js\n   *\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n  onStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[State]]\n   */\n  root() {\n    return this._root;\n  }\n\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDefinition]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[State]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n  register(stateDefinition: StateDeclaration): State {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  /** @hidden */\n  private _deregisterTree(state: State) {\n    let all = this.get().map(s => s.$$state());\n    const getChildren = (states: State[]) => {\n      let children = all.filter(s => states.indexOf(s.parent) !== -1);\n      return children.length === 0 ? children : children.concat(getChildren(children));\n    };\n\n    let children = getChildren([state]);\n    let deregistered = [state].concat(children).reverse();\n\n    deregistered.forEach(state => {\n      this.urlRouterProvider.removeRule(state._urlRule);\n      delete this.states[state.name];\n    });\n\n    return deregistered;\n  }\n\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {State[]} a list of removed states\n   */\n  deregister(stateOrName: StateOrName) {\n    let _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    let deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(listener => listener(\"deregistered\", deregisteredStates.map(s => s.self)));\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    let found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateRegistry.ts\n **/","/** @module state */ /** for typedoc */\nimport {isString} from \"../common/predicates\";\nimport {StateOrName} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {Glob} from \"../common/glob\";\nimport {values} from \"../common/common\";\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: State }) { }\n  \n  isRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName): State {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    } else if (isStr) {\n      let matches = values(this._states)\n          .filter(state => new Glob(state.name).matches(name));\n\n      if (matches.length > 1) {\n        console.log(`stateMatcher.find: Found multiple matches for ${name} using glob: `, matches.map(match => match.name));\n      }\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let baseState: State = this.find(base);\n\n    let splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateMatcher.ts\n **/","/** @module state */ /** for typedoc */\nimport {Obj, omit, noop, extend, inherit, values, applyPairs, tail, mapObj, identity} from \"../common/common\";\nimport {isDefined, isFunction, isString, isArray} from \"../common/predicates\";\nimport {stringify} from \"../common/strings\";\nimport {prop, pattern, is, pipe, val} from \"../common/hof\";\nimport {StateDeclaration} from \"./interface\";\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {services} from \"../common/coreservices\";\nimport {ResolvePolicy} from \"../resolve/interface\";\nimport {ParamTypes} from \"../params/paramTypes\";\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: State, parent?: BuilderFunction) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  name: BuilderFunction[];\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\n\nfunction nameBuilder(state: State) {\n  if (state.lazyLoad)\n    state.name = state.self.name + \".**\";\n  return state.name;\n}\n\nfunction selfBuilder(state: State) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: State) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider: UrlMatcherFactory, root: () => State) =>\nfunction urlBuilder(state: State) {\n  let stateDec: StateDeclaration = <any> state;\n\n  if (stateDec && stateDec.url && stateDec.lazyLoad) {\n    stateDec.url += \"{remainder:any}\"; // match any path (.*)\n  }\n\n  const parsed = parseUrl(stateDec.url), parent = state.parent;\n  const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig: any, isSearch: boolean) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n      return paramConfig;\n    }\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n};\n\nconst getNavigableBuilder = (isRoot: (state: State) => boolean) =>\nfunction navigableBuilder(state: State) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nconst getParamsBuilder = (paramTypes: ParamTypes) => \nfunction paramsBuilder(state: State): { [key: string]: Param } {\n  const makeConfigParam = (config: any, id: string) => Param.fromConfig(id, null, config, paramTypes);\n  let urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n  let nonUrlParams: Param[] = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n};\n\nfunction pathBuilder(state: State) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: State) {\n  let includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: State): Resolvable[] {\n  interface Tuple { token: any, val: any, deps: any[], policy: ResolvePolicy }\n  \n  /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n  const objects2Tuples    = (resolveObj: Obj, resolvePolicies: { [key: string]: ResolvePolicy }) =>\n      Object.keys(resolveObj || {}).map(token => ({token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token]}));\n\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate          = (fn: Function)  =>\n      fn['$inject'] || services.$injector.annotate(fn, services.$injector.strictDi);\n\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral  = (obj: any) => !!(obj.token && obj.resolveFn);\n\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = (obj: any) => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj    = (obj: any) => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n\n  /** extracts the token from a Provider or provide literal */\n  const token             = (p: any) => p.provide || p.token;\n\n  /** Given a literal resolve or provider object, returns a Resolvable */\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(token(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(token(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(token(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(token(p), identity, [p.useExisting], p.policy)],\n  ]);\n\n  const tuple2Resolvable = pattern([\n    [pipe(prop(\"val\"), isString),   (tuple: Tuple) => new Resolvable(tuple.token, identity, [ tuple.val ], tuple.policy)],\n    [pipe(prop(\"val\"), isArray),    (tuple: Tuple) => new Resolvable(tuple.token, tail(<any[]> tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop(\"val\"), isFunction), (tuple: Tuple) => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const item2Resolvable = <(obj: any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     (obj: any) => { throw new Error(\"Invalid resolve value: \" + stringify(obj)) }]\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  let decl = state.resolve;\n  let items: any[] = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n  return items.map(item2Resolvable);\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[State]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[State]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, $urlMatcherFactoryProvider: UrlMatcherFactory) {\n    let self = this;\n\n    const root = () => matcher.find(\"\");\n    const isRoot = (state: State) => state.name === \"\";\n\n    function parentBuilder(state: State) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      name: [ nameBuilder ],\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder($urlMatcherFactoryProvider, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ getParamsBuilder($urlMatcherFactoryProvider.paramTypes) ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ]\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction): (BuilderFunction|BuilderFunction[]|Function) {\n    let builders = this.builders;\n    let array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: State): State {\n    let {matcher, builders} = this;\n    let parent = this.parentName(state);\n    if (parent && !matcher.find(parent)) return null;\n\n    for (let key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let chain = builders[key].reduce((parentFn: BuilderFunction, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state: State) {\n    let name = state.name || \"\";\n\n    let segments = name.split('.');\n    if (segments.length > 1) {\n      if (state.parent) {\n        throw new Error(`States that specify the 'parent:' property should not have a '.' in their name (${name})`);\n      }\n      var lastSegment = segments.pop();\n      if (lastSegment === '**') segments.pop();\n      return segments.join(\".\");\n    }\n\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state: State) {\n    let name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateBuilder.ts\n **/","/** @module state */ /** for typedoc */\nimport {extend, inherit, pluck, equalForKeys} from \"../common/common\";\nimport {isString} from \"../common/predicates\";\nimport {StateDeclaration} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateService} from \"./stateService\";\nimport {UrlRouterProvider} from \"../url/urlRouter\";\nimport {RawParams} from \"../params/interface\";\nimport {StateRegistry, StateRegistryListener} from \"./stateRegistry\";\n\nexport class StateQueueManager {\n  queue: State[];\n  private $state: StateService;\n\n  constructor(\n      public states: { [key: string]: State; },\n      public builder: StateBuilder,\n      public $urlRouterProvider: UrlRouterProvider,\n      public listeners: StateRegistryListener[]) {\n    this.queue = [];\n  }\n\n  register(config: StateDeclaration) {\n    let {states, queue, $state} = this;\n    // Wrap a new object around the state so we can store our private details easily.\n    // @TODO: state = new State(extend({}, config, { ... }))\n    let state = inherit(new State(), extend({}, config, {\n      self: config,\n      resolve: config.resolve || [],\n      toString: () => config.name\n    }));\n\n    if (!isString(state.name)) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(state.name) || pluck(queue, 'name').indexOf(state.name) !== -1)\n      throw new Error(`State '${state.name}' is already defined`);\n\n    queue.push(state);\n\n    if (this.$state) {\n      this.flush($state);\n    }\n    return state;\n  }\n\n  flush($state: StateService) {\n    let {queue, states, builder} = this;\n    let registered: State[] = [], // states that got registered\n        orphans: State[] = [], // states that dodn't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n\n    while (queue.length > 0) {\n      let state: State = queue.shift();\n      let result: State = builder.build(state);\n      let orphanIdx: number = orphans.indexOf(state);\n\n      if (result) {\n        if (states.hasOwnProperty(state.name))\n          throw new Error(`State '${name}' is already defined`);\n        states[state.name] = state;\n        this.attachRoute($state, state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        registered.push(state);\n        continue;\n      }\n\n      let prev = previousQueueLength[state.name];\n      previousQueueLength[state.name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${state.name}'`);\n        queue.push(state);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n\n    if (registered.length) {\n      this.listeners.forEach(listener => listener(\"registered\", registered.map(s => s.self)));\n    }\n\n    return states;\n  }\n\n  autoFlush($state: StateService) {\n    this.$state = $state;\n    this.flush($state);\n  }\n\n  attachRoute($state: StateService, state: State) {\n    let {$urlRouterProvider} = this;\n    if (state.abstract || !state.url) return;\n\n    $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match: RawParams, $stateParams: RawParams) {\n      if ($state.$current.navigable !== state || !equalForKeys($match, $stateParams)) {\n        $state.transitionTo(state, $match, { inherit: true, source: \"url\" });\n      }\n    }], (rule) => state._urlRule = rule);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateQueueManager.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, _ViewDeclaration} from \"./interface\";\nimport {extend, defaults, values, find} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {TransitionStateHookFn} from \"../transition/interface\";\nimport {TargetState} from \"./targetState\";\nimport {Transition} from \"../transition/transition\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:State\n *\n * @description\n * Definition object for states. Includes methods for manipulating the state heirarchy.\n *\n * @param {Object} config  A configuration object hash that includes the results of user-supplied\n *        values, as well as values from `StateBuilder`.\n *\n * @returns {Object}  Returns a new `State` object.\n */\nexport class State {\n\n  public parent: State;\n  public name: string;\n  public abstract: boolean;\n  public resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n  public resolvables: Resolvable[];\n  public resolvePolicy: any;\n  public url: UrlMatcher;\n  /** @hidden temporary place to put the rule registered with $urlRouter.when() */\n  public _urlRule: any;\n  public params: { [key: string]: Param };\n  public views: { [key: string]: _ViewDeclaration; };\n  public self: StateDeclaration;\n  public navigable: State;\n  public path: State[];\n  public data: any;\n  public includes: { [name: string] : boolean };\n\n  public onExit: TransitionStateHookFn;\n  public onRetain: TransitionStateHookFn;\n  public onEnter: TransitionStateHookFn;\n  public lazyLoad: (transition: Transition) => Promise<StateDeclaration[]>;\n\n  redirectTo: (\n      string |\n      (($transition$: Transition) => TargetState) |\n      { state: (string|StateDeclaration), params: { [key: string]: any }}\n  );\n\n\n  constructor(config?: StateDeclaration) {\n    extend(this, config);\n    // Object.freeze(this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#is\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: State|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#fqn\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the fully-qualified name of the state, based on its current position in the tree.\n   *\n   * @returns {string} Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#root\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the root node of this state's tree.\n   *\n   * @returns {State} The root of this state's tree.\n   */\n  root(): State {\n    return this.parent && this.parent.root() || this;\n  }\n\n  parameters(opts?: { inherit: boolean }): Param[] {\n    opts = defaults(opts, { inherit: true });\n    let inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params));\n  }\n\n  parameter(id: string, opts: any = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateObject.ts\n **/","/** @module state */ /** */\nimport {extend, defaults, silentRejection, silenceUncaughtInPromise, removeFrom} from \"../common/common\";\nimport {isDefined, isObject, isString} from \"../common/predicates\";\nimport {Queue} from \"../common/queue\";\nimport {services} from \"../common/coreservices\";\n\nimport {PathFactory} from \"../path/pathFactory\";\nimport {PathNode} from \"../path/node\";\n\nimport {TransitionOptions, HookResult} from \"../transition/interface\";\nimport {defaultTransOpts} from \"../transition/transitionService\";\nimport {Rejection, RejectType} from \"../transition/rejectFactory\";\nimport {Transition} from \"../transition/transition\";\n\nimport {StateOrName, StateDeclaration, TransitionPromise} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {TargetState} from \"./targetState\";\n\nimport {RawParams} from \"../params/interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Glob} from \"../common/glob\";\nimport {equalForKeys} from \"../common/common\";\nimport {HrefOptions} from \"./interface\";\nimport {bindFunctions} from \"../common/common\";\nimport {Globals} from \"../globals\";\nimport {UIRouter} from \"../router\";\nimport {UIInjector} from \"../common/interface\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {StateParams} from \"../params/stateParams\"; // has or is using\n\nexport type OnInvalidCallback =\n    (toState?: TargetState, fromState?: TargetState, injector?: UIInjector) => HookResult;\n\nexport class StateService {\n  invalidCallbacks: OnInvalidCallback[] = [];\n\n  get transition()  { return this.router.globals.transition; }\n  get params()      { return this.router.globals.params; }\n  get current()     { return this.router.globals.current; }\n  get $current()    { return this.router.globals.$current; }\n\n  /** @hidden */\n  constructor(private router: UIRouter) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(key => getters.indexOf(key) === -1);\n    bindFunctions(StateService.prototype, this, this, boundFns);\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], toState: TargetState) {\n    let fromState = PathFactory.makeTargetState(fromPath);\n    let globals = <Globals> this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    let latest = latestThing();\n    let callbackQueue = new Queue<OnInvalidCallback>(this.invalidCallbacks.slice());\n    let injector = new ResolveContext(fromPath).injector();\n\n    const checkForRedirect = (result: HookResult) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) return Rejection.invalid(target.error()).toPromise();\n      if (latestThing() !== latest) return Rejection.superseded().toPromise();\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      let nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid(toState.error()).toPromise();\n\n      let callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n      return callbackResult.then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * Registers an Invalid State handler\n   *\n   * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n   * has been called with an invalid state reference parameter\n   *\n   * Example:\n   * ```js\n   * stateService.onInvalid(function(to, from, injector) {\n   *   if (to.name() === 'foo') {\n   *     let lazyLoader = injector.get('LazyLoadService');\n   *     return lazyLoader.load('foo')\n   *         .then(() => stateService.target('foo'));\n   *   }\n   * });\n   * ```\n   *\n   * @param {function} callback invoked when the toState is invalid\n   *   This function receives the (invalid) toState, the fromState, and an injector.\n   *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n   *   If one is returned, it is treated as a redirect.\n   *\n   * @returns a function which deregisters the callback\n   */\n  onInvalid(callback: OnInvalidCallback): Function {\n    this.invalidCallbacks.push(callback);\n    return function deregisterListener() {\n      removeFrom(this.invalidCallbacks)(callback);\n    }.bind(this);\n  }\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#reload\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n   * controllers reinstantiated, and events re-fired.\n   *\n   * @example\n   * <pre>\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * </pre>\n   *\n   * `reload()` is just an alias for:\n   * <pre>\n   * $state.transitionTo($state.current, $stateParams, {\n   *   reload: true, inherit: false, notify: true\n   * });\n   * </pre>\n   *\n   * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n   * @example\n   * <pre>\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * </pre>\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  reload(reloadState?: StateOrName): Promise<State> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false\n    });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#go\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Convenience method for transitioning to a new state. `$state.go` calls\n   * `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n   * This allows you to easily use an absolute or relative to path and specify\n   * only the parameters you'd like to update (while letting unspecified parameters\n   * inherit from the currently active ancestor states).\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * </pre>\n   * <img src='../ngdoc_assets/StateGoExamples.png'/>\n   *\n   * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to a parent state\n   * - `$state.go('^.sibling')` - will go to a sibling state\n   * - `$state.go('.child.grandchild')` - will go to grandchild state\n   *\n   * @param {object=} params A map of the parameters that will be sent to the state,\n   * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n   * defined parameters. This allows, for example, going to a sibling state that shares parameters\n   * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n   * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n   * will get you all current parameters, etc.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   *\n   * Possible success values:\n   *\n   * - $state.current\n   *\n   * <br/>Possible rejection values:\n   *\n   * - 'transition superseded' - when a newer transition has been started after this one\n   * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n   * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n   *   when a `$stateNotFound` `event.retry` promise errors.\n   * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n   * - *resolve error* - when an error has occurred with a `resolve`\n   *\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    let defautGoOpts = { relative: this.$current, inherit: true };\n    let transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n\n  /** Factory method for creating a TargetState */\n  target(identifier: StateOrName, params?: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    let reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    let stateDefinition = reg.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#transitionTo\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n   * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * </pre>\n   *\n   * @param {string|object} to State name or state object.\n   * @param {object=} toParams A map of the parameters that will be sent to the state,\n   * will populate $stateParams.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    let router = this.router;\n    let globals = <Globals> router.globals;\n    let transHistory = globals.transitionHistory;\n    options = defaults(options, defaultTransOpts);\n    options = extend(options, { current: transHistory.peekTail.bind(transHistory)});\n\n    let ref: TargetState = this.target(to, toParams, options);\n    let latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    let currentPath: PathNode[] = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return <TransitionPromise> silentRejection(ref.error());\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (transition: Transition) => (error: any): Promise<any> => {\n      if (error instanceof Rejection) {\n        if (error.type === RejectType.IGNORED) {\n          // Consider ignored `Transition.run()` as a successful `transitionTo`\n          router.urlRouter.update();\n          return services.$q.when(globals.current);\n        }\n\n        const detail: any = error.detail;\n        if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n          // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n          // by returning the promise for the new (redirect) `Transition.run()`.\n          let redirect: Transition = transition.redirect(detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          router.urlRouter.update();\n          // Fall through to default error handler\n        }\n      }\n\n      var errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    let transition = this.router.transitionService.create(currentPath, ref);\n    let transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#is\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n   * but only checks for the full state name. If params is supplied then it will be\n   * tested for strict equality against the current active params object, so all params\n   * must match with none missing and no extras.\n   *\n   * @example\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   * test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    return isDefined(params) && params !== null ? Param.equals(state.parameters(), this.params, params) : true;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#includes\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * @example\n   * Partial and relative names\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   *\n   * // Using relative names (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n   * </pre>\n   *\n   * Basic globbing patterns\n   * <pre>\n   * $state.$current.name = 'contacts.details.item.url';\n   *\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * </pre>\n   *\n   * @param {string|object} stateOrName A partial name, relative name, glob pattern,\n   * or state object to be searched for within the current state name.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n   * that you'd like to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n   * .includes will test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    // @TODO Replace with Param.equals() ?\n    return params ? equalForKeys(Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n  };\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#href\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A url generation method that returns the compiled url for the given state populated with the given params.\n   *\n   * @example\n   * <pre>\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n   * @param {object=} params An object of parameter values to fill the state's required parameters.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n   *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n   *    ancestor with a valid url).\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params: RawParams, options?: HrefOptions): string {\n    let defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current\n    };\n    options = defaults(options, defaultHrefOpts);\n    params = params || {};\n\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params, this.$current, state);\n\n    let nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, Param.values(state.parameters(), params), {\n      absolute: options.absolute\n    });\n  };\n\n  /** @hidden */\n  private _defaultErrorHandler: ((_error: any) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$);\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$.toString());\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * Note:\n   * This handler does not receive certain Transition rejections.\n   * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * @example\n   * ```js\n   *\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error: any) => void): (error: any) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#get\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Returns the state configuration object for any specific state or all states.\n   *\n   * @param {string|Object=} stateOrName (absolute or relative) If provided, will only get the config for\n   * the requested state. If not provided, returns an array of ALL state configs.\n   * @param {string|object=} base When stateOrName is a relative state reference, the state will be retrieved relative to context.\n   * @returns {Object|Array} State configuration object or array of all objects.\n   */\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    let reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateService.ts\n **/","/** @module core */ /** */\nimport {StateParams} from \"./params/stateParams\";\nimport {StateDeclaration} from \"./state/interface\";\nimport {State} from \"./state/stateObject\";\nimport {Transition} from \"./transition/transition\";\nimport {Queue} from \"./common/queue\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {copy} from \"./common/common\";\nimport {Observable} from \"rxjs/Rx\";\n\n/**\n * Global mutable state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport interface UIRouterGlobals {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  $current: State;\n  /**\n   * The current transition (in progress)\n   */\n  transition: Transition;\n}\n\n\n/**\n * Global mutable state\n */\nexport class Globals implements UIRouterGlobals {\n  params: StateParams = new StateParams();\n  current: StateDeclaration;\n  $current: State;\n  transition: Transition;\n  transitionHistory = new Queue<Transition>([], 1);\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  constructor(transitionService: TransitionService) {\n    const beforeNewTransition = ($transition$: Transition) => {\n\n      this.transition = $transition$;\n      this.transitionHistory.enqueue($transition$);\n\n      const updateGlobalState = () => {\n        this.successfulTransitions.enqueue($transition$);\n        this.$current = $transition$.$to();\n        this.current = this.$current.self;\n        copy($transition$.params(), this.params);\n      };\n\n      $transition$.onSuccess({}, updateGlobalState, {priority: 10000});\n\n      const clearCurrentTransition = () => { if (this.transition === $transition$) this.transition = null; };\n\n      $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\n    };\n\n    transitionService.onBefore({}, beforeNewTransition);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./globals.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, ancestors, Obj} from \"../common/common\";\nimport {State} from \"../state/stateObject\";\n\nexport class StateParams {\n  [key: string]: any;\n\n  constructor(params: Obj = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams: Obj, $current: State, $to: State) {\n    let parents = ancestors($current, $to),\n        parentParams: string[],\n        inherited: Obj = {},\n        inheritList: string[] = [];\n\n    for (let i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/stateParams.ts\n **/","/**\n * This module contains code for State Parameters.\n *\n * See [[ParamDeclaration]]\n * @module params\n * @preferred doc\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./param\";\nexport * from \"./paramTypes\";\nexport * from \"./stateParams\";\nexport * from \"./type\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/module.ts\n **/","/** @module path */ /** for typedoc */\nexport * from \"./node\";\nexport * from \"./pathFactory\";\n\n\n/** WEBPACK FOOTER **\n ** ./path/module.ts\n **/","/** @module resolve */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./resolvable\";\nexport * from \"./resolveContext\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/module.ts\n **/","/** @module state */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./stateBuilder\";\nexport * from \"./stateObject\";\nexport * from \"./stateMatcher\";\nexport * from \"./stateQueueManager\";\nexport * from \"./stateRegistry\";\nexport * from \"./stateService\";\nexport * from \"./targetState\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/module.ts\n **/","/**\n * This module contains APIs related to a Transition.\n *\n * See [[Transition]], [[$transitions]]\n *\n * @module transition\n * @preferred\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./hookBuilder\";\nexport * from \"./hookRegistry\";\nexport * from \"./rejectFactory\";\nexport * from \"./transition\";\nexport * from \"./transitionHook\";\nexport * from \"./transitionService\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/module.ts\n **/","/** @module url */ /** for typedoc */\nexport * from \"./urlMatcher\";\nexport * from \"./urlMatcherConfig\";\nexport * from \"./urlMatcherFactory\";\nexport * from \"./urlRouter\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/module.ts\n **/","/** @module view */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./view\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./view/module.ts\n **/","/**\n * Naive, pure JS implementation of core ui-router services\n *\n * @module justjs\n */ /** */\nexport * from \"./core\";\nimport {services} from \"./common/coreservices\";\nimport {stringify} from \"./common/strings\";\nimport {isFunction, isArray, isObject, isInjectable} from \"./common/predicates\";\nimport {extend, assertPredicate, TypedMap, Obj} from \"./common/common\";\n\n/** $q-like promise api */\nservices.$q = ((executor) => new Promise(executor)) as any;\nservices.$q.when = (val) => Promise.resolve(val);\nservices.$q.reject = (val) => Promise.reject(val);\nservices.$q.defer = function() {\n  let deferred: any = {};\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred;\n};\n\ntype Promises = TypedMap<Promise<any>>;\n\nservices.$q.all = function (promises: Promises | Promise<any>[]) {\n  if (isArray(promises)) {\n    return Promise.all(promises);\n  }\n\n  if (isObject(promises)) {\n    var p = <Promises> promises;\n    // Convert promises map to promises array.\n    // When each promise resolves, map it to a tuple { key: key, val: val }\n    let objectToTuples = Object.keys(promises)\n        .map(key => p[key].then(val => ({key, val})));\n\n    const tuplesToObject = (values: any[]) =>\n        values.reduce((acc, tuple) => { acc[tuple.key] = tuple.val; return acc; }, {});\n\n    // Then wait for all promises to resolve, and convert them back to an object\n    return services.$q.all(objectToTuples).then(tuplesToObject);\n  }\n};\n\n\n\n\n\n// angular1-like injector api\n\n// globally available injectables\nlet globals: { [key: string]: any } = {};\nservices.$injector = {\n  get: (name: any) => globals[<string> name],\n\n  has: (name: any) => services.$injector.get(name) != null,\n\n  invoke: function(fn: Function, context?: any, locals?: Obj) {\n    let all = extend({}, globals, locals || {});\n    let params = services.$injector.annotate(fn);\n    let ensureExist = assertPredicate(key => all.hasOwnProperty(key), (key: any) => `Could not find Dependency Injection token: ${stringify(key)}`);\n    let args = params.filter(ensureExist).map(x => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    return (fn as any).slice(-1)[0].apply(context, args);\n  },\n\n  // http://stackoverflow.com/questions/1007981\n  annotate: function(fn: Function) {\n    let STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    let ARGUMENT_NAMES = /([^\\s,]+)/g;\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && fn['$inject']) return fn['$inject'];\n    if (isArray(fn)) return (fn as any).slice(0, -1);\n    let fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  }\n\n};\n\nlet loc = <any> services.location;\n\nloc.hash = () => \"\";\nloc.path = () => location.hash.replace(/^#/, \"\");\nloc.search = () => location.search;\nloc.setUrl = (url: string, replace: boolean = true) => {\n  if (url) location.hash = url;\n};\nloc.onChange = (cb: (ev?: HashChangeEvent) => any) => {\n  window.addEventListener(\"hashchange\", cb, false);\n};\n\nlet locCfg = <any> services.locationConfig;\n\nlocCfg.port = () => location.port;\nlocCfg.protocol = () => location.protocol;\nlocCfg.host = () => location.host;\nlocCfg.baseHref = () => \"\";\nlocCfg.html5Mode = () => false;\nlocCfg.hashPrefix = () => \"\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./justjs.ts\n **/","/** @module ng2 */ /** */\nimport {StateDeclaration, _ViewDeclaration} from \"../state/interface\";\nimport {Transition} from \"../transition/transition\";\nimport {Type, OpaqueToken} from \"@angular/core\";\nimport {HookResult} from \"../transition/interface\";\n\n/**\n * The StateDeclaration object is used to define a state or nested state.\n * It should be registered with the [[StateRegistry]].\n *\n * @example\n * ```js\n *\n * import {FoldersComponent} from \"./folders\";\n *\n * // StateDeclaration object\n * var foldersState = {\n *   name: 'folders',\n *   url: '/folders',\n *   component: FoldersComponent,\n *   resolve: {\n *     allfolders: function(FolderService) {\n *       return FolderService.list();\n *     }\n *   }\n * }\n * ```\n */\nexport interface Ng2StateDeclaration extends StateDeclaration, Ng2ViewDeclaration {\n  /**\n   * An optional object used to define multiple named views.\n   *\n   * Each key is the name of a view, and each value is a [[Ng2ViewDeclaration]].\n   * Unnamed views are internally renamed to `$default`.\n   *\n   * A view's name is used to match an active `<ui-view>` directive in the DOM.  When the state\n   * is entered, the state's views are activated and then matched with active `<ui-view>` directives:\n   *\n   * - The view's name is processed into a ui-view target:\n   *   - ui-view address: an address to a ui-view\n   *   - state anchor: the state to anchor the address to\n   *\n   *  Examples:\n   *\n   *  Targets three named ui-views in the parent state's template\n   *\n   * @example\n   * ```js\n   *\n   * views: {\n   *   header: HeaderComponent,\n   *   body: BodyComponent,\n   *   footer: FooterComponent\n   * }\n   * ```\n   *\n   * @example\n   * ```js\n   *\n   * // Targets named ui-view=\"header\" in the template of the ancestor state 'top'\n   * // and the named `ui-view=\"body\" from the parent state's template.\n   * views: {\n   *   'header@top': MsgHeaderComponent,\n   *   'body': MessagesComponent\n   * }\n   * ```\n   *\n   * ## View targeting details\n   *\n   * There are a few styles of view addressing/targeting.  The most common is a simple `ui-view` name\n   *\n   *\n   * #### Simple ui-view name\n   *\n   * Addresses without an `@` are anchored to the parent state.\n   *\n   * @example\n   * ```js\n   *\n   * // target the `<div ui-view='foo'></div>` created in the parent state's view\n   * views: { foo: {...} }\n   * ```\n   *\n   * #### View name anchored to a state\n   *\n   * You can anchor the `ui-view` name to a specific state by including an `@`\n   *\n   * @example\n   *\n   * ```js\n   *\n   * // target the `<div ui-view='foo'></div>` which was created in a\n   * // view owned by the state `bar.baz`\n   * views: { 'foo@bar.baz': {...} }\n   * ```\n   *\n   * #### Absolute addressing\n   *\n   * You can address a `ui-view` absolutely, using dotted notation, by prefixing the address with a `!`.  Dotted\n   * addresses map to the hierarchy of `ui-view`s active in the DOM:\n   *\n   * @example\n   * ```js\n   *\n   * // absolutely target the `<div ui-view='nested'></div>`... which was created\n   * // in the unnamed/$default root `<ui-view></ui-view>`\n   * views: { '!$default.nested': {...} }\n   * ```\n   *\n   * #### Relative addressing\n   *\n   * Absolute addressing is actually relative addressing, only anchored to the unnamed root state.  You can also use\n   * relative addressing anchored to any state, in order to target a target deeply nested `ui-views`:\n   *\n   * @example\n   * ```js\n   *\n   *\n   * // target the `<div ui-view='bar'></div>`... which was created inside the\n   * // `<div ui-view='bar'></div>`... which was created inside the parent state's template.\n   * views: { 'foo.bar': {...} }\n   * ```\n   *\n   * @example\n   * ```js\n   *\n   * // target the `<div ui-view='bar'></div>`...  which was created in\n   * // `<div ui-view='foo'></div>`... which was created in a template crom the state `baz.qux`\n   * views: { 'foo.bar@baz.qux': {...} }\n   *\n   * ---\n   *\n   * ## State `component:` and `views:` incompatiblity\n   *\n   * If a state has a `views` object, the state-level `component:` property is ignored.  Therefore,\n   * if _any view_ for a state is declared in the `views` object, then _all of the state's views_ must be defined in\n   * the `views` object.\n   */\n  views?: { [key: string]: Ng2ViewDeclaration; };\n}\n\nexport interface Ng2ViewDeclaration extends _ViewDeclaration {\n  /**\n   * The `Component` class to use for this view.\n   *\n   * A property of [[Ng2StateDeclaration]] or [[Ng2ViewDeclaration]]:\n   *\n   * ### The component class which will be used for this view.\n   *\n   * @example\n   * ```js\n   *\n   * .state('profile', {\n   *   // Use the <my-profile></my-profile> component for the Unnamed view\n   *   component: MyProfileComponent,\n   * }\n   *\n   * .state('messages', {\n   *   // use the <nav-bar></nav-bar> component for the view named 'header'\n   *   // use the <message-list></message-list> component for the view named 'content'\n   *   views: {\n   *     header: { component: NavBar },\n   *     content: { component: MessageList }\n   *   }\n   * }\n   *\n   * // Named views shorthand:\n   * // Inside a \"views:\" block, a Component class (NavBar) is shorthand for { component: NavBar }\n   * .state('contacts', {\n   *   // use the <nav-bar></nav-bar> component for the view named 'header'\n   *   // use the <contact-list></contact-list> component for the view named 'content'\n   *   views: {\n   *     header: NavBar,\n   *     content: ContactList\n   *   }\n   * }\n   * ```\n   *\n   * ### Accessing Resolve Data\n   *\n   * The component can access the Transition's [[Ng2StateDeclaration.resolve]] data in one of two ways:\n   *\n   * 1) Using Dependency Injection in the component constructor\n   *\n   * (using Typescript)\n   * ```js\n   * class MyComponent {\n   *   constructor(@Inject(\"myResolveData\") public resolveValueA, resolveValueB: public SomeClass) {\n   *   }\n   * }\n   * ```\n   *\n   * (using ES6/7/babel)\n   * ```js\n   * class MyComponent {\n   *   static get parameters() {\n   *     return [[\"myResolveData\"], [MyResolveClass]];\n   *   }\n   *   constructor(resolveValueA, resolveValueB) {\n   *     this.resolveValueA = resolveValueA;\n   *     this.resolveValueB = resolveValueB;\n   *   }\n   * }\n   * ```\n   *\n   * See also: https://github.com/shuhei/babel-plugin-angular2-annotations\n   *\n   * 2) Using a component input\n   *\n   * Note: To bind a resolve to a component input, the resolves must `provide:` a string value\n   *\n   * ```js\n   * @Component() {\n   *   inputs: ['resolveValueA']\n   * }\n   * class MyComponent {\n   *   myResolveValueA;\n   *   @Input() resolveValueB;\n   *   @Input(\"resolveValueC\") resolveValueC;\n   *\n   *   constructor() {\n   *   }\n   * }\n   * ```\n   */\n  component?: Type<any>;\n\n  /**\n   * An object which maps `resolve` keys to [[component]] `bindings`.\n   *\n   * A property of [[Ng2StateDeclaration]] or [[Ng2ViewDeclaration]]:\n   *\n   * When using a [[component]] declaration (`component: MyComponent`), each input binding for the component is supplied\n   * data from a resolve of the same name, by default.  You may supply data from a different resolve name by mapping it here.\n   *\n   * Each key in this object is the name of one of the component's input bindings.\n   * Each value is the name of the resolve that should be provided to that binding.\n   *\n   * Any component bindings that are omitted from this map get the default behavior of mapping to a resolve of the\n   * same name.\n   *\n   * @example\n   * ```js\n   *\n   * $stateProvider.state('foo', {\n   *   resolve: {\n   *     foo: function(FooService) { return FooService.get(); },\n   *     bar: function(BarService) { return BarService.get(); }\n   *   },\n   *   component: 'Baz',\n   *   // The component's `baz` binding gets data from the `bar` resolve\n   *   // The component's `foo` binding gets data from the `foo` resolve (default behavior)\n   *   bindings: {\n   *     baz: 'bar'\n   *   }\n   * });\n   *\n   * app.component('Baz', {\n   *   templateUrl: 'baz.html',\n   *   controller: 'BazController',\n   *   bindings: {\n   *     foo: '<', // foo binding\n   *     baz: '<'  // baz binding\n   *   }\n   * });\n   * ```\n   *\n   */\n  bindings?: { [key: string]: string };\n}\n\n/**\n * @hidden\n *\n * The shape of a controller for a view (and/or component), defining the controller callbacks.\n *\n * A view in UI-Router is comprised of either a `component` ([[Ng2ViewDeclaration.component]]) or a combination of a\n * `template` (or `templateProvider`) and a `controller` (or `controllerProvider`).\n *\n * The `controller` object (or the `component`'s controller object) can define component-level controller callbacks,\n * which UI-Router will call at the appropriate times.  These callbacks are similar to Transition Hooks\n * ([[IHookRegistry]]), but are only called if the view is currently active.\n *\n * This interface defines the UI-Router component callbacks.\n *\n * TODO: this should extend the ng2 Component interface\n */\nexport interface Ng2Component {\n  /**\n   * This callback is called when parameter values have changed.\n   *\n   * This callback can be used to respond to changing parameter values in the current state, or in parent/child states.\n   * This callback is especially handy when using dynamic parameters ([[ParamDeclaration.dynamic]])\n   *\n   * Called when:\n   * - The view is still active\n   * - A new transition has completed successfully\n   * - The state for the view (controller) was not reloaded\n   * - At least one parameter value was changed\n   *\n   * Called with:\n   * @param newValues an object containing the changed parameter values\n   * @param $transition$ the new Transition which triggered this callback\n   *\n   * @example:\n   * ```js\n   *\n   * angular.module('foo').controller('FancyCtrl', function() {\n   *   this.uiOnParamsChanged = function(newParams) {\n   *     console.log(\"new params: \", newParams);\n   *   }\n   * });\n   * ```\n   */\n  uiOnParamsChanged(newValues: any, $transition$: Transition): void;\n\n  /**\n   * This callback is called when the view's state is about to be exited.\n   *\n   * This callback is used to inform a view that it is about to be exited, due to a new [[Transition]].\n   * The callback can ask for user confirmation, and cancel or alter the new Transition.  The callback should\n   * return a value, or a promise for a value.  If a promise is returned, the new Transition waits until the\n   * promise settles.\n   *\n   *\n   * Called when:\n   * - The view is still active\n   * - A new Transition is about to run\n   * - The new Transition will exit the view's state\n   *\n   * Called with:\n   * - This callback is injected in the new Transition's context\n   *\n   * Relevant return Values:\n   * - `false`: The transition is cancelled.\n   * - A rejected promise: The transition is cancelled.\n   * - [[TargetState]]: The transition is redirected to the new target state.\n   * - Anything else: the transition will continue normally (the state and view will be deactivated)\n   *\n   * @return a value, or a promise for a value.\n   */\n  uiCanExit(): HookResult;\n}\n\nexport const NG2_INJECTOR_TOKEN = new OpaqueToken(\"NgModule Injector\");\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/interface.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_55__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"@angular/core\",\"amd\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"commonjs\":\"@angular/core\"}\n ** module id = 55\n ** module chunks = 0 1\n **/","/** @module ng2 */ /** */\nimport {NgModuleFactoryLoader, NgModuleRef, Injector, NgModuleFactory} from \"@angular/core\";\n\nimport {LazyLoadResult} from \"../state/interface\";\n\nimport {Transition} from \"../transition/transition\";\nimport {RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN} from \"./uiRouterNgModule\";\nimport {applyModuleConfig} from \"./uiRouterConfig\";\nimport {UIRouter} from \"../router\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {NATIVE_INJECTOR_TOKEN} from \"../resolve/resolveContext\";\n\n/**\n * Returns a function which lazy loads a nested module\n *\n * Use this function as a [[StateDeclaration.lazyLoad]] property to lazy load a state tree (an NgModule).\n *\n * @param path the path to the module source code.\n * @returns A function which takes a transition, then:\n *\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n *\n * returns the new states array\n */\nexport function loadNgModule(path: string): (transition: Transition) => Promise<LazyLoadResult> {\n  /** Get the parent NgModule Injector (from resolves) */\n  const getNg2Injector = (transition: Transition) =>\n      transition.injector().getAsync(NATIVE_INJECTOR_TOKEN);\n\n  /**\n   * Lazy loads the NgModule using the NgModuleFactoryLoader\n   *\n   * Use the parent NgModule's Injector to:\n   * - Find the correct NgModuleFactoryLoader\n   * - Load the new NgModuleFactory from the path string (async)\n   * - Create the new NgModule\n   */\n  const createNg2Module = (path: string, ng2Injector: Injector) =>\n      ng2Injector.get(NgModuleFactoryLoader).load(path).then((factory: NgModuleFactory<any>) => \n          factory.create(ng2Injector));\n\n  /**\n   * Apply the UI-Router Modules found in the lazy loaded module.\n   *\n   * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n   *\n   * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n   * The NgModule should include a state with the same name as the placeholder.\n   *\n   * Find the *newly loaded state* with the same name as the *placeholder state*.\n   * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n   * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n   */\n  function loadUIRouterModules(transition: Transition, ng2Module: NgModuleRef<any>): LazyLoadResult {\n    let injector = ng2Module.injector;\n    let parentInjector = <Injector> ng2Module.injector['parent'];\n    let uiRouter: UIRouter = injector.get(UIRouter);\n\n    let originalName = transition.to().name;\n    let originalState = uiRouter.stateRegistry.get(originalName);\n\n    let rootModules: RootModule[] = injector.get(UIROUTER_ROOT_MODULE);\n    let parentRootModules: RootModule[] = parentInjector.get(UIROUTER_ROOT_MODULE);\n    let newRootModules = rootModules.filter(module => parentRootModules.indexOf(module) === -1);\n\n    if (newRootModules.length) {\n      console.log(rootModules);\n      throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n    }\n\n    let modules: StatesModule[] = injector.get(UIROUTER_MODULE_TOKEN);\n    modules.forEach(module => applyModuleConfig(uiRouter, injector, module));\n\n    let replacementState = uiRouter.stateRegistry.get(originalName);\n    if (replacementState === originalState) {\n      throw new Error(`The module that was loaded from ${path} should have a ui-router state named '${originalName}'`);\n    }\n\n    // Supply the newly loaded states with the Injector from the lazy loaded NgModule\n    replacementState.$$state().resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector));\n\n    return {};\n  }\n\n  return (transition: Transition) => getNg2Injector(transition)\n      .then((injector: Injector) => createNg2Module(path, injector))\n      .then((moduleRef: NgModuleRef<any>) => loadUIRouterModules(transition, moduleRef))\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/lazyLoadNgModule.ts\n **/","/** @module ng2 */ /** */\nimport {Ng2StateDeclaration} from \"./interface\";\nimport {NgModule, OpaqueToken, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Provider, Type} from \"@angular/core\";\nimport {_UIROUTER_DIRECTIVES} from \"./directives/directives\";\nimport {UIView} from \"./directives/uiView\";\nimport {RawParams} from \"../params/interface\";\nimport {identity} from \"../common/common\";\nimport {LocationStrategy, HashLocationStrategy, PathLocationStrategy} from \"@angular/common\";\nimport {_UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS} from \"./providers\";\n\n\n/**\n * Creates UI-Router Modules\n *\n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n *\n * ### UIRouter Directives\n *\n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n *\n * ### State Definitions\n *\n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n *\n * ### Entry Components\n *\n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\n@NgModule({\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n})\nexport class UIRouterModule {\n  /**\n   * Creates a UI-Router Module for the root (bootstrapped) application module to import\n   *\n   * This factory function creates an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n   * An application should only create and import a single `NgModule` using `forRoot()`.\n   * All other modules should be created using [[UIRouterModule.forChild]].\n   *\n   * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n   * This factory also accepts root-level router configuration.\n   * These are the only differences between `forRoot` and `forChild`.\n   *\n   * Example:\n   * ```js\n   * let routerConfig = {\n   *   otherwise: '/home',\n   *   states: [homeState, aboutState]\n   * };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     BrowserModule,\n   *     UIRouterModule.forRoot(routerConfig),\n   *     FeatureModule1\n   *   ]\n   * })\n   * class MyRootAppModule {}\n   *\n   * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n   * ```\n   *\n   * @param config declarative UI-Router configuration\n   * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\n   */\n  static forRoot(config: RootModule = {}): ModuleWithProviders {\n    let locationStrategy = config.useHash ? HashLocationStrategy : PathLocationStrategy;\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        { provide: LocationStrategy, useClass: locationStrategy },\n        ...makeProviders(config, true),\n      ]\n    }\n  }\n\n  /**\n   * Creates an `NgModule` for an UIRouter module\n   *\n   * This function creates an [Angular 2 NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * @example\n   * ```js\n   *\n   * var homeState = { name: 'home', url: '/home', component: Home };\n   * var aboutState = { name: 'about', url: '/about', component: About };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n   *     SharedModule,\n   *   ],\n   *   declarations: [ Home, About ],\n   * })\n   * export class AppModule {};\n   * ```\n   *\n   * @param module UI-Router module options\n   * @returns an `NgModule`\n   */\n  static forChild(module: StatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeProviders(module, false),\n    }\n  }\n\n}\n\n\nexport function makeProviders(module: StatesModule, forRoot: boolean): Provider[] {\n  let providers: Provider[] = [module.configClass]\n      .filter(identity)\n      .map(configClass => ({ provide: configClass, useClass: configClass }));\n\n  if (forRoot) providers.push({ provide: UIROUTER_ROOT_MODULE, useValue: module, multi: true});\n  providers.push({ provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true });\n  providers.push({ provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true });\n\n  return providers;\n}\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean\n\n  /**\n   * Sets [[UrlRouterProvider.otherwise]].\n   */\n  otherwise?: (string | Function | { state: string, params?: RawParams })\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering parameter types or Transition Hooks)\n   * a `configClass` should be supplied.\n   *\n   * Mark the class as `@Injectable()` and inject any required dependencies.\n   * When the module is being loaded, an instance will be created and injected.\n   *\n   * Example:\n   * ```js\n   * @Injectable()\n   * export class MyUIRouterConfig {\n   *   // The constructor may be injected\n   *   constructor(uiRouter: UIRouter) {\n   *     const requireAuthentication = (transition: Transition) => {\n   *       let injector = transition.injector();\n   *       if (!injector.get(AuthService).isAuthenticated()) {\n   *         return uiRouter.stateService.target('login');\n   *       }\n   *     }\n   *\n   *     uiRouter.transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthentication);\n   *\n   *     let builtInStringType = urlMatcherFactory.type('string');\n   *     let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *     uiRouter.urlMatcherFactory.type('slug', slugType);\n   *   }\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, configClass: MyUIRouterConfig });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  configClass?: Type<any>;\n}\n\nexport const UIROUTER_ROOT_MODULE = new OpaqueToken(\"UIRouter Root Module\");\nexport const UIROUTER_MODULE_TOKEN = new OpaqueToken(\"UIRouter Module\");\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/uiRouterNgModule.ts\n **/","/**\n * The UI-Router Angular 2 directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @preferred @module ng2_directives\n */ /** */\nimport {UISref, AnchorUISref} from \"./uiSref\";\nimport {UISrefActive} from \"./uiSrefActive\";\nimport {UIView} from \"./uiView\";\nimport {UISrefStatus} from \"./uiSrefStatus\";\n\nexport * from \"./uiView\";\nexport * from \"./uiSref\";\nexport * from \"./uiSrefStatus\";\nexport * from \"./uiSrefActive\";\n\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/directives.ts\n **/","/** @module ng2_directives */ /** */\nimport {UIRouter} from \"../../router\";\nimport {Directive, Inject, Input} from \"@angular/core\";\nimport {Optional} from \"@angular/core\";\nimport {ElementRef} from \"@angular/core\";\nimport {Renderer} from \"@angular/core\";\nimport {UIView, ParentUIViewInject} from \"./uiView\";\nimport {extend, Obj} from \"../../common/common\";\nimport {TransitionOptions} from \"../../transition/interface\";\nimport {Globals, UIRouterGlobals} from \"../../globals\";\nimport {Subscription, ReplaySubject} from \"rxjs/Rx\";\nimport {TargetState} from \"../../state/targetState\";\n\n/** @hidden */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer) { }\n  update(href: string) {\n    this._renderer.setElementProperty(this._el.nativeElement, 'href', href);\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]], \n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n * \n * ### Inputs\n * \n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  host: { '(click)': 'go()' }\n})\nexport class UISref {\n  @Input('uiSref') state: string;\n  @Input('uiParams') params: any;\n  @Input('uiOptions') options: any;\n\n  public targetState$ = new ReplaySubject<TargetState>(1);\n  private _emit: boolean = false;\n\n  private _statesSub: Subscription;\n\n  constructor(\n      private _router: UIRouter,\n      @Inject(UIView.PARENT_INJECT) public parent: ParentUIViewInject,\n      @Optional() private _anchorUISref: AnchorUISref,\n      @Inject(Globals) _globals: UIRouterGlobals\n  ) {\n    this._statesSub = _globals.states$.subscribe(() => this.update())\n  }\n\n  set \"uiSref\"(val: string) { this.state = val; this.update(); }\n  set \"uiParams\"(val: Obj) { this.params = val; this.update(); }\n  set \"uiOptions\"(val: TransitionOptions) { this.options = val; this.update(); }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  update() {\n    let $state = this._router.stateService;\n    if (this._emit) {\n      let newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      let href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n\n  getOptions() {\n    let defaultOpts: TransitionOptions = {\n      relative: this.parent && this.parent.context && this.parent.context.name,\n      inherit: true ,\n      source: \"sref\"\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  go() {\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiSref.ts\n **/","/** @module ng2_directives */ /** */\nimport {\n    Component, ComponentFactoryResolver, ViewContainerRef, Input, ComponentRef, Type,\n    ReflectiveInjector, ViewChild, Injector, Inject\n} from '@angular/core';\nimport {ReflectorReader, reflector} from '../private_import_core';\n\nimport {UIRouter} from \"../../router\";\nimport {trace} from \"../../common/trace\";\nimport {ViewContext, ViewConfig, ActiveUIView} from \"../../view/interface\";\nimport {Ng2ViewConfig} from \"../statebuilders/views\";\nimport {ResolveContext, NATIVE_INJECTOR_TOKEN} from \"../../resolve/resolveContext\";\nimport {flattenR} from \"../../common/common\";\nimport {MergeInjector} from \"../mergeInjector\";\n\n/** @hidden */\nlet id = 0;\n\n// These are provide()d as the string UIView.PARENT_INJECT\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n\n/** @hidden */\nconst ng2ComponentInputs = (ng2CompClass: Type<any>) => {\n  /** Get \"@Input('foo') _foo\" inputs */\n  let props = reflector.propMetadata(ng2CompClass);\n  let _props = Object.keys(props || {})\n      // -> [ { key: string, anno: annotations[] } ] tuples\n      .map(key => ({ key, annoArr: props[key] }))\n      // -> flattened to [ { key: string, anno: annotation } ] tuples\n      .reduce((acc, tuple) => acc.concat(tuple.annoArr.map(anno => ({ key: tuple.key, anno }))), [])\n      // Only Inputs\n      .filter(tuple => tuple.anno instanceof Input)\n      // If they have a bindingPropertyName, i.e. \"@Input('foo') _foo\", then foo, else _foo\n      .map(tuple => ({ token: tuple.anno.bindingPropertyName || tuple.key, prop: tuple.key }));\n\n  /** Get \"inputs: ['foo']\" inputs */\n  let inputs = reflector.annotations(ng2CompClass)\n      // Find the ComponentMetadata class annotation\n      .filter(x => x instanceof Component && !!x.inputs)\n      // Get the .inputs string array\n      .map(x => x.inputs)\n      .reduce(flattenR, [])\n      .map(input => ({ token: input, prop: input }));\n\n  return _props.concat(inputs) as InputMapping[];\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * @example\n * ```js\n *\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * @example\n * ```js\n *\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n@Component({\n  selector: 'ui-view, [ui-view]',\n  template: `<template #componentTarget></template>`\n  // styles: [`\n  //   .done-true {\n  //     text-decoration: line-through;\n  //     color: grey;\n  //   }`\n  // ],\n  // template: `\n  // <div style=\"padding: 1em; border: 1px solid lightgrey;\">\n  //\n  //   <div #content style=\"color: lightgrey; font-size: smaller;\">\n  //     <div>ui-view #{{uiViewData?.id}} created by '{{ parentContext?.name || \"(root)\" }}' state</div>\n  //     <div>name: (absolute) '{{uiViewData?.fqn}}' (contextual) '{{uiViewData?.name}}@{{parentContext?.name}}' </div>\n  //     <div>currently filled by: '{{(uiViewData?.config && uiViewData?.config?.viewDecl?.$context) || 'empty...'}}'</div>\n  //   </div>\n  //\n  // </div>`\n})\nexport class UIView {\n  @ViewChild('componentTarget', {read: ViewContainerRef}) componentTarget: ViewContainerRef;\n  @Input('name') name: string;\n  @Input('ui-view') set _name(val: string) { this.name = val; }\n  componentRef: ComponentRef<any>;\n  deregister: Function;\n  uiViewData: ActiveUIView = <any> {};\n  parent: ParentUIViewInject;\n\n  static PARENT_INJECT = \"UIView.PARENT_INJECT\";\n\n  constructor(\n      public router: UIRouter,\n      @Inject(UIView.PARENT_INJECT) parent,\n      public viewContainerRef: ViewContainerRef\n  ) {\n    this.parent = parent;\n  }\n\n  ngOnInit() {\n    let parentFqn = this.parent.fqn;\n    let name = this.name || '$default';\n\n    this.uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + \".\" + name : name,\n      creationContext: this.parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined\n    };\n\n    this.deregister = this.router.viewService.registerUIView(this.uiViewData);\n  }\n\n  disposeLast() {\n    if (this.componentRef) this.componentRef.destroy();\n    this.componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this.deregister) this.deregister();\n    this.disposeLast();\n  }\n\n  /**\n   * The view service is informing us of an updated ViewConfig\n   * (usually because a transition activated some state and its views)\n   */\n  viewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this.disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this.uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this.disposeLast();\n    trace.traceUIViewConfigUpdated(this.uiViewData, config && config.viewDecl.$context);\n\n    this.applyUpdatedConfig(config);\n  }\n\n  applyUpdatedConfig(config: Ng2ViewConfig) {\n    this.uiViewData.config = config;\n    // Create the Injector for the routed component\n    let context = new ResolveContext(config.path);\n    let componentInjector = this.getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    let componentClass = config.viewDecl.component;\n\n    // Create the component\n    let compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    let compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this.componentRef = this.componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this.applyInputBindings(this.componentRef, context, componentClass);\n\n    // TODO: wire uiCanExit and uiOnParamsChanged callbacks\n  }\n\n  /**\n   * Creates a new Injector for a routed component.\n   *\n   * Adds resolve values to the Injector\n   * Adds providers from the NgModule for the state\n   * Adds providers from the parent Component in the component tree\n   * Adds a PARENT_INJECT view context object\n   *\n   * @returns an Injector\n   */\n  getComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    let resolvables = context.getTokens().map(token => context.getResolvable(token)).filter(r => r.resolved);\n    let newProviders = resolvables.map(r => ({ provide: r.token, useValue: r.data }));\n\n    var parentInject = { context: this.uiViewData.config.viewDecl.$context, fqn: this.uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    let parentComponentInjector = this.viewContainerRef.injector;\n    let moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    let mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n\n  /**\n   * Supplies component inputs with resolve data\n   *\n   * Finds component inputs which match resolves (by name) and sets the input value\n   * to the resolve data.\n   */\n  applyInputBindings(ref: ComponentRef<any>, context: ResolveContext, componentClass) {\n    let bindings = this.uiViewData.config.viewDecl['bindings'] || {};\n\n    var addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(bindings[tuple.prop] || tuple.token)\n    });\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    let inputTuples = ng2ComponentInputs(componentClass);\n    inputTuples.map(addResolvable)\n        .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n        .forEach(tuple => { ref.instance[tuple.prop] = tuple.resolvable.data });\n\n    // Initiate change detection for the newly created component\n    ref.changeDetectorRef.detectChanges();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiView.ts\n **/","/**\n * @Kamshak It's imported like this in @angular/compiler as well.\n * Was going to mark it injectable as in\n * https://github.com/angular/angular/blob/42a287fabf6b035d51e00cf3006c27fec00f054a/modules/%40angular/compiler/src/ng_module_resolver.ts\n * but unfortunately not all platforms (namely browser-dynamic) provide it.\n */\n\nimport { __core_private__ as r} from '@angular/core';\nexport type ReflectorReader = typeof r._ReflectorReader;\nexport var reflector: typeof r.reflector = r.reflector;\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/private_import_core.ts\n **/","/** @module ng2 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {PathNode} from \"../../path/node\";\nimport {pick, forEach} from \"../../common/common\";\nimport {ViewConfig} from \"../../view/interface\";\nimport {Ng2ViewDeclaration} from \"../interface\";\nimport {services} from \"../../common/coreservices\";\nimport {ViewService} from \"../../view/view\";\n\n/**\n * This is a [[StateBuilder.builder]] function for angular2 `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-ng2.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function ng2ViewsBuilder(state: State) {\n  let views: { [key: string]: Ng2ViewDeclaration } = {},\n      viewsObject = state.views || {\"$default\": pick(state, \"component\")};\n\n  forEach(viewsObject, function (config: Ng2ViewDeclaration, name: string) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"ng2\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded: boolean = true;\n\n  constructor(public path: PathNode[], public viewDecl: Ng2ViewDeclaration) { }\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/statebuilders/views.ts\n **/","/** @module ng2 */ /** */\nimport {Injector} from \"@angular/core\";\n\n/**\n * Merge two injectors\n *\n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\n  private injectors: Injector[];\n  constructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error(\"pass at least two injectors\");\n    this.injectors = injectors;\n  }\n\n  /**\n   * Get the token from the first injector which contains it.\n   *\n   * Delegates to the first Injector.get().\n   * If not found, then delegates to the second Injector (and so forth).\n   * If no Injector contains the token, return the `notFoundValue`, or throw.\n   *\n   * @param token the DI token\n   * @param notFoundValue the value to return if none of the Injectors contains the token.\n   * @returns {any} the DI value\n   */\n  get(token: any, notFoundValue?: any): any {\n    for (let i = 0; i < this.injectors.length; i++) {\n      let val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/mergeInjector.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"rxjs/Rx\",\"amd\":\"rxjs/Rx\",\"commonjs2\":\"rxjs/Rx\",\"commonjs\":\"rxjs/Rx\"}\n ** module id = 64\n ** module chunks = 0 1\n **/","/** @module ng2_directives */ /** */\nimport {Directive, Input, ElementRef, Host, Renderer} from \"@angular/core\";\nimport {UISrefStatus, SrefStatus} from \"./uiSrefStatus\";\nimport {Subscription} from \"rxjs/Rx\";\n\n/**\n * A directive that adds a CSS class when a `uiSref` is active.\n *\n * ### Purpose\n *\n * This directive should be paired with a [[UISref]], and is used to apply a CSS class to the element when\n * the state that the `uiSref` targets is active.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is directly active\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when active\n *\n * @example\n * ```html\n *\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Foo Bar #{{bar.id}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSrefActive],[uiSrefActiveEq]'\n})\nexport class UISrefActive {\n\n  private _classes: string[] = [];\n  @Input('uiSrefActive') set active(val: string) { this._classes = val.split(\"\\s+\")};\n\n  private _classesEq: string[] = [];\n  @Input('uiSrefActiveEq') set activeEq(val: string) { this._classesEq = val.split(\"\\s+\")};\n\n  private _subscription: Subscription;\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer, @Host() host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.active));\n      this._classesEq.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.exact));\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiSrefActive.ts\n **/","/** @module ng2_directives */ /** */\nimport {Directive, Output, EventEmitter, ContentChildren, QueryList, Inject} from \"@angular/core\";\nimport {UISref} from \"./uiSref\";\nimport {PathNode} from \"../../path/node\";\nimport {Transition} from \"../../transition/transition\";\nimport {TargetState} from \"../../state/targetState\";\nimport {State} from \"../../state/stateObject\";\nimport {anyTrueR, tail, unnestR, Predicate} from \"../../common/common\";\nimport {Globals, UIRouterGlobals} from \"../../globals\";\nimport {Param} from \"../../params/param\";\nimport {PathFactory} from \"../../path/pathFactory\";\nimport {Subscription, Observable} from \"rxjs/Rx\";\n\ninterface TransEvt { evt: string, trans: Transition }\n\n/**\n * uiSref status booleans \n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n}\n\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  let state: State = target.$state();\n  let targetParamVals = target.params();\n  let targetPath: PathNode[] = PathFactory.buildPath(target);\n  let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    let tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    var paramValues = PathFactory.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathFactory.subPath(appendPath, n => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref: \n * active, activeEq (exact match), entering, exiting\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  let isStartEvent = event.evt === 'start';\n  let isSuccessEvent = event.evt === 'success';\n  let activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n  } as SrefStatus;\n}\n\n/**\n * A directive (which pairs with a [[UISref]]) and emits events when the UISref status changes.\n *\n * This directive is used by the [[UISrefActive]] directive.\n * \n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`\n * \n * The values from this event can be captured and stored on a component, then applied (perhaps using ngClass).\n *\n * This API is subject to change.\n */\n@Directive({ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' })\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n  @Output(\"uiSrefStatus\") uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n  @ContentChildren(UISref, {descendants: true}) srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  private _subscription: Subscription;\n\n  constructor(@Inject(Globals) private _globals: UIRouterGlobals) {\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    let transEvents$: Observable<TransEvt> = this._globals.start$.switchMap((trans: Transition) => {\n      const event = (evt: string) => ({evt, trans} as TransEvt);\n\n      let transStart$ = Observable.of(event(\"start\"));\n      let transResult = trans.promise.then(() => event(\"success\"), () => event(\"error\"));\n      let transFinish$ = Observable.fromPromise(transResult);\n\n      return transStart$.concat(transFinish$);\n    });\n\n    // Watch the children UISref components and get their target states\n    let srefs$: Observable<UISref[]> = Observable.of(this.srefs.toArray()).concat(this.srefs.changes);\n    let targetStates$: Observable<TargetState[]> =\n        srefs$.switchMap((srefs: UISref[]) =>\n            Observable.combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = transEvents$.mergeMap((evt: TransEvt) => {\n      return targetStates$.map((targets: TargetState[]) => {\n        let statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n\n        return statuses.reduce((acc: SrefStatus, val: SrefStatus) => ({\n          active: acc.active || val.active,\n          exact: acc.active || val.active,\n          entering: acc.active || val.active,\n          exiting: acc.active || val.active,\n        }))\n      })\n    }).subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/directives/uiSrefStatus.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_67__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"@angular/common\",\"amd\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"commonjs\":\"@angular/common\"}\n ** module id = 67\n ** module chunks = 0 1\n **/","/**\n * # UI-Router for Angular 2\n *\n * - [ui-router-ng2 home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n * \n * - Use npm. Add a dependency on latest `ui-router-ng2`\n * - Import UI-Router classes directly from `\"ui-router-ng2\"`\n *\n * ```js\n * import {StateRegistry} from \"ui-router-ng2\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"ui-router-ng2\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */ /** */\nimport {Injector, Provider} from \"@angular/core\";\nimport {UIRouter} from \"../router\";\nimport {PathNode} from \"../path/node\";\nimport {StateRegistry} from \"../state/stateRegistry\";\nimport {StateService} from \"../state/stateService\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {ViewService} from \"../view/view\";\nimport {UIView, ParentUIViewInject} from \"./directives/uiView\";\nimport {ng2ViewsBuilder, Ng2ViewConfig} from \"./statebuilders/views\";\nimport {Ng2ViewDeclaration} from \"./interface\";\nimport {applyRootModuleConfig, applyModuleConfig} from \"./uiRouterConfig\";\nimport {Globals} from \"../globals\";\nimport {UIRouterLocation} from \"./location\";\nimport {services} from \"../common/coreservices\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN} from \"./uiRouterNgModule\";\nimport {UIRouterRx} from \"./rx\";\nimport {NATIVE_INJECTOR_TOKEN} from \"../resolve/resolveContext\";\n\n/**\n * This is a factory function for a UIRouter instance\n *\n * Creates a UIRouter instance and configures it for Angular 2, then invokes router bootstrap.\n * This function is used as an Angular 2 `useFactory` Provider.\n */\nlet uiRouterFactory = (\n    location: UIRouterLocation,\n    injector: Injector) => {\n\n  let rootModules: RootModule[] = injector.get(UIROUTER_ROOT_MODULE);\n  let modules: StatesModule[] = injector.get(UIROUTER_MODULE_TOKEN);\n\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to the ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n  // Monkey patch the services.$location with ng2 Location implementation\n  location.init();\n\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  let router = new UIRouter();\n  new UIRouterRx(router);\n  let registry = router.stateRegistry;\n\n  // ----------------- Configure for ng2 -------------\n  // Apply ng2 ui-view handling code\n  router.viewService.viewConfigFactory(\"ng2\", (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config));\n  registry.decorator('views', ng2ViewsBuilder);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  registry.stateQueue.flush(router.stateService);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  let ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n\n  // ----------------- Initialize router -------------\n  // Allow states to be registered\n  registry.stateQueue.autoFlush(router.stateService);\n\n  setTimeout(() => {\n    rootModules.forEach(moduleConfig => applyRootModuleConfig(router, injector, moduleConfig));\n    modules.forEach(moduleConfig => applyModuleConfig(router, injector, moduleConfig));\n\n    // Start monitoring the URL\n    if (!router.urlRouterProvider.interceptDeferred) {\n      router.urlRouter.listen();\n      router.urlRouter.sync();\n    }\n  });\n\n  return router;\n};\n\nexport const _UIROUTER_INSTANCE_PROVIDERS: Provider[] =  [\n  { provide: UIRouter, useFactory: uiRouterFactory, deps: [UIRouterLocation, Injector] },\n  { provide: UIRouterLocation, useClass: UIRouterLocation },\n  { provide: UIView.PARENT_INJECT, useFactory: (r: StateRegistry) => { return { fqn: null, context: r.root() } as ParentUIViewInject }, deps: [StateRegistry]},\n];\n\nexport const _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService,      useFactory: (r: UIRouter) => r.stateService     , deps: [UIRouter]},\n  { provide: TransitionService, useFactory: (r: UIRouter) => r.transitionService, deps: [UIRouter]},\n  { provide: UrlMatcherFactory, useFactory: (r: UIRouter) => r.urlMatcherFactory, deps: [UIRouter]},\n  { provide: UrlRouter,         useFactory: (r: UIRouter) => r.urlRouter        , deps: [UIRouter]},\n  { provide: ViewService,       useFactory: (r: UIRouter) => r.viewService      , deps: [UIRouter]},\n  { provide: StateRegistry,     useFactory: (r: UIRouter) => r.stateRegistry    , deps: [UIRouter]},\n  { provide: Globals,           useFactory: (r: UIRouter) => r.globals          , deps: [UIRouter]},\n];\n\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/providers.ts\n **/","/** @module ng2 */ /** */\nimport {UIRouter} from \"../router\";\nimport {StatesModule, RootModule} from \"./uiRouterNgModule\";\nimport {Injector} from \"@angular/core\";\nimport {isDefined} from \"../common/predicates\";\n\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, options: StatesModule) {\n  if (options.configClass) {\n    injector.get(options.configClass);\n  }\n\n  let states = options.states || [];\n  states.forEach(state => uiRouter.stateRegistry.register(state));\n}\n\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, config: RootModule) {\n  if (isDefined(config.deferIntercept)) {\n    uiRouter.urlRouterProvider.deferIntercept(config.deferIntercept);\n  }\n\n  if (isDefined(config.otherwise)) {\n    if (isDefined(config.otherwise['state'])) {\n      uiRouter.urlRouterProvider.otherwise(function() {\n        let { state, params } = <any> config.otherwise;\n        uiRouter.stateService.go(state, params, { source: \"otherwise\" });\n        return null;\n      });\n    } else {\n      uiRouter.urlRouterProvider.otherwise(<any> config.otherwise);\n    }\n  }\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/uiRouterConfig.ts\n **/","/** @module ng2 */ /** */\nimport {HashLocationStrategy, PlatformLocation, LocationStrategy, LocationChangeListener} from \"@angular/common\";\nimport {Injectable} from \"@angular/core\";\n\nimport {services} from \"../common/coreservices\";\nimport {isDefined} from \"../common/predicates\";\nimport {applyPairs} from \"../common/common\";\nimport {beforeAfterSubstr} from \"../common/strings\";\n\nconst splitOnHash = beforeAfterSubstr(\"#\");\nconst splitOnEquals = beforeAfterSubstr(\"=\");\nconst splitOnQuestionMark = beforeAfterSubstr(\"?\");\n\n@Injectable()\nexport class UIRouterLocation {\n  isHashBang: boolean;\n  hashPrefix: string = \"\";\n\n  constructor(\n      public locationStrategy: LocationStrategy,\n      public platformLocation: PlatformLocation\n  ) {\n    this.isHashBang = locationStrategy instanceof HashLocationStrategy;\n  }\n\n  init() {\n    let loc = services.location;\n    let locSt = this.locationStrategy;\n\n    if (this.isHashBang) {\n      loc.path = () =>\n          splitOnHash(splitOnQuestionMark(locSt.path())[0])[0];\n      loc.hash = () =>\n          splitOnHash(splitOnHash(this.platformLocation.hash)[1])[1];\n    } else {\n      let basepath = locSt.getBaseHref();\n      let basepathRegExp = new RegExp(\"^\" + basepath);\n      let replace = (basepath[basepath.length - 1] === '/') ? \"/\" : \"\";\n      loc.path = () =>\n          splitOnHash(splitOnQuestionMark(locSt.path())[0])[0].replace(basepathRegExp, replace);\n      loc.hash = () =>\n          splitOnHash(this.platformLocation.hash)[1];\n    }\n\n\n    loc.search = <any> (() => {\n      let queryString = splitOnHash(splitOnQuestionMark(locSt.path())[1])[0];\n      return queryString.split(\"&\").map(kv => splitOnEquals(kv)).reduce(applyPairs, {});\n    });\n\n    loc.setUrl = (url: string, replace: boolean = false) => {\n      if(isDefined(url)) {\n        let split = splitOnQuestionMark(url);\n        if (replace) {\n          locSt.replaceState(null, null, split[0], split[1]);\n        } else {\n          locSt.pushState(null, null, split[0], split[1]);\n        }\n      }\n    };\n\n    loc.onChange = (cb: LocationChangeListener) => locSt.onPopState(cb) as any;\n\n    let locCfg = <any> services.locationConfig;\n\n    locCfg.port = () => null as number;\n    locCfg.protocol = () => null as string;\n    locCfg.host = () => null as string;\n    locCfg.baseHref = () => locSt.getBaseHref();\n    locCfg.html5Mode = () => !this.isHashBang;\n    locCfg.hashPrefix = (newprefix: string): string => {\n      if(isDefined(newprefix)) {\n        this.hashPrefix = newprefix;\n      }\n      return this.hashPrefix;\n    };\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/location.ts\n **/","/** @module ng2 */ /** */\nimport {Observable, ReplaySubject} from \"rxjs/Rx\";\nimport {Transition} from \"../transition/transition\";\nimport {UIRouter} from \"../router\";\nimport {StateDeclaration} from \"../state/interface\";\n\nexport interface StatesChangedEvent {\n  currentStates: StateDeclaration[];\n  registered: StateDeclaration[];\n  deregistered: StateDeclaration[];\n}\n\ndeclare module '../globals' {\n  interface UIRouterGlobals {\n    states$?: Observable<StatesChangedEvent>;\n    start$?: Observable<Transition>;\n    success$?: Observable<Transition>;\n    params$?: Observable<{ [paramName: string]: any }>;\n  }\n}\n\n/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */\nexport class UIRouterRx {\n  private deregisterFns: Function[] = [];\n\n  constructor(router: UIRouter) {\n    let start$ = new ReplaySubject<Transition>(1);\n    let success$ = <Observable<Transition>> start$.mergeMap((t: Transition) => t.promise.then(() => t));\n    let params$ = success$.map((transition: Transition) => transition.params());\n\n    let states$ = new ReplaySubject<StatesChangedEvent>(1);\n    function onStatesChangedEvent(event: string, states: StateDeclaration[]) {\n      let changeEvent = {\n        currentStates: router.stateRegistry.get(),\n        registered: [],\n        deregistered: []\n      };\n\n      if (event) changeEvent[event] = states;\n      states$.next(changeEvent);\n    }\n\n    this.deregisterFns.push(router.transitionService.onStart({}, transition => start$.next(transition)));\n    this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));\n    onStatesChangedEvent(null, null);\n    Object.assign(router.globals, {start$, success$, params$, states$});\n  }\n\n  dispose() {\n    this.deregisterFns.forEach(deregisterFn => deregisterFn());\n    this.deregisterFns = [];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2/rx.ts\n **/"],"sourceRoot":""}